
1_sd23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800b528  0800b528  0001b528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba2c  0800ba2c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba2c  0800ba2c  0001ba2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba34  0800ba34  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba38  0800ba38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ba3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000210  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113c5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a76  00000000  00000000  000315d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  00034f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b8b  00000000  00000000  00035d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f54  00000000  00000000  000578c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0632  00000000  00000000  0006b817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012be49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f80  00000000  00000000  0012be9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b510 	.word	0x0800b510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b510 	.word	0x0800b510

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 8000eb2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f000 fe43 	bl	8001b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f918 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 f9f6 	bl	80012ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec0:	f000 f9cc 	bl	800125c <MX_DMA_Init>
  MX_I2C1_Init();
 8000ec4:	f000 f97c 	bl	80011c0 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8000ec8:	f000 f9a8 	bl	800121c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000ecc:	f004 ffb6 	bl	8005e3c <MX_FATFS_Init>
  FATFS fs;
  HAL_StatusTypeDef ret;
  FRESULT fres;
  FIL f;

  fres = InitFS(&fs);
 8000ed0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 faf3 	bl	80014c0 <InitFS>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f887 3495 	strb.w	r3, [r7, #1173]	; 0x495
  if (fres != FR_OK) {
 8000ee0:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <main+0x40>
	  Error_Handler();
 8000ee8:	f000 fb6a 	bl	80015c0 <Error_Handler>
  }


  HAL_StatusTypeDef res = InitIMU();
 8000eec:	f000 fa5a 	bl	80013a4 <InitIMU>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 3494 	strb.w	r3, [r7, #1172]	; 0x494
  if (res != HAL_OK) {
 8000ef6:	f897 3494 	ldrb.w	r3, [r7, #1172]	; 0x494
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <main+0x56>
	  Error_Handler();
 8000efe:	f000 fb5f 	bl	80015c0 <Error_Handler>
  }


  //Junk begins here
  uint16_t count = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8a7 3496 	strh.w	r3, [r7, #1174]	; 0x496
  double val = 0.0;
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8000f14:	e9c1 2300 	strd	r2, r3, [r1]
  int16_t val_x = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
  int16_t val_y = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8a7 3484 	strh.w	r3, [r7, #1156]	; 0x484
  int16_t val_z = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8a7 3482 	strh.w	r3, [r7, #1154]	; 0x482
  uint8_t buf[6] = {0, 0, 0, 0, 0, 0} ;
 8000f2a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000f2e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000f32:	4a68      	ldr	r2, [pc, #416]	; (80010d4 <main+0x228>)
 8000f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f38:	6018      	str	r0, [r3, #0]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	8019      	strh	r1, [r3, #0]
  uint8_t str[20];
  UINT writeBytes = 0;
 8000f3e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000f42:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]

  fres = f_open(&f, "log3.txt", FA_CREATE_ALWAYS| FA_WRITE);
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	220a      	movs	r2, #10
 8000f50:	4961      	ldr	r1, [pc, #388]	; (80010d8 <main+0x22c>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f006 ff4a 	bl	8007dec <f_open>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3495 	strb.w	r3, [r7, #1173]	; 0x495
  if (fres != FR_OK){
 8000f5e:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <main+0xbe>
	  Error_Handler();
 8000f66:	f000 fb2b 	bl	80015c0 <Error_Handler>
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
	  //HAL_Delay(100);


	  // collect and log a bunch of samples
	  if (count < 10000) {
 8000f6a:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	; 0x496
 8000f6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f200 8086 	bhi.w	8001084 <main+0x1d8>
		ret = HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDR, ADXL343_REG_DATAX0, 1, buf, 6, 10);
 8000f78:	21a6      	movs	r1, #166	; 0xa6
 8000f7a:	2232      	movs	r2, #50	; 0x32
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2306      	movs	r3, #6
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	4853      	ldr	r0, [pc, #332]	; (80010dc <main+0x230>)
 8000f8e:	f001 ff2d 	bl	8002dec <HAL_I2C_Mem_Read>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3481 	strb.w	r3, [r7, #1153]	; 0x481
		if (ret != HAL_OK) {
 8000f98:	f897 3481 	ldrb.w	r3, [r7, #1153]	; 0x481
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <main+0xf8>
			Error_Handler();
 8000fa0:	f000 fb0e 	bl	80015c0 <Error_Handler>
		}

		val_x = (buf[1] << 8) + buf[0];
 8000fa4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000fa8:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000fb8:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
		val_y = (buf[3] << 8) + buf[2];
 8000fc8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000fcc:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000fd0:	78db      	ldrb	r3, [r3, #3]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000fdc:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000fe0:	789b      	ldrb	r3, [r3, #2]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f8a7 3484 	strh.w	r3, [r7, #1156]	; 0x484
		val_z = (buf[5] << 8) + buf[4];
 8000fec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8000ff0:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8000ff4:	795b      	ldrb	r3, [r3, #5]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8001000:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8001004:	791b      	ldrb	r3, [r3, #4]
 8001006:	b29b      	uxth	r3, r3
 8001008:	4413      	add	r3, r2
 800100a:	b29b      	uxth	r3, r3
 800100c:	f8a7 3482 	strh.w	r3, [r7, #1154]	; 0x482
		val = ADXL343_SCALE_8G * val_z;
 8001010:	f9b7 3482 	ldrsh.w	r3, [r7, #1154]	; 0x482
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80010e0 <main+0x234>
 8001020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001024:	ee17 0a90 	vmov	r0, s15
 8001028:	f7ff fa8e 	bl	8000548 <__aeabi_f2d>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8001034:	e9c1 2300 	strd	r2, r3, [r1]

		sprintf(str, "%f, %d\n", val, count);
 8001038:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	; 0x496
 800103c:	1d38      	adds	r0, r7, #4
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	4926      	ldr	r1, [pc, #152]	; (80010e4 <main+0x238>)
 800104a:	f007 ffe9 	bl	8009020 <siprintf>
		fres = f_write(&f, str, strlen(str), &writeBytes);
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4602      	mov	r2, r0
 8001058:	463b      	mov	r3, r7
 800105a:	1d39      	adds	r1, r7, #4
 800105c:	f107 0020 	add.w	r0, r7, #32
 8001060:	f007 f882 	bl	8008168 <f_write>
 8001064:	4603      	mov	r3, r0
 8001066:	f887 3495 	strb.w	r3, [r7, #1173]	; 0x495
		if (fres != FR_OK){
 800106a:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <main+0x1cc>
			return fres;
 8001072:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 8001076:	e027      	b.n	80010c8 <main+0x21c>
		if (f_printf(&f, "%5f, %d\n", val, count) < 0) {
			Error_Handler();
		}
		*/

		++count;
 8001078:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	; 0x496
 800107c:	3301      	adds	r3, #1
 800107e:	f8a7 3496 	strh.w	r3, [r7, #1174]	; 0x496
 8001082:	e772      	b.n	8000f6a <main+0xbe>
	  }
	  else if (count == 10000) {
 8001084:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	; 0x496
 8001088:	f242 7210 	movw	r2, #10000	; 0x2710
 800108c:	4293      	cmp	r3, r2
 800108e:	d113      	bne.n	80010b8 <main+0x20c>
		  fres = f_close(&f);
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	4618      	mov	r0, r3
 8001096:	f007 fa5a 	bl	800854e <f_close>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3495 	strb.w	r3, [r7, #1173]	; 0x495
		  if (fres != FR_OK) {
 80010a0:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <main+0x200>
			  Error_Handler();
 80010a8:	f000 fa8a 	bl	80015c0 <Error_Handler>
		  }
		  ++count;
 80010ac:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	; 0x496
 80010b0:	3301      	adds	r3, #1
 80010b2:	f8a7 3496 	strh.w	r3, [r7, #1174]	; 0x496
 80010b6:	e758      	b.n	8000f6a <main+0xbe>
	  }
	  else {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80010b8:	2102      	movs	r1, #2
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <main+0x23c>)
 80010bc:	f001 fc3d 	bl	800293a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f000 fd99 	bl	8001bf8 <HAL_Delay>
	  if (count < 10000) {
 80010c6:	e750      	b.n	8000f6a <main+0xbe>
	  }

  }
  /* USER CODE END 3 */
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	f507 6793 	add.w	r7, r7, #1176	; 0x498
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	0800b53c 	.word	0x0800b53c
 80010d8:	0800b528 	.word	0x0800b528
 80010dc:	200001f8 	.word	0x200001f8
 80010e0:	3e1cbbc3 	.word	0x3e1cbbc3
 80010e4:	0800b534 	.word	0x0800b534
 80010e8:	40020800 	.word	0x40020800

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f007 fb1e 	bl	800873c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <SystemClock_Config+0xcc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <SystemClock_Config+0xcc>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <SystemClock_Config+0xcc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <SystemClock_Config+0xd0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <SystemClock_Config+0xd0>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <SystemClock_Config+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800115c:	2308      	movs	r3, #8
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 224;
 8001160:	23e0      	movs	r3, #224	; 0xe0
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001168:	2307      	movs	r3, #7
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fbbd 	bl	80038f0 <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800117c:	f000 fa20 	bl	80015c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2105      	movs	r1, #5
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fe1e 	bl	8003de0 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011aa:	f000 fa09 	bl	80015c0 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C1_Init+0x50>)
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_I2C1_Init+0x54>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_I2C1_Init+0x50>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_I2C1_Init+0x58>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_I2C1_Init+0x50>)
 80011de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_I2C1_Init+0x50>)
 80011fe:	f001 fbb7 	bl	8002970 <HAL_I2C_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001208:	f000 f9da 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200001f8 	.word	0x200001f8
 8001214:	40005400 	.word	0x40005400
 8001218:	00061a80 	.word	0x00061a80

0800121c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_SDIO_SD_Init+0x38>)
 8001222:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <MX_SDIO_SD_Init+0x3c>)
 8001224:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_SDIO_SD_Init+0x38>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_SDIO_SD_Init+0x38>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_SDIO_SD_Init+0x38>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_SDIO_SD_Init+0x38>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <MX_SDIO_SD_Init+0x38>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <MX_SDIO_SD_Init+0x38>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	2000024c 	.word	0x2000024c
 8001258:	40012c00 	.word	0x40012c00

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_DMA_Init+0x4c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <MX_DMA_Init+0x4c>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_DMA_Init+0x4c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	203b      	movs	r0, #59	; 0x3b
 8001284:	f000 fdb7 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001288:	203b      	movs	r0, #59	; 0x3b
 800128a:	f000 fdd0 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2045      	movs	r0, #69	; 0x45
 8001294:	f000 fdaf 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001298:	2045      	movs	r0, #69	; 0x45
 800129a:	f000 fdc8 	bl	8001e2e <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <MX_GPIO_Init+0xec>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a33      	ldr	r2, [pc, #204]	; (8001398 <MX_GPIO_Init+0xec>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <MX_GPIO_Init+0xec>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_GPIO_Init+0xec>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a2c      	ldr	r2, [pc, #176]	; (8001398 <MX_GPIO_Init+0xec>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <MX_GPIO_Init+0xec>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <MX_GPIO_Init+0xec>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a25      	ldr	r2, [pc, #148]	; (8001398 <MX_GPIO_Init+0xec>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <MX_GPIO_Init+0xec>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_GPIO_Init+0xec>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <MX_GPIO_Init+0xec>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_GPIO_Init+0xec>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_GPIO_Init+0xec>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <MX_GPIO_Init+0xec>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_GPIO_Init+0xec>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2102      	movs	r1, #2
 8001352:	4812      	ldr	r0, [pc, #72]	; (800139c <MX_GPIO_Init+0xf0>)
 8001354:	f001 fad8 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001358:	2302      	movs	r3, #2
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <MX_GPIO_Init+0xf0>)
 8001370:	f001 f916 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_GPIO_Init+0xf4>)
 800138a:	f001 f909 	bl	80025a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020400 	.word	0x40020400

080013a4 <InitIMU>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef InitIMU() {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af04      	add	r7, sp, #16

	HAL_StatusTypeDef ret;
	uint8_t buf[1] = {0};
 80013aa:	2300      	movs	r3, #0
 80013ac:	713b      	strb	r3, [r7, #4]

	//TODO: ASXL343 has a built in self-test. Use it?
	ret = HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDR, ADXL343_REG_DEVID, 1, buf, 1, 10);
 80013ae:	21a6      	movs	r1, #166	; 0xa6
 80013b0:	2200      	movs	r2, #0
 80013b2:	230a      	movs	r3, #10
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2301      	movs	r3, #1
 80013c0:	483e      	ldr	r0, [pc, #248]	; (80014bc <InitIMU+0x118>)
 80013c2:	f001 fd13 	bl	8002dec <HAL_I2C_Mem_Read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <InitIMU+0x30>
		return ret;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	e06e      	b.n	80014b2 <InitIMU+0x10e>
	}
	if (buf[0] != 0xe5) {	//check device id
 80013d4:	793b      	ldrb	r3, [r7, #4]
 80013d6:	2be5      	cmp	r3, #229	; 0xe5
 80013d8:	d001      	beq.n	80013de <InitIMU+0x3a>
		return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e069      	b.n	80014b2 <InitIMU+0x10e>
	}


	// configure interrupts
	buf[0] = 0b00000000;		// disable all interrupts for now
 80013de:	2300      	movs	r3, #0
 80013e0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, ADXL343_REG_INTENABLE, 1, buf, 1, 10);
 80013e2:	21a6      	movs	r1, #166	; 0xa6
 80013e4:	222e      	movs	r2, #46	; 0x2e
 80013e6:	230a      	movs	r3, #10
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	2301      	movs	r3, #1
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4831      	ldr	r0, [pc, #196]	; (80014bc <InitIMU+0x118>)
 80013f6:	f001 fbff 	bl	8002bf8 <HAL_I2C_Mem_Write>
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <InitIMU+0x64>
		return ret;
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	e054      	b.n	80014b2 <InitIMU+0x10e>
	}

	// set the data format and range
	buf[0] = 0b00000010;		// set to +/-8g max
 8001408:	2302      	movs	r3, #2
 800140a:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, ADXL343_REG_DATAFORMAT, 1, buf, 1, 10);
 800140c:	21a6      	movs	r1, #166	; 0xa6
 800140e:	2231      	movs	r2, #49	; 0x31
 8001410:	230a      	movs	r3, #10
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	4827      	ldr	r0, [pc, #156]	; (80014bc <InitIMU+0x118>)
 8001420:	f001 fbea 	bl	8002bf8 <HAL_I2C_Mem_Write>
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <InitIMU+0x8e>
		return ret;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	e03f      	b.n	80014b2 <InitIMU+0x10e>
	}

	// set the data rate and power mode
	buf[0] = 0b00001101;		// set to 800 Hz, normal operation mode
 8001432:	230d      	movs	r3, #13
 8001434:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, ADXL343_REG_BWRATE, 1, buf, 1, 10);
 8001436:	21a6      	movs	r1, #166	; 0xa6
 8001438:	222c      	movs	r2, #44	; 0x2c
 800143a:	230a      	movs	r3, #10
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	481c      	ldr	r0, [pc, #112]	; (80014bc <InitIMU+0x118>)
 800144a:	f001 fbd5 	bl	8002bf8 <HAL_I2C_Mem_Write>
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <InitIMU+0xb8>
		return ret;
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	e02a      	b.n	80014b2 <InitIMU+0x10e>
	}

	// set the fifo operation mode
	buf[0] = 0b00000000;		// set fifo to bypass
 800145c:	2300      	movs	r3, #0
 800145e:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, ADXL343_REG_FIFOCTL, 1, buf, 1, 10);
 8001460:	21a6      	movs	r1, #166	; 0xa6
 8001462:	2238      	movs	r2, #56	; 0x38
 8001464:	230a      	movs	r3, #10
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	2301      	movs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2301      	movs	r3, #1
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <InitIMU+0x118>)
 8001474:	f001 fbc0 	bl	8002bf8 <HAL_I2C_Mem_Write>
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <InitIMU+0xe2>
		return ret;
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	e015      	b.n	80014b2 <InitIMU+0x10e>
	}


	// set the power/sleep settings
	buf[0] = 0b00001000;		// sets device in measurement mode
 8001486:	2308      	movs	r3, #8
 8001488:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, ADXL343_REG_PWRCTL, 1, buf, 1, 10);
 800148a:	21a6      	movs	r1, #166	; 0xa6
 800148c:	222d      	movs	r2, #45	; 0x2d
 800148e:	230a      	movs	r3, #10
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	2301      	movs	r3, #1
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2301      	movs	r3, #1
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <InitIMU+0x118>)
 800149e:	f001 fbab 	bl	8002bf8 <HAL_I2C_Mem_Write>
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <InitIMU+0x10c>
		return ret;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	e000      	b.n	80014b2 <InitIMU+0x10e>
	}
	return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001f8 	.word	0x200001f8

080014c0 <InitFS>:

	return 0;
}


FRESULT InitFS(FATFS *fs){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80014cc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80014d0:	6018      	str	r0, [r3, #0]
  FIL f;
  FRESULT fres;
  char buf[6] = "Hello";
 80014d2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80014d6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80014da:	4a35      	ldr	r2, [pc, #212]	; (80015b0 <InitFS+0xf0>)
 80014dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e0:	6018      	str	r0, [r3, #0]
 80014e2:	3304      	adds	r3, #4
 80014e4:	8019      	strh	r1, [r3, #0]
  UINT writeBytes;

  // Re-initialize SD
  if ( BSP_SD_Init() != MSD_OK ) {
 80014e6:	f004 fcc3 	bl	8005e70 <BSP_SD_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <InitFS+0x34>
    return FR_NOT_READY;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e057      	b.n	80015a4 <InitFS+0xe4>
  }
  // Re-initialize FATFS
  if ( FATFS_UnLinkDriver(SDPath) != 0 ) {
 80014f4:	482f      	ldr	r0, [pc, #188]	; (80015b4 <InitFS+0xf4>)
 80014f6:	f007 f8e9 	bl	80086cc <FATFS_UnLinkDriver>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <InitFS+0x44>
    return FR_NOT_READY;
 8001500:	2303      	movs	r3, #3
 8001502:	e04f      	b.n	80015a4 <InitFS+0xe4>
  }
  if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
 8001504:	492b      	ldr	r1, [pc, #172]	; (80015b4 <InitFS+0xf4>)
 8001506:	482c      	ldr	r0, [pc, #176]	; (80015b8 <InitFS+0xf8>)
 8001508:	f007 f898 	bl	800863c <FATFS_LinkDriver>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <InitFS+0x56>
    return FR_NOT_READY;
 8001512:	2303      	movs	r3, #3
 8001514:	e046      	b.n	80015a4 <InitFS+0xe4>
  }


  fres = f_mount(fs, SDPath, 0);
 8001516:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800151a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800151e:	2200      	movs	r2, #0
 8001520:	4924      	ldr	r1, [pc, #144]	; (80015b4 <InitFS+0xf4>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	f006 fc1c 	bl	8007d60 <f_mount>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  if (fres != FR_OK){
 800152e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <InitFS+0x7c>
	  return fres;
 8001536:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800153a:	e033      	b.n	80015a4 <InitFS+0xe4>
  }
  fres = f_open(&f, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	220a      	movs	r2, #10
 8001542:	491e      	ldr	r1, [pc, #120]	; (80015bc <InitFS+0xfc>)
 8001544:	4618      	mov	r0, r3
 8001546:	f006 fc51 	bl	8007dec <f_open>
 800154a:	4603      	mov	r3, r0
 800154c:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  if (fres != FR_OK){
 8001550:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <InitFS+0x9e>
	  return fres;
 8001558:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800155c:	e022      	b.n	80015a4 <InitFS+0xe4>
  }
  fres = f_write(&f, buf, 5, &writeBytes);
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	f107 010c 	add.w	r1, r7, #12
 8001566:	f107 0014 	add.w	r0, r7, #20
 800156a:	2205      	movs	r2, #5
 800156c:	f006 fdfc 	bl	8008168 <f_write>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  if (fres != FR_OK){
 8001576:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <InitFS+0xc4>
	  return fres;
 800157e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001582:	e00f      	b.n	80015a4 <InitFS+0xe4>
  }
  fres = f_close(&f);		// close also syncs the file
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4618      	mov	r0, r3
 800158a:	f006 ffe0 	bl	800854e <f_close>
 800158e:	4603      	mov	r3, r0
 8001590:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  if (fres != FR_OK){
 8001594:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <InitFS+0xe2>
	  return fres;
 800159c:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80015a0:	e000      	b.n	80015a4 <InitFS+0xe4>
  }
  return FR_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	f507 7712 	add.w	r7, r7, #584	; 0x248
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	0800b550 	.word	0x0800b550
 80015b4:	2000039c 	.word	0x2000039c
 80015b8:	0800b5bc 	.word	0x0800b5bc
 80015bc:	0800b544 	.word	0x0800b544

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <Error_Handler+0x8>
	...

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_MspInit+0x4c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_MspInit+0x4c>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_MspInit+0x4c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_MspInit+0x4c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_MspInit+0x4c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_I2C_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12b      	bne.n	8001696 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165a:	23c0      	movs	r3, #192	; 0xc0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165e:	2312      	movs	r3, #18
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166a:	2304      	movs	r3, #4
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <HAL_I2C_MspInit+0x8c>)
 8001676:	f000 ff93 	bl	80025a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_I2C_MspInit+0x88>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400

080016ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a70      	ldr	r2, [pc, #448]	; (800188c <HAL_SD_MspInit+0x1e0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 80da 	bne.w	8001884 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4b6e      	ldr	r3, [pc, #440]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	4a6d      	ldr	r2, [pc, #436]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 80016da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	4b6b      	ldr	r3, [pc, #428]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b67      	ldr	r3, [pc, #412]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a66      	ldr	r2, [pc, #408]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b64      	ldr	r3, [pc, #400]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	4b60      	ldr	r3, [pc, #384]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a5f      	ldr	r2, [pc, #380]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_SD_MspInit+0x1e4>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	2301      	movs	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001736:	230c      	movs	r3, #12
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4854      	ldr	r0, [pc, #336]	; (8001894 <HAL_SD_MspInit+0x1e8>)
 8001742:	f000 ff2d 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001758:	230c      	movs	r3, #12
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	484c      	ldr	r0, [pc, #304]	; (8001894 <HAL_SD_MspInit+0x1e8>)
 8001764:	f000 ff1c 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001768:	2304      	movs	r3, #4
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001778:	230c      	movs	r3, #12
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4845      	ldr	r0, [pc, #276]	; (8001898 <HAL_SD_MspInit+0x1ec>)
 8001784:	f000 ff0c 	bl	80025a0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001788:	4b44      	ldr	r3, [pc, #272]	; (800189c <HAL_SD_MspInit+0x1f0>)
 800178a:	4a45      	ldr	r2, [pc, #276]	; (80018a0 <HAL_SD_MspInit+0x1f4>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800178e:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_SD_MspInit+0x1f0>)
 8001790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001794:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_SD_MspInit+0x1f0>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179c:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_SD_MspInit+0x1f0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b2:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017bc:	2220      	movs	r2, #32
 80017be:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017ce:	2203      	movs	r2, #3
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80017e2:	482e      	ldr	r0, [pc, #184]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017e4:	f000 fb3e 	bl	8001e64 <HAL_DMA_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80017ee:	f7ff fee7 	bl	80015c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a29      	ldr	r2, [pc, #164]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40
 80017f8:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_SD_MspInit+0x1f0>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <HAL_SD_MspInit+0x1fc>)
 8001802:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800180a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001814:	2200      	movs	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 800181a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001826:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 800182a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001832:	2220      	movs	r2, #32
 8001834:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 800183e:	2204      	movs	r2, #4
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001844:	2203      	movs	r2, #3
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 800184a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001852:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001858:	4812      	ldr	r0, [pc, #72]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 800185a:	f000 fb03 	bl	8001e64 <HAL_DMA_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001864:	f7ff feac 	bl	80015c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 800186c:	63da      	str	r2, [r3, #60]	; 0x3c
 800186e:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_SD_MspInit+0x1f8>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2031      	movs	r0, #49	; 0x31
 800187a:	f000 fabc 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800187e:	2031      	movs	r0, #49	; 0x31
 8001880:	f000 fad5 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40012c00 	.word	0x40012c00
 8001890:	40023800 	.word	0x40023800
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	200002d0 	.word	0x200002d0
 80018a0:	40026458 	.word	0x40026458
 80018a4:	20000330 	.word	0x20000330
 80018a8:	400264a0 	.word	0x400264a0

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f8:	f000 f95e 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <SDIO_IRQHandler+0x10>)
 8001906:	f002 feaf 	bl	8004668 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000024c 	.word	0x2000024c

08001914 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <DMA2_Stream3_IRQHandler+0x10>)
 800191a:	f000 fbcb 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200002d0 	.word	0x200002d0

08001928 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <DMA2_Stream6_IRQHandler+0x10>)
 800192e:	f000 fbc1 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000330 	.word	0x20000330

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001956:	f006 fec7 	bl	80086e8 <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
  return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:

void _exit (int status)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
  while (1) {}    /* Make sure we hang here */
 800197e:	e7fe      	b.n	800197e <_exit+0x12>

08001980 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e00a      	b.n	80019a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001992:	f3af 8000 	nop.w
 8001996:	4601      	mov	r1, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	b2ca      	uxtb	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbf0      	blt.n	8001992 <_read+0x12>
  }

  return len;
 80019b0:	687b      	ldr	r3, [r7, #4]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e009      	b.n	80019e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbf1      	blt.n	80019cc <_write+0x12>
  }
  return len;
 80019e8:	687b      	ldr	r3, [r7, #4]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_close>:

int _close(int file)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_isatty>:

int _isatty(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f006 fe2c 	bl	80086e8 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20020000 	.word	0x20020000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	20000390 	.word	0x20000390
 8001ac4:	200003f0 	.word	0x200003f0

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b16:	f7ff ffd7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f006 fdeb 	bl	80086f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff f9c5 	bl	8000eac <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b30:	0800ba3c 	.word	0x0800ba3c
  ldr r2, =_sbss
 8001b34:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b38:	200003ec 	.word	0x200003ec

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>

08001b3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b42:	2003      	movs	r0, #3
 8001b44:	f000 f94c 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b48:	200f      	movs	r0, #15
 8001b4a:	f000 f805 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4e:	f7ff fd3d 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f967 	bl	8001e4a <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b94:	f000 f92f 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000394 	.word	0x20000394

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000394 	.word	0x20000394

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff feb6 	bl	8001be0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff fe9d 	bl	8001be0 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fa9d 	bl	80024a8 <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	; 0x40
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa54 	bl	800243c <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	223f      	movs	r2, #63	; 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9e6 	bl	80023e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00c      	b.n	80020a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2205      	movs	r2, #5
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c0:	4b8e      	ldr	r3, [pc, #568]	; (80022fc <HAL_DMA_IRQHandler+0x248>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a8e      	ldr	r2, [pc, #568]	; (8002300 <HAL_DMA_IRQHandler+0x24c>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0a9b      	lsrs	r3, r3, #10
 80020cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2208      	movs	r2, #8
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2208      	movs	r2, #8
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2204      	movs	r2, #4
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2204      	movs	r2, #4
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d043      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03c      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2210      	movs	r2, #16
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e01f      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e016      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2220      	movs	r2, #32
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 808f 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8087 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2220      	movs	r2, #32
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b05      	cmp	r3, #5
 800225c:	d136      	bne.n	80022cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_IRQHandler+0x1da>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	223f      	movs	r2, #63	; 0x3f
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07e      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
        }
        return;
 80022ca:	e079      	b.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e02c      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000
 8002300:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e01e      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0210 	bic.w	r2, r2, #16
 8002332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	2b00      	cmp	r3, #0
 800235a:	d032      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d022      	beq.n	80023ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2205      	movs	r2, #5
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3301      	adds	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	d307      	bcc.n	800239c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f2      	bne.n	8002380 <HAL_DMA_IRQHandler+0x2cc>
 800239a:	e000      	b.n	800239e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800239c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
 80023be:	e000      	b.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023c0:	bf00      	nop
    }
  }
}
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d108      	bne.n	8002420 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800241e:	e007      	b.n	8002430 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3b10      	subs	r3, #16
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <DMA_CalcBaseAndBitshift+0x64>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d909      	bls.n	800247e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	1d1a      	adds	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	659a      	str	r2, [r3, #88]	; 0x58
 800247c:	e007      	b.n	800248e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	aaaaaaab 	.word	0xaaaaaaab
 80024a4:	0800b5b4 	.word	0x0800b5b4

080024a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d11f      	bne.n	8002502 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d856      	bhi.n	8002576 <DMA_CheckFifoParam+0xce>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <DMA_CheckFifoParam+0x28>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024f3 	.word	0x080024f3
 80024d8:	080024e1 	.word	0x080024e1
 80024dc:	08002577 	.word	0x08002577
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d046      	beq.n	800257a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f0:	e043      	b.n	800257a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024fa:	d140      	bne.n	800257e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e03d      	b.n	800257e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250a:	d121      	bne.n	8002550 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d837      	bhi.n	8002582 <DMA_CheckFifoParam+0xda>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <DMA_CheckFifoParam+0x70>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002529 	.word	0x08002529
 800251c:	0800252f 	.word	0x0800252f
 8002520:	08002529 	.word	0x08002529
 8002524:	08002541 	.word	0x08002541
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e030      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d025      	beq.n	8002586 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253e:	e022      	b.n	8002586 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002548:	d11f      	bne.n	800258a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800254e:	e01c      	b.n	800258a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d903      	bls.n	800255e <DMA_CheckFifoParam+0xb6>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d003      	beq.n	8002564 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800255c:	e018      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      break;
 8002562:	e015      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00e      	beq.n	800258e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e00b      	b.n	800258e <DMA_CheckFifoParam+0xe6>
      break;
 8002576:	bf00      	nop
 8002578:	e00a      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800257a:	bf00      	nop
 800257c:	e008      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800257e:	bf00      	nop
 8002580:	e006      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 8002582:	bf00      	nop
 8002584:	e004      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 8002586:	bf00      	nop
 8002588:	e002      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;   
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
    }
  } 
  
  return status; 
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e16b      	b.n	8002894 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	f040 815a 	bne.w	800288e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d005      	beq.n	80025f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d130      	bne.n	8002654 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002628:	2201      	movs	r2, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 0201 	and.w	r2, r3, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b03      	cmp	r3, #3
 800265e:	d017      	beq.n	8002690 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d123      	bne.n	80026e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	08da      	lsrs	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3208      	adds	r2, #8
 80026a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	220f      	movs	r2, #15
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3208      	adds	r2, #8
 80026de:	69b9      	ldr	r1, [r7, #24]
 80026e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0203 	and.w	r2, r3, #3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80b4 	beq.w	800288e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b60      	ldr	r3, [pc, #384]	; (80028ac <HAL_GPIO_Init+0x30c>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a5f      	ldr	r2, [pc, #380]	; (80028ac <HAL_GPIO_Init+0x30c>)
 8002730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <HAL_GPIO_Init+0x30c>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_GPIO_Init+0x310>)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	220f      	movs	r2, #15
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_GPIO_Init+0x314>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d02b      	beq.n	80027c6 <HAL_GPIO_Init+0x226>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a51      	ldr	r2, [pc, #324]	; (80028b8 <HAL_GPIO_Init+0x318>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d025      	beq.n	80027c2 <HAL_GPIO_Init+0x222>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a50      	ldr	r2, [pc, #320]	; (80028bc <HAL_GPIO_Init+0x31c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <HAL_GPIO_Init+0x21e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4f      	ldr	r2, [pc, #316]	; (80028c0 <HAL_GPIO_Init+0x320>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_Init+0x21a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4e      	ldr	r2, [pc, #312]	; (80028c4 <HAL_GPIO_Init+0x324>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x216>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4d      	ldr	r2, [pc, #308]	; (80028c8 <HAL_GPIO_Init+0x328>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x212>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4c      	ldr	r2, [pc, #304]	; (80028cc <HAL_GPIO_Init+0x32c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x20e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4b      	ldr	r2, [pc, #300]	; (80028d0 <HAL_GPIO_Init+0x330>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x20a>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00e      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027aa:	2308      	movs	r3, #8
 80027ac:	e00c      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027ae:	2306      	movs	r3, #6
 80027b0:	e00a      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027b2:	2305      	movs	r3, #5
 80027b4:	e008      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027b6:	2304      	movs	r3, #4
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e004      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027be:	2302      	movs	r3, #2
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x228>
 80027c6:	2300      	movs	r3, #0
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	f002 0203 	and.w	r2, r2, #3
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4093      	lsls	r3, r2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d8:	4935      	ldr	r1, [pc, #212]	; (80028b0 <HAL_GPIO_Init+0x310>)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e6:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_GPIO_Init+0x334>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280a:	4a32      	ldr	r2, [pc, #200]	; (80028d4 <HAL_GPIO_Init+0x334>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002810:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_GPIO_Init+0x334>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002834:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <HAL_GPIO_Init+0x334>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <HAL_GPIO_Init+0x334>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <HAL_GPIO_Init+0x334>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_GPIO_Init+0x334>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002888:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_GPIO_Init+0x334>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3301      	adds	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	f67f ae90 	bls.w	80025bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40013800 	.word	0x40013800
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40020400 	.word	0x40020400
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020c00 	.word	0x40020c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40021400 	.word	0x40021400
 80028cc:	40021800 	.word	0x40021800
 80028d0:	40021c00 	.word	0x40021c00
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	887b      	ldrh	r3, [r7, #2]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e001      	b.n	80028fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800294c:	887a      	ldrh	r2, [r7, #2]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4013      	ands	r3, r2
 8002952:	041a      	lsls	r2, r3, #16
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	43d9      	mvns	r1, r3
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	400b      	ands	r3, r1
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	619a      	str	r2, [r3, #24]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e12b      	b.n	8002bda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fe40 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029d4:	f001 fbbc 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 80029d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a81      	ldr	r2, [pc, #516]	; (8002be4 <HAL_I2C_Init+0x274>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d807      	bhi.n	80029f4 <HAL_I2C_Init+0x84>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a80      	ldr	r2, [pc, #512]	; (8002be8 <HAL_I2C_Init+0x278>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	bf94      	ite	ls
 80029ec:	2301      	movls	r3, #1
 80029ee:	2300      	movhi	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e006      	b.n	8002a02 <HAL_I2C_Init+0x92>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a7d      	ldr	r2, [pc, #500]	; (8002bec <HAL_I2C_Init+0x27c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bf94      	ite	ls
 80029fc:	2301      	movls	r3, #1
 80029fe:	2300      	movhi	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0e7      	b.n	8002bda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a78      	ldr	r2, [pc, #480]	; (8002bf0 <HAL_I2C_Init+0x280>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0c9b      	lsrs	r3, r3, #18
 8002a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a6a      	ldr	r2, [pc, #424]	; (8002be4 <HAL_I2C_Init+0x274>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d802      	bhi.n	8002a44 <HAL_I2C_Init+0xd4>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3301      	adds	r3, #1
 8002a42:	e009      	b.n	8002a58 <HAL_I2C_Init+0xe8>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	4a69      	ldr	r2, [pc, #420]	; (8002bf4 <HAL_I2C_Init+0x284>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	3301      	adds	r3, #1
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	495c      	ldr	r1, [pc, #368]	; (8002be4 <HAL_I2C_Init+0x274>)
 8002a74:	428b      	cmp	r3, r1
 8002a76:	d819      	bhi.n	8002aac <HAL_I2C_Init+0x13c>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e59      	subs	r1, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a86:	1c59      	adds	r1, r3, #1
 8002a88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_I2C_Init+0x138>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1e59      	subs	r1, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa6:	e051      	b.n	8002b4c <HAL_I2C_Init+0x1dc>
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	e04f      	b.n	8002b4c <HAL_I2C_Init+0x1dc>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d111      	bne.n	8002ad8 <HAL_I2C_Init+0x168>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1e58      	subs	r0, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	440b      	add	r3, r1
 8002ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e012      	b.n	8002afe <HAL_I2C_Init+0x18e>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1e58      	subs	r0, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	0099      	lsls	r1, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Init+0x196>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e022      	b.n	8002b4c <HAL_I2C_Init+0x1dc>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10e      	bne.n	8002b2c <HAL_I2C_Init+0x1bc>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1e58      	subs	r0, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6859      	ldr	r1, [r3, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	440b      	add	r3, r1
 8002b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2a:	e00f      	b.n	8002b4c <HAL_I2C_Init+0x1dc>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	0099      	lsls	r1, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	6809      	ldr	r1, [r1, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69da      	ldr	r2, [r3, #28]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6911      	ldr	r1, [r2, #16]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68d2      	ldr	r2, [r2, #12]
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	000186a0 	.word	0x000186a0
 8002be8:	001e847f 	.word	0x001e847f
 8002bec:	003d08ff 	.word	0x003d08ff
 8002bf0:	431bde83 	.word	0x431bde83
 8002bf4:	10624dd3 	.word	0x10624dd3

08002bf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	817b      	strh	r3, [r7, #10]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	813b      	strh	r3, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c12:	f7fe ffe5 	bl	8001be0 <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	f040 80d9 	bne.w	8002dd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2319      	movs	r3, #25
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	496d      	ldr	r1, [pc, #436]	; (8002de4 <HAL_I2C_Mem_Write+0x1ec>)
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fc7f 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0cc      	b.n	8002dda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_I2C_Mem_Write+0x56>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0c5      	b.n	8002dda <HAL_I2C_Mem_Write+0x1e2>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d007      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2221      	movs	r2, #33	; 0x21
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2240      	movs	r2, #64	; 0x40
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a4d      	ldr	r2, [pc, #308]	; (8002de8 <HAL_I2C_Mem_Write+0x1f0>)
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb6:	88f8      	ldrh	r0, [r7, #6]
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fab6 	bl	8003238 <I2C_RequestMemoryWrite>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d052      	beq.n	8002d78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e081      	b.n	8002dda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fd00 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d107      	bne.n	8002cfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06b      	b.n	8002dda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d11b      	bne.n	8002d78 <HAL_I2C_Mem_Write+0x180>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d017      	beq.n	8002d78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1aa      	bne.n	8002cd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fcec 	bl	8003762 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d107      	bne.n	8002da8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e016      	b.n	8002dda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	00100002 	.word	0x00100002
 8002de8:	ffff0000 	.word	0xffff0000

08002dec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	4608      	mov	r0, r1
 8002df6:	4611      	mov	r1, r2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	817b      	strh	r3, [r7, #10]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	813b      	strh	r3, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e06:	f7fe feeb 	bl	8001be0 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	f040 8208 	bne.w	800322a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2319      	movs	r3, #25
 8002e20:	2201      	movs	r2, #1
 8002e22:	497b      	ldr	r1, [pc, #492]	; (8003010 <HAL_I2C_Mem_Read+0x224>)
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fb85 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
 8002e32:	e1fb      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2C_Mem_Read+0x56>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e1f4      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d007      	beq.n	8002e68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2222      	movs	r2, #34	; 0x22
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2240      	movs	r2, #64	; 0x40
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a5b      	ldr	r2, [pc, #364]	; (8003014 <HAL_I2C_Mem_Read+0x228>)
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eaa:	88f8      	ldrh	r0, [r7, #6]
 8002eac:	893a      	ldrh	r2, [r7, #8]
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4603      	mov	r3, r0
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa52 	bl	8003364 <I2C_RequestMemoryRead>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1b0      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d113      	bne.n	8002efa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	623b      	str	r3, [r7, #32]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e184      	b.n	8003204 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d11b      	bne.n	8002f3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e164      	b.n	8003204 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d11b      	bne.n	8002f7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	e144      	b.n	8003204 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f90:	e138      	b.n	8003204 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	f200 80f1 	bhi.w	800317e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d123      	bne.n	8002fec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fc1b 	bl	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e139      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fea:	e10b      	b.n	8003204 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d14e      	bne.n	8003092 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	4906      	ldr	r1, [pc, #24]	; (8003018 <HAL_I2C_Mem_Read+0x22c>)
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fa98 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e10e      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
 800300e:	bf00      	nop
 8003010:	00100002 	.word	0x00100002
 8003014:	ffff0000 	.word	0xffff0000
 8003018:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003090:	e0b8      	b.n	8003204 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2200      	movs	r2, #0
 800309a:	4966      	ldr	r1, [pc, #408]	; (8003234 <HAL_I2C_Mem_Read+0x448>)
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fa49 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0bf      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	2200      	movs	r2, #0
 80030f6:	494f      	ldr	r1, [pc, #316]	; (8003234 <HAL_I2C_Mem_Read+0x448>)
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fa1b 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e091      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800317c:	e042      	b.n	8003204 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fb2e 	bl	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e04c      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d118      	bne.n	8003204 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f aec2 	bne.w	8002f92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	00010004 	.word	0x00010004

08003238 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4603      	mov	r3, r0
 8003248:	817b      	strh	r3, [r7, #10]
 800324a:	460b      	mov	r3, r1
 800324c:	813b      	strh	r3, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003260:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	2200      	movs	r2, #0
 800326a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f960 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003288:	d103      	bne.n	8003292 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e05f      	b.n	8003356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003296:	897b      	ldrh	r3, [r7, #10]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	6a3a      	ldr	r2, [r7, #32]
 80032aa:	492d      	ldr	r1, [pc, #180]	; (8003360 <I2C_RequestMemoryWrite+0x128>)
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f998 	bl	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04c      	b.n	8003356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	6a39      	ldr	r1, [r7, #32]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fa02 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d107      	bne.n	80032fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e02b      	b.n	8003356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003304:	893b      	ldrh	r3, [r7, #8]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	611a      	str	r2, [r3, #16]
 800330e:	e021      	b.n	8003354 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003310:	893b      	ldrh	r3, [r7, #8]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	b29b      	uxth	r3, r3
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	6a39      	ldr	r1, [r7, #32]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f9dc 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b04      	cmp	r3, #4
 8003334:	d107      	bne.n	8003346 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003344:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e005      	b.n	8003356 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800334a:	893b      	ldrh	r3, [r7, #8]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	00010002 	.word	0x00010002

08003364 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	460b      	mov	r3, r1
 8003378:	813b      	strh	r3, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800339c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f8c2 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c4:	d103      	bne.n	80033ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0aa      	b.n	8003528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	6a3a      	ldr	r2, [r7, #32]
 80033e6:	4952      	ldr	r1, [pc, #328]	; (8003530 <I2C_RequestMemoryRead+0x1cc>)
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f8fa 	bl	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e097      	b.n	8003528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	6a39      	ldr	r1, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f964 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d107      	bne.n	8003436 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003434:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e076      	b.n	8003528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003440:	893b      	ldrh	r3, [r7, #8]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	e021      	b.n	8003490 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800344c:	893b      	ldrh	r3, [r7, #8]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	b29b      	uxth	r3, r3
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f93e 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b04      	cmp	r3, #4
 8003470:	d107      	bne.n	8003482 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003480:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e050      	b.n	8003528 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003486:	893b      	ldrh	r3, [r7, #8]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003492:	6a39      	ldr	r1, [r7, #32]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f923 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00d      	beq.n	80034bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d107      	bne.n	80034b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e035      	b.n	8003528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f82b 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f2:	d103      	bne.n	80034fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e013      	b.n	8003528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003500:	897b      	ldrh	r3, [r7, #10]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	6a3a      	ldr	r2, [r7, #32]
 8003514:	4906      	ldr	r1, [pc, #24]	; (8003530 <I2C_RequestMemoryRead+0x1cc>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f863 	bl	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	00010002 	.word	0x00010002

08003534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003544:	e025      	b.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354c:	d021      	beq.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fe fb47 	bl	8001be0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e023      	b.n	80035da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10d      	bne.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	e00c      	b.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d0b6      	beq.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035f0:	e051      	b.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003600:	d123      	bne.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003610:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800361a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f043 0204 	orr.w	r2, r3, #4
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e046      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003650:	d021      	beq.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fe fac5 	bl	8001be0 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e020      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d10c      	bne.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	e00b      	b.n	80036d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	43da      	mvns	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4013      	ands	r3, r2
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d18d      	bne.n	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ec:	e02d      	b.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f8ce 	bl	8003890 <I2C_IsAcknowledgeFailed>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e02d      	b.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003704:	d021      	beq.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe fa6b 	bl	8001be0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f043 0220 	orr.w	r2, r3, #32
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e007      	b.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d1ca      	bne.n	80036ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800376e:	e02d      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f88d 	bl	8003890 <I2C_IsAcknowledgeFailed>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e02d      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003786:	d021      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003788:	f7fe fa2a 	bl	8001be0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	429a      	cmp	r2, r3
 8003796:	d302      	bcc.n	800379e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d1ca      	bne.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037f0:	e042      	b.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d119      	bne.n	8003834 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0210 	mvn.w	r2, #16
 8003808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e029      	b.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003834:	f7fe f9d4 	bl	8001be0 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e007      	b.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d1b5      	bne.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a6:	d11b      	bne.n	80038e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0204 	orr.w	r2, r3, #4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e267      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d075      	beq.n	80039fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390e:	4b88      	ldr	r3, [pc, #544]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00c      	beq.n	8003934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391a:	4b85      	ldr	r3, [pc, #532]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003922:	2b08      	cmp	r3, #8
 8003924:	d112      	bne.n	800394c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003926:	4b82      	ldr	r3, [pc, #520]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003932:	d10b      	bne.n	800394c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	4b7e      	ldr	r3, [pc, #504]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d05b      	beq.n	80039f8 <HAL_RCC_OscConfig+0x108>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d157      	bne.n	80039f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e242      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x74>
 8003956:	4b76      	ldr	r3, [pc, #472]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a75      	ldr	r2, [pc, #468]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e01d      	b.n	80039a0 <HAL_RCC_OscConfig+0xb0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x98>
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6f      	ldr	r2, [pc, #444]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6c      	ldr	r2, [pc, #432]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0xb0>
 8003988:	4b69      	ldr	r3, [pc, #420]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a68      	ldr	r2, [pc, #416]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800398e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b66      	ldr	r3, [pc, #408]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800399a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe f91a 	bl	8001be0 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fe f916 	bl	8001be0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e207      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0xc0>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fe f906 	bl	8001be0 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fe f902 	bl	8001be0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1f3      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0xe8>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d063      	beq.n	8003ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a06:	4b4a      	ldr	r3, [pc, #296]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d11c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1e:	4b44      	ldr	r3, [pc, #272]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_RCC_OscConfig+0x152>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e1c7      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a42:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4937      	ldr	r1, [pc, #220]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a56:	e03a      	b.n	8003ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d020      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a60:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <HAL_RCC_OscConfig+0x244>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fe f8bb 	bl	8001be0 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6e:	f7fe f8b7 	bl	8001be0 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e1a8      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a80:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4925      	ldr	r1, [pc, #148]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]
 8003aa0:	e015      	b.n	8003ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <HAL_RCC_OscConfig+0x244>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe f89a 	bl	8001be0 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab0:	f7fe f896 	bl	8001be0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e187      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d036      	beq.n	8003b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <HAL_RCC_OscConfig+0x248>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fe f87a 	bl	8001be0 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af0:	f7fe f876 	bl	8001be0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e167      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x200>
 8003b0e:	e01b      	b.n	8003b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_OscConfig+0x248>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b16:	f7fe f863 	bl	8001be0 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1c:	e00e      	b.n	8003b3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fe f85f 	bl	8001be0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d907      	bls.n	8003b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e150      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
 8003b30:	40023800 	.word	0x40023800
 8003b34:	42470000 	.word	0x42470000
 8003b38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ea      	bne.n	8003b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8097 	beq.w	8003c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5a:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	4b7d      	ldr	r3, [pc, #500]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	4a7c      	ldr	r2, [pc, #496]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	6413      	str	r3, [r2, #64]	; 0x40
 8003b76:	4b7a      	ldr	r3, [pc, #488]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b77      	ldr	r3, [pc, #476]	; (8003d64 <HAL_RCC_OscConfig+0x474>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d118      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b92:	4b74      	ldr	r3, [pc, #464]	; (8003d64 <HAL_RCC_OscConfig+0x474>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a73      	ldr	r2, [pc, #460]	; (8003d64 <HAL_RCC_OscConfig+0x474>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9e:	f7fe f81f 	bl	8001be0 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fe f81b 	bl	8001be0 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e10c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x474>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x2ea>
 8003bcc:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a63      	ldr	r2, [pc, #396]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd8:	e01c      	b.n	8003c14 <HAL_RCC_OscConfig+0x324>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x30c>
 8003be2:	4b5f      	ldr	r3, [pc, #380]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a5e      	ldr	r2, [pc, #376]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	4b5c      	ldr	r3, [pc, #368]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a5b      	ldr	r2, [pc, #364]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0x324>
 8003bfc:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a57      	ldr	r2, [pc, #348]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	4b55      	ldr	r3, [pc, #340]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a54      	ldr	r2, [pc, #336]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	f023 0304 	bic.w	r3, r3, #4
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d015      	beq.n	8003c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fd ffe0 	bl	8001be0 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fd ffdc 	bl	8001be0 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0cb      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ee      	beq.n	8003c24 <HAL_RCC_OscConfig+0x334>
 8003c46:	e014      	b.n	8003c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7fd ffca 	bl	8001be0 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd ffc6 	bl	8001be0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0b5      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c66:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1ee      	bne.n	8003c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c78:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	4a38      	ldr	r2, [pc, #224]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80a1 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d05c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d141      	bne.n	8003d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca2:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <HAL_RCC_OscConfig+0x478>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd ff9a 	bl	8001be0 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd ff96 	bl	8001be0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e087      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	019b      	lsls	r3, r3, #6
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	061b      	lsls	r3, r3, #24
 8003cf2:	491b      	ldr	r1, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x478>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fd ff6f 	bl	8001be0 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fd ff6b 	bl	8001be0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e05c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x416>
 8003d24:	e054      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_RCC_OscConfig+0x478>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd ff58 	bl	8001be0 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd ff54 	bl	8001be0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e045      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x444>
 8003d52:	e03d      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d107      	bne.n	8003d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e038      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40007000 	.word	0x40007000
 8003d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCC_OscConfig+0x4ec>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d028      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d121      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d11a      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	3b01      	subs	r3, #1
 8003db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0cc      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d90c      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0b8      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e58:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	494d      	ldr	r1, [pc, #308]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d044      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d119      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e067      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0203 	bic.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4934      	ldr	r1, [pc, #208]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed0:	f7fd fe86 	bl	8001be0 <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed8:	f7fd fe82 	bl	8001be0 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e04f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 020c 	and.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d1eb      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d20c      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e032      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4916      	ldr	r1, [pc, #88]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	490e      	ldr	r1, [pc, #56]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f66:	f000 f821 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	490a      	ldr	r1, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	5ccb      	ldrb	r3, [r1, r3]
 8003f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd fde6 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023c00 	.word	0x40023c00
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	0800b59c 	.word	0x0800b59c
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	20000004 	.word	0x20000004

08003fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb0:	b090      	sub	sp, #64	; 0x40
 8003fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb8:	2300      	movs	r3, #0
 8003fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc4:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d00d      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x40>
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	f200 80a1 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fde:	e09b      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fe4:	e09b      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe6:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fea:	e098      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fec:	4b4f      	ldr	r3, [pc, #316]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ff6:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d028      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	2200      	movs	r2, #0
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	627a      	str	r2, [r7, #36]	; 0x24
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004014:	2100      	movs	r1, #0
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_GetSysClockFreq+0x188>)
 8004018:	fb03 f201 	mul.w	r2, r3, r1
 800401c:	2300      	movs	r3, #0
 800401e:	fb00 f303 	mul.w	r3, r0, r3
 8004022:	4413      	add	r3, r2
 8004024:	4a43      	ldr	r2, [pc, #268]	; (8004134 <HAL_RCC_GetSysClockFreq+0x188>)
 8004026:	fba0 1202 	umull	r1, r2, r0, r2
 800402a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800402c:	460a      	mov	r2, r1
 800402e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004032:	4413      	add	r3, r2
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	2200      	movs	r2, #0
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	61fa      	str	r2, [r7, #28]
 800403e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004042:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004046:	f7fc fdaf 	bl	8000ba8 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4613      	mov	r3, r2
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004052:	e053      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004054:	4b35      	ldr	r3, [pc, #212]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	2200      	movs	r2, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	617a      	str	r2, [r7, #20]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004066:	f04f 0b00 	mov.w	fp, #0
 800406a:	4652      	mov	r2, sl
 800406c:	465b      	mov	r3, fp
 800406e:	f04f 0000 	mov.w	r0, #0
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	0159      	lsls	r1, r3, #5
 8004078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407c:	0150      	lsls	r0, r2, #5
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	ebb2 080a 	subs.w	r8, r2, sl
 8004086:	eb63 090b 	sbc.w	r9, r3, fp
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004096:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800409a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800409e:	ebb2 0408 	subs.w	r4, r2, r8
 80040a2:	eb63 0509 	sbc.w	r5, r3, r9
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	00eb      	lsls	r3, r5, #3
 80040b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b4:	00e2      	lsls	r2, r4, #3
 80040b6:	4614      	mov	r4, r2
 80040b8:	461d      	mov	r5, r3
 80040ba:	eb14 030a 	adds.w	r3, r4, sl
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	eb45 030b 	adc.w	r3, r5, fp
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d2:	4629      	mov	r1, r5
 80040d4:	028b      	lsls	r3, r1, #10
 80040d6:	4621      	mov	r1, r4
 80040d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040dc:	4621      	mov	r1, r4
 80040de:	028a      	lsls	r2, r1, #10
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	2200      	movs	r2, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	60fa      	str	r2, [r7, #12]
 80040ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f0:	f7fc fd5a 	bl	8000ba8 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4613      	mov	r3, r2
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800410c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004116:	e002      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetSysClockFreq+0x184>)
 800411a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800411c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004120:	4618      	mov	r0, r3
 8004122:	3740      	adds	r7, #64	; 0x40
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	00f42400 	.word	0x00f42400
 8004134:	00b71b00 	.word	0x00b71b00

08004138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCC_GetHCLKFreq+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000000 	.word	0x20000000

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004154:	f7ff fff0 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0a9b      	lsrs	r3, r3, #10
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	0800b5ac 	.word	0x0800b5ac

08004178 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e022      	b.n	80041d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fd fa85 	bl	80016ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2203      	movs	r2, #3
 80041a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f814 	bl	80041d8 <HAL_SD_InitCard>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e00a      	b.n	80041d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80041d8:	b5b0      	push	{r4, r5, r7, lr}
 80041da:	b08e      	sub	sp, #56	; 0x38
 80041dc:	af04      	add	r7, sp, #16
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80041f4:	2376      	movs	r3, #118	; 0x76
 80041f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681d      	ldr	r5, [r3, #0]
 80041fc:	466c      	mov	r4, sp
 80041fe:	f107 0314 	add.w	r3, r7, #20
 8004202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800420a:	f107 0308 	add.w	r3, r7, #8
 800420e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004210:	4628      	mov	r0, r5
 8004212:	f001 f8e1 	bl	80053d8 <SDIO_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800421c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e04f      	b.n	80042c8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004228:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <HAL_SD_InitCard+0xf8>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f001 f919 	bl	800546a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <HAL_SD_InitCard+0xf8>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800423e:	2002      	movs	r0, #2
 8004240:	f7fd fcda 	bl	8001bf8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 ff6b 	bl	8005120 <SD_PowerON>
 800424a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e02e      	b.n	80042c8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fe8a 	bl	8004f84 <SD_InitCard>
 8004270:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e01b      	b.n	80042c8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004298:	4618      	mov	r0, r3
 800429a:	f001 f978 	bl	800558e <SDMMC_CmdBlockLength>
 800429e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00f      	beq.n	80042c6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <HAL_SD_InitCard+0xfc>)
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bdb0      	pop	{r4, r5, r7, pc}
 80042d0:	422580a0 	.word	0x422580a0
 80042d4:	004005ff 	.word	0x004005ff

080042d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	; 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0c0      	b.n	8004482 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	f040 80b9 	bne.w	8004480 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	441a      	add	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	429a      	cmp	r2, r3
 8004320:	d907      	bls.n	8004332 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0a7      	b.n	8004482 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2203      	movs	r2, #3
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	4a4c      	ldr	r2, [pc, #304]	; (800448c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a4b      	ldr	r2, [pc, #300]	; (8004490 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004364:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2200      	movs	r2, #0
 800436c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3380      	adds	r3, #128	; 0x80
 800439c:	4619      	mov	r1, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	025b      	lsls	r3, r3, #9
 80043a4:	089b      	lsrs	r3, r3, #2
 80043a6:	f7fd fe0b 	bl	8001fc0 <HAL_DMA_Start_IT>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d017      	beq.n	80043e0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a33      	ldr	r2, [pc, #204]	; (8004494 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e050      	b.n	8004482 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d002      	beq.n	80043f4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	025b      	lsls	r3, r3, #9
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004400:	2390      	movs	r3, #144	; 0x90
 8004402:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004404:	2302      	movs	r3, #2
 8004406:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004408:	2300      	movs	r3, #0
 800440a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800440c:	2301      	movs	r3, #1
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f107 0210 	add.w	r2, r7, #16
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f001 f88b 	bl	8005536 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d90a      	bls.n	800443c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2282      	movs	r2, #130	; 0x82
 800442a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f8ef 	bl	8005616 <SDMMC_CmdReadMultiBlock>
 8004438:	62f8      	str	r0, [r7, #44]	; 0x2c
 800443a:	e009      	b.n	8004450 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2281      	movs	r2, #129	; 0x81
 8004440:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f8c2 	bl	80055d2 <SDMMC_CmdReadSingleBlock>
 800444e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d012      	beq.n	800447c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e002      	b.n	8004482 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3730      	adds	r7, #48	; 0x30
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	08004d93 	.word	0x08004d93
 8004490:	08004e05 	.word	0x08004e05
 8004494:	004005ff 	.word	0x004005ff
 8004498:	4225858c 	.word	0x4225858c

0800449c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0c5      	b.n	8004650 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 80be 	bne.w	800464e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80044d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	441a      	add	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d907      	bls.n	80044f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0ac      	b.n	8004650 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2203      	movs	r2, #3
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004514:	f043 0302 	orr.w	r3, r3, #2
 8004518:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	4a4e      	ldr	r2, [pc, #312]	; (8004658 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	4a4d      	ldr	r2, [pc, #308]	; (800465c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004528:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	2200      	movs	r2, #0
 8004530:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	2b01      	cmp	r3, #1
 8004538:	d002      	beq.n	8004540 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	025b      	lsls	r3, r3, #9
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d90a      	bls.n	800455c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	22a0      	movs	r2, #160	; 0xa0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004552:	4618      	mov	r0, r3
 8004554:	f001 f8a3 	bl	800569e <SDMMC_CmdWriteMultiBlock>
 8004558:	62f8      	str	r0, [r7, #44]	; 0x2c
 800455a:	e009      	b.n	8004570 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2290      	movs	r2, #144	; 0x90
 8004560:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004568:	4618      	mov	r0, r3
 800456a:	f001 f876 	bl	800565a <SDMMC_CmdWriteSingleBlock>
 800456e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d012      	beq.n	800459c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a39      	ldr	r2, [pc, #228]	; (8004660 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e059      	b.n	8004650 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800459c:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a6:	2240      	movs	r2, #64	; 0x40
 80045a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3380      	adds	r3, #128	; 0x80
 80045d2:	461a      	mov	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	025b      	lsls	r3, r3, #9
 80045d8:	089b      	lsrs	r3, r3, #2
 80045da:	f7fd fcf1 	bl	8001fc0 <HAL_DMA_Start_IT>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01c      	beq.n	800461e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80045f2:	f023 0302 	bic.w	r3, r3, #2
 80045f6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e018      	b.n	8004650 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004622:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	025b      	lsls	r3, r3, #9
 8004628:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800462a:	2390      	movs	r3, #144	; 0x90
 800462c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004632:	2300      	movs	r3, #0
 8004634:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004636:	2301      	movs	r3, #1
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f107 0210 	add.w	r2, r7, #16
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 ff76 	bl	8005536 <SDIO_ConfigData>

      return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3730      	adds	r7, #48	; 0x30
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	08004d69 	.word	0x08004d69
 800465c:	08004e05 	.word	0x08004e05
 8004660:	004005ff 	.word	0x004005ff
 8004664:	4225858c 	.word	0x4225858c

08004668 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_SD_IRQHandler+0x2e>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fdfc 	bl	800528c <SD_Read_IT>
 8004694:	e165      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 808f 	beq.w	80047c4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80046be:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80046c2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d039      	beq.n	8004752 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_SD_IRQHandler+0x8a>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d011      	beq.n	8004716 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fff4 	bl	80056e4 <SDMMC_CmdStopTransfer>
 80046fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f92f 	bl	8004974 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f240 523a 	movw	r2, #1338	; 0x53a
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d104      	bne.n	8004742 <HAL_SD_IRQHandler+0xda>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f001 fc12 	bl	8005f6c <HAL_SD_RxCpltCallback>
 8004748:	e10b      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f001 fc04 	bl	8005f58 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004750:	e107      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8102 	beq.w	8004962 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d011      	beq.n	800478c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 ffb9 	bl	80056e4 <SDMMC_CmdStopTransfer>
 8004772:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8f4 	bl	8004974 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 80e5 	bne.w	8004962 <HAL_SD_IRQHandler+0x2fa>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 80df 	bne.w	8004962 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0208 	bic.w	r2, r2, #8
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f001 fbcb 	bl	8005f58 <HAL_SD_TxCpltCallback>
}
 80047c2:	e0ce      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_SD_IRQHandler+0x17c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fda6 	bl	800532e <SD_Write_IT>
 80047e2:	e0be      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ea:	f240 233a 	movw	r3, #570	; 0x23a
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80b6 	beq.w	8004962 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	f043 0202 	orr.w	r2, r3, #2
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f043 0208 	orr.w	r2, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	f043 0220 	orr.w	r2, r3, #32
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	f043 0210 	orr.w	r2, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	f043 0208 	orr.w	r2, r3, #8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f240 723a 	movw	r2, #1850	; 0x73a
 8004880:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004890:	f023 0302 	bic.w	r3, r3, #2
 8004894:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 ff22 	bl	80056e4 <SDMMC_CmdStopTransfer>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f855 	bl	8004974 <HAL_SD_ErrorCallback>
}
 80048ca:	e04a      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d045      	beq.n	8004962 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_SD_IRQHandler+0x282>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d011      	beq.n	800490e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	4a1f      	ldr	r2, [pc, #124]	; (800496c <HAL_SD_IRQHandler+0x304>)
 80048f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fd fbba 	bl	8002070 <HAL_DMA_Abort_IT>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d02f      	beq.n	8004962 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	4618      	mov	r0, r3
 8004908:	f000 face 	bl	8004ea8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800490c:	e029      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_SD_IRQHandler+0x2ba>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d011      	beq.n	8004946 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_SD_IRQHandler+0x308>)
 8004928:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd fb9e 	bl	8002070 <HAL_DMA_Abort_IT>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d013      	beq.n	8004962 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fae9 	bl	8004f16 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004944:	e00d      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f001 faf2 	bl	8005f44 <HAL_SD_AbortCallback>
}
 8004960:	e7ff      	b.n	8004962 <HAL_SD_IRQHandler+0x2fa>
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	08004ea9 	.word	0x08004ea9
 8004970:	08004f17 	.word	0x08004f17

08004974 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004996:	0f9b      	lsrs	r3, r3, #30
 8004998:	b2da      	uxtb	r2, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a2:	0e9b      	lsrs	r3, r3, #26
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b4:	0e1b      	lsrs	r3, r3, #24
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e8:	0d1b      	lsrs	r3, r3, #20
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a06:	0bdb      	lsrs	r3, r3, #15
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a18:	0b9b      	lsrs	r3, r3, #14
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a2a:	0b5b      	lsrs	r3, r3, #13
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a3c:	0b1b      	lsrs	r3, r3, #12
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d163      	bne.n	8004b20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5c:	009a      	lsls	r2, r3, #2
 8004a5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a62:	4013      	ands	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004a68:	0f92      	lsrs	r2, r2, #30
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a74:	0edb      	lsrs	r3, r3, #27
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a86:	0e1b      	lsrs	r3, r3, #24
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a98:	0d5b      	lsrs	r3, r3, #21
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	0c9b      	lsrs	r3, r3, #18
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004abc:	0bdb      	lsrs	r3, r3, #15
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	7e1b      	ldrb	r3, [r3, #24]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	3302      	adds	r3, #2
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004aea:	fb03 f202 	mul.w	r2, r3, r2
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	7a1b      	ldrb	r3, [r3, #8]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	2201      	movs	r2, #1
 8004afe:	409a      	lsls	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b0c:	0a52      	lsrs	r2, r2, #9
 8004b0e:	fb03 f202 	mul.w	r2, r3, r2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b1c:	661a      	str	r2, [r3, #96]	; 0x60
 8004b1e:	e031      	b.n	8004b84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d11d      	bne.n	8004b64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	3301      	adds	r3, #1
 8004b44:	029a      	lsls	r2, r3, #10
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	661a      	str	r2, [r3, #96]	; 0x60
 8004b62:	e00f      	b.n	8004b84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a58      	ldr	r2, [pc, #352]	; (8004ccc <HAL_SD_GetCardCSD+0x344>)
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e09d      	b.n	8004cc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b88:	0b9b      	lsrs	r3, r3, #14
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9a:	09db      	lsrs	r3, r3, #7
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	0fdb      	lsrs	r3, r3, #31
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	0f5b      	lsrs	r3, r3, #29
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	0e9b      	lsrs	r3, r3, #26
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	0d9b      	lsrs	r3, r3, #22
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	0d5b      	lsrs	r3, r3, #21
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	0bdb      	lsrs	r3, r3, #15
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	0b9b      	lsrs	r3, r3, #14
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	0b5b      	lsrs	r3, r3, #13
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	0b1b      	lsrs	r3, r3, #12
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	0a9b      	lsrs	r3, r3, #10
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	004005ff 	.word	0x004005ff

08004cd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004d34:	f107 030c 	add.w	r3, r7, #12
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa7e 	bl	800523c <SD_SendStatus>
 8004d40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	0a5b      	lsrs	r3, r3, #9
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004d5e:	693b      	ldr	r3, [r7, #16]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	2b82      	cmp	r3, #130	; 0x82
 8004da6:	d111      	bne.n	8004dcc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fc99 	bl	80056e4 <SDMMC_CmdStopTransfer>
 8004db2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fdd4 	bl	8004974 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0208 	bic.w	r2, r2, #8
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f240 523a 	movw	r2, #1338	; 0x53a
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f001 f8b9 	bl	8005f6c <HAL_SD_RxCpltCallback>
#endif
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fd fad8 	bl	80023c8 <HAL_DMA_GetError>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d03e      	beq.n	8004e9c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d002      	beq.n	8004e3a <SD_DMAError+0x36>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d12d      	bne.n	8004e96 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <SD_DMAError+0xa0>)
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004e50:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004e5e:	6978      	ldr	r0, [r7, #20]
 8004e60:	f7ff ff62 	bl	8004d28 <HAL_SD_GetCardState>
 8004e64:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b06      	cmp	r3, #6
 8004e6a:	d002      	beq.n	8004e72 <SD_DMAError+0x6e>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	d10a      	bne.n	8004e88 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fc34 	bl	80056e4 <SDMMC_CmdStopTransfer>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	431a      	orrs	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff fd6c 	bl	8004974 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	004005ff 	.word	0x004005ff

08004ea8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff ff31 	bl	8004d28 <HAL_SD_GetCardState>
 8004ec6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d002      	beq.n	8004ee2 <SD_DMATxAbort+0x3a>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d10a      	bne.n	8004ef8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fbfc 	bl	80056e4 <SDMMC_CmdStopTransfer>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f001 f81f 	bl	8005f44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004f06:	e002      	b.n	8004f0e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff fd33 	bl	8004974 <HAL_SD_ErrorCallback>
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff fefa 	bl	8004d28 <HAL_SD_GetCardState>
 8004f34:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d002      	beq.n	8004f50 <SD_DMARxAbort+0x3a>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	d10a      	bne.n	8004f66 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fbc5 	bl	80056e4 <SDMMC_CmdStopTransfer>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 ffe8 	bl	8005f44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004f74:	e002      	b.n	8004f7c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff fcfc 	bl	8004974 <HAL_SD_ErrorCallback>
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b094      	sub	sp, #80	; 0x50
 8004f88:	af04      	add	r7, sp, #16
 8004f8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fa76 	bl	8005486 <SDIO_GetPowerState>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004fa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004fa4:	e0b8      	b.n	8005118 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d02f      	beq.n	800500e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fc5d 	bl	8005872 <SDMMC_CmdSendCID>
 8004fb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <SD_InitCard+0x40>
    {
      return errorstate;
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc2:	e0a9      	b.n	8005118 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 faa0 	bl	8005510 <SDIO_GetResponse>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2104      	movs	r1, #4
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fa97 	bl	8005510 <SDIO_GetResponse>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2108      	movs	r1, #8
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa8e 	bl	8005510 <SDIO_GetResponse>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	210c      	movs	r1, #12
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fa85 	bl	8005510 <SDIO_GetResponse>
 8005006:	4602      	mov	r2, r0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	2b03      	cmp	r3, #3
 8005014:	d00d      	beq.n	8005032 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f107 020e 	add.w	r2, r7, #14
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fc63 	bl	80058ec <SDMMC_CmdSetRelAdd>
 8005026:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <SD_InitCard+0xae>
    {
      return errorstate;
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	e072      	b.n	8005118 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	2b03      	cmp	r3, #3
 8005038:	d036      	beq.n	80050a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800503a:	89fb      	ldrh	r3, [r7, #14]
 800503c:	461a      	mov	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f000 fc2d 	bl	80058ae <SDMMC_CmdSendCSD>
 8005054:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <SD_InitCard+0xdc>
    {
      return errorstate;
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	e05b      	b.n	8005118 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fa52 	bl	8005510 <SDIO_GetResponse>
 800506c:	4602      	mov	r2, r0
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2104      	movs	r1, #4
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fa49 	bl	8005510 <SDIO_GetResponse>
 800507e:	4602      	mov	r2, r0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2108      	movs	r1, #8
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fa40 	bl	8005510 <SDIO_GetResponse>
 8005090:	4602      	mov	r2, r0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	210c      	movs	r1, #12
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fa37 	bl	8005510 <SDIO_GetResponse>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2104      	movs	r1, #4
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fa2e 	bl	8005510 <SDIO_GetResponse>
 80050b4:	4603      	mov	r3, r0
 80050b6:	0d1a      	lsrs	r2, r3, #20
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fc60 	bl	8004988 <HAL_SD_GetCardCSD>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050d2:	e021      	b.n	8005118 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	2200      	movs	r2, #0
 80050e0:	461c      	mov	r4, r3
 80050e2:	4615      	mov	r5, r2
 80050e4:	4622      	mov	r2, r4
 80050e6:	462b      	mov	r3, r5
 80050e8:	4608      	mov	r0, r1
 80050ea:	f000 fb1d 	bl	8005728 <SDMMC_CmdSelDesel>
 80050ee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80050f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <SD_InitCard+0x176>
  {
    return errorstate;
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	e00e      	b.n	8005118 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681d      	ldr	r5, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	466c      	mov	r4, sp
 8005102:	f103 0210 	add.w	r2, r3, #16
 8005106:	ca07      	ldmia	r2, {r0, r1, r2}
 8005108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800510c:	3304      	adds	r3, #4
 800510e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005110:	4628      	mov	r0, r5
 8005112:	f000 f961 	bl	80053d8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3740      	adds	r7, #64	; 0x40
 800511c:	46bd      	mov	sp, r7
 800511e:	bdb0      	pop	{r4, r5, r7, pc}

08005120 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fb18 	bl	800576e <SDMMC_CmdGoIdleState>
 800513e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	e072      	b.n	8005230 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fb2b 	bl	80057aa <SDMMC_CmdOperCond>
 8005154:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00d      	beq.n	8005178 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fb01 	bl	800576e <SDMMC_CmdGoIdleState>
 800516c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	e05b      	b.n	8005230 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005182:	2b01      	cmp	r3, #1
 8005184:	d137      	bne.n	80051f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fb2b 	bl	80057e8 <SDMMC_CmdAppCommand>
 8005192:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d02d      	beq.n	80051f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800519a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800519e:	e047      	b.n	8005230 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fb1e 	bl	80057e8 <SDMMC_CmdAppCommand>
 80051ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	e03b      	b.n	8005230 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	491e      	ldr	r1, [pc, #120]	; (8005238 <SD_PowerON+0x118>)
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fb34 	bl	800582c <SDMMC_CmdAppOperCommand>
 80051c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80051d0:	e02e      	b.n	8005230 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f999 	bl	8005510 <SDIO_GetResponse>
 80051de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	0fdb      	lsrs	r3, r3, #31
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <SD_PowerON+0xcc>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <SD_PowerON+0xce>
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]

    count++;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d802      	bhi.n	8005206 <SD_PowerON+0xe6>
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0cc      	beq.n	80051a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800520c:	4293      	cmp	r3, r2
 800520e:	d902      	bls.n	8005216 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005214:	e00c      	b.n	8005230 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
 8005226:	e002      	b.n	800522e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	c1100000 	.word	0xc1100000

0800523c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800524c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005250:	e018      	b.n	8005284 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 fb65 	bl	800592e <SDMMC_CmdSendStatus>
 8005264:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <SD_SendStatus+0x34>
  {
    return errorstate;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	e009      	b.n	8005284 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f94a 	bl	8005510 <SDIO_GetResponse>
 800527c:	4602      	mov	r2, r0
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d03f      	beq.n	8005326 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e033      	b.n	8005314 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 f8bc 	bl	800542e <SDIO_ReadFIFO>
 80052b6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3b01      	subs	r3, #1
 80052e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	0e1b      	lsrs	r3, r3, #24
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3b01      	subs	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	3301      	adds	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b07      	cmp	r3, #7
 8005318:	d9c8      	bls.n	80052ac <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b086      	sub	sp, #24
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d043      	beq.n	80053d0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e037      	b.n	80053be <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3b01      	subs	r3, #1
 800535e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	021a      	lsls	r2, r3, #8
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3b01      	subs	r3, #1
 8005376:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	041a      	lsls	r2, r3, #16
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4313      	orrs	r3, r2
 8005382:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3b01      	subs	r3, #1
 800538e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	061a      	lsls	r2, r3, #24
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4313      	orrs	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f107 0208 	add.w	r2, r7, #8
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f848 	bl	8005448 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	3301      	adds	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b07      	cmp	r3, #7
 80053c2:	d9c4      	bls.n	800534e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80053d0:	bf00      	nop
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80053d8:	b084      	sub	sp, #16
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	f107 001c 	add.w	r0, r7, #28
 80053e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80053ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80053f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80053f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80053f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80053fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80053fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005402:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005412:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	b004      	add	sp, #16
 800542c:	4770      	bx	lr

0800542e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2203      	movs	r2, #3
 8005476:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0303 	and.w	r3, r3, #3
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80054c0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80054c6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80054cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80054dc:	f023 030f 	bic.w	r3, r3, #15
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	b2db      	uxtb	r3, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3314      	adds	r3, #20
 800551e:	461a      	mov	r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	4413      	add	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
}  
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800555c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005562:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005568:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005580:	2300      	movs	r3, #0

}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b088      	sub	sp, #32
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800559c:	2310      	movs	r3, #16
 800559e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055a0:	2340      	movs	r3, #64	; 0x40
 80055a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ff74 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80055ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80055be:	2110      	movs	r1, #16
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f9d7 	bl	8005974 <SDMMC_GetCmdResp1>
 80055c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c8:	69fb      	ldr	r3, [r7, #28]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b088      	sub	sp, #32
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80055e0:	2311      	movs	r3, #17
 80055e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055f2:	f107 0308 	add.w	r3, r7, #8
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff ff52 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80055fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005602:	2111      	movs	r1, #17
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f9b5 	bl	8005974 <SDMMC_GetCmdResp1>
 800560a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800560c:	69fb      	ldr	r3, [r7, #28]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b088      	sub	sp, #32
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005624:	2312      	movs	r3, #18
 8005626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005628:	2340      	movs	r3, #64	; 0x40
 800562a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005634:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005636:	f107 0308 	add.w	r3, r7, #8
 800563a:	4619      	mov	r1, r3
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ff30 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005642:	f241 3288 	movw	r2, #5000	; 0x1388
 8005646:	2112      	movs	r1, #18
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f993 	bl	8005974 <SDMMC_GetCmdResp1>
 800564e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005650:	69fb      	ldr	r3, [r7, #28]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b088      	sub	sp, #32
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005668:	2318      	movs	r3, #24
 800566a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800566c:	2340      	movs	r3, #64	; 0x40
 800566e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005678:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff0e 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005686:	f241 3288 	movw	r2, #5000	; 0x1388
 800568a:	2118      	movs	r1, #24
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f971 	bl	8005974 <SDMMC_GetCmdResp1>
 8005692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005694:	69fb      	ldr	r3, [r7, #28]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3720      	adds	r7, #32
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b088      	sub	sp, #32
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80056ac:	2319      	movs	r3, #25
 80056ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056b0:	2340      	movs	r3, #64	; 0x40
 80056b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056be:	f107 0308 	add.w	r3, r7, #8
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff feec 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	2119      	movs	r1, #25
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f94f 	bl	8005974 <SDMMC_GetCmdResp1>
 80056d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056d8:	69fb      	ldr	r3, [r7, #28]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80056f0:	230c      	movs	r3, #12
 80056f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056f4:	2340      	movs	r3, #64	; 0x40
 80056f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005700:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005702:	f107 0308 	add.w	r3, r7, #8
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff feca 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800570e:	4a05      	ldr	r2, [pc, #20]	; (8005724 <SDMMC_CmdStopTransfer+0x40>)
 8005710:	210c      	movs	r1, #12
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f92e 	bl	8005974 <SDMMC_GetCmdResp1>
 8005718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800571a:	69fb      	ldr	r3, [r7, #28]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	05f5e100 	.word	0x05f5e100

08005728 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005738:	2307      	movs	r3, #7
 800573a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005748:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800574a:	f107 0310 	add.w	r3, r7, #16
 800574e:	4619      	mov	r1, r3
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff fea6 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005756:	f241 3288 	movw	r2, #5000	; 0x1388
 800575a:	2107      	movs	r1, #7
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f909 	bl	8005974 <SDMMC_GetCmdResp1>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005766:	4618      	mov	r0, r3
 8005768:	3728      	adds	r7, #40	; 0x28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b088      	sub	sp, #32
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800578a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800578c:	f107 0308 	add.w	r3, r7, #8
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fe85 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fb23 	bl	8005de4 <SDMMC_GetCmdError>
 800579e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057a0:	69fb      	ldr	r3, [r7, #28]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b088      	sub	sp, #32
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80057b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80057b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80057b8:	2308      	movs	r3, #8
 80057ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ca:	f107 0308 	add.w	r3, r7, #8
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fe66 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fab6 	bl	8005d48 <SDMMC_GetCmdResp7>
 80057dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057de:	69fb      	ldr	r3, [r7, #28]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80057f6:	2337      	movs	r3, #55	; 0x37
 80057f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057fa:	2340      	movs	r3, #64	; 0x40
 80057fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005808:	f107 0308 	add.w	r3, r7, #8
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fe47 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005814:	f241 3288 	movw	r2, #5000	; 0x1388
 8005818:	2137      	movs	r1, #55	; 0x37
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8aa 	bl	8005974 <SDMMC_GetCmdResp1>
 8005820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005822:	69fb      	ldr	r3, [r7, #28]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800583c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005842:	2329      	movs	r3, #41	; 0x29
 8005844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800584e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005854:	f107 0308 	add.w	r3, r7, #8
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fe21 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f9bd 	bl	8005be0 <SDMMC_GetCmdResp3>
 8005866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005868:	69fb      	ldr	r3, [r7, #28]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b088      	sub	sp, #32
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800587e:	2302      	movs	r3, #2
 8005880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005882:	23c0      	movs	r3, #192	; 0xc0
 8005884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800588a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800588e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005890:	f107 0308 	add.w	r3, r7, #8
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fe03 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f957 	bl	8005b50 <SDMMC_GetCmdResp2>
 80058a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058a4:	69fb      	ldr	r3, [r7, #28]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80058bc:	2309      	movs	r3, #9
 80058be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80058c0:	23c0      	movs	r3, #192	; 0xc0
 80058c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fde4 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f938 	bl	8005b50 <SDMMC_GetCmdResp2>
 80058e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058e2:	69fb      	ldr	r3, [r7, #28]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80058fa:	2303      	movs	r3, #3
 80058fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800590a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800590c:	f107 0308 	add.w	r3, r7, #8
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fdc5 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	2103      	movs	r1, #3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f99d 	bl	8005c5c <SDMMC_GetCmdResp6>
 8005922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005924:	69fb      	ldr	r3, [r7, #28]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b088      	sub	sp, #32
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800593c:	230d      	movs	r3, #13
 800593e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005940:	2340      	movs	r3, #64	; 0x40
 8005942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800594c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff fda4 	bl	80054a2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800595a:	f241 3288 	movw	r2, #5000	; 0x1388
 800595e:	210d      	movs	r1, #13
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f807 	bl	8005974 <SDMMC_GetCmdResp1>
 8005966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005968:	69fb      	ldr	r3, [r7, #28]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	460b      	mov	r3, r1
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005982:	4b70      	ldr	r3, [pc, #448]	; (8005b44 <SDMMC_GetCmdResp1+0x1d0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a70      	ldr	r2, [pc, #448]	; (8005b48 <SDMMC_GetCmdResp1+0x1d4>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	0a5a      	lsrs	r2, r3, #9
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	fb02 f303 	mul.w	r3, r2, r3
 8005994:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	1e5a      	subs	r2, r3, #1
 800599a:	61fa      	str	r2, [r7, #28]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059a4:	e0c9      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0ef      	beq.n	8005996 <SDMMC_GetCmdResp1+0x22>
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1ea      	bne.n	8005996 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2204      	movs	r2, #4
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059d2:	2304      	movs	r3, #4
 80059d4:	e0b1      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0a6      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	22c5      	movs	r2, #197	; 0xc5
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff fd7f 	bl	80054f6 <SDIO_GetCommandResponse>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	7afb      	ldrb	r3, [r7, #11]
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d001      	beq.n	8005a06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e099      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a06:	2100      	movs	r1, #0
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff fd81 	bl	8005510 <SDIO_GetResponse>
 8005a0e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4b4e      	ldr	r3, [pc, #312]	; (8005b4c <SDMMC_GetCmdResp1+0x1d8>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e08d      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	da02      	bge.n	8005a2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a28:	e087      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	e080      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	e079      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a54:	e071      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a64:	e069      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a74:	e061      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a84:	e059      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a94:	e051      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005aa4:	e049      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ab4:	e041      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac4:	e039      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ad4:	e031      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005ae0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ae4:	e029      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005af0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005af4:	e021      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005b00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b04:	e019      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b14:	e011      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b24:	e009      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b34:	e001      	b.n	8005b3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000000 	.word	0x20000000
 8005b48:	10624dd3 	.word	0x10624dd3
 8005b4c:	fdffe008 	.word	0xfdffe008

08005b50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b58:	4b1f      	ldr	r3, [pc, #124]	; (8005bd8 <SDMMC_GetCmdResp2+0x88>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <SDMMC_GetCmdResp2+0x8c>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	0a5b      	lsrs	r3, r3, #9
 8005b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1e5a      	subs	r2, r3, #1
 8005b72:	60fa      	str	r2, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b7c:	e026      	b.n	8005bcc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ef      	beq.n	8005b6e <SDMMC_GetCmdResp2+0x1e>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1ea      	bne.n	8005b6e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005baa:	2304      	movs	r3, #4
 8005bac:	e00e      	b.n	8005bcc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e003      	b.n	8005bcc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	22c5      	movs	r2, #197	; 0xc5
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	20000000 	.word	0x20000000
 8005bdc:	10624dd3 	.word	0x10624dd3

08005be0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005be8:	4b1a      	ldr	r3, [pc, #104]	; (8005c54 <SDMMC_GetCmdResp3+0x74>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <SDMMC_GetCmdResp3+0x78>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	0a5b      	lsrs	r3, r3, #9
 8005bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf8:	fb02 f303 	mul.w	r3, r2, r3
 8005bfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1e5a      	subs	r2, r3, #1
 8005c02:	60fa      	str	r2, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c0c:	e01b      	b.n	8005c46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0ef      	beq.n	8005bfe <SDMMC_GetCmdResp3+0x1e>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1ea      	bne.n	8005bfe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2204      	movs	r2, #4
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	e003      	b.n	8005c46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	22c5      	movs	r2, #197	; 0xc5
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000000 	.word	0x20000000
 8005c58:	10624dd3 	.word	0x10624dd3

08005c5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	460b      	mov	r3, r1
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c6a:	4b35      	ldr	r3, [pc, #212]	; (8005d40 <SDMMC_GetCmdResp6+0xe4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a35      	ldr	r2, [pc, #212]	; (8005d44 <SDMMC_GetCmdResp6+0xe8>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	0a5b      	lsrs	r3, r3, #9
 8005c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
 8005c7e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	1e5a      	subs	r2, r3, #1
 8005c84:	61fa      	str	r2, [r7, #28]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c8e:	e052      	b.n	8005d36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0ef      	beq.n	8005c80 <SDMMC_GetCmdResp6+0x24>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1ea      	bne.n	8005c80 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2204      	movs	r2, #4
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	e03a      	b.n	8005d36 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e02f      	b.n	8005d36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f7ff fc0d 	bl	80054f6 <SDIO_GetCommandResponse>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	461a      	mov	r2, r3
 8005ce0:	7afb      	ldrb	r3, [r7, #11]
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d001      	beq.n	8005cea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e025      	b.n	8005d36 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	22c5      	movs	r2, #197	; 0xc5
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff fc0c 	bl	8005510 <SDIO_GetResponse>
 8005cf8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e011      	b.n	8005d36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d20:	e009      	b.n	8005d36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d30:	e001      	b.n	8005d36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000000 	.word	0x20000000
 8005d44:	10624dd3 	.word	0x10624dd3

08005d48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d50:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <SDMMC_GetCmdResp7+0x94>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <SDMMC_GetCmdResp7+0x98>)
 8005d56:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5a:	0a5b      	lsrs	r3, r3, #9
 8005d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d60:	fb02 f303 	mul.w	r3, r2, r3
 8005d64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1e5a      	subs	r2, r3, #1
 8005d6a:	60fa      	str	r2, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d74:	e02c      	b.n	8005dd0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0ef      	beq.n	8005d66 <SDMMC_GetCmdResp7+0x1e>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1ea      	bne.n	8005d66 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005da2:	2304      	movs	r3, #4
 8005da4:	e014      	b.n	8005dd0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e009      	b.n	8005dd0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2240      	movs	r2, #64	; 0x40
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005dce:	2300      	movs	r3, #0
  
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	20000000 	.word	0x20000000
 8005de0:	10624dd3 	.word	0x10624dd3

08005de4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dec:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <SDMMC_GetCmdError+0x50>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a11      	ldr	r2, [pc, #68]	; (8005e38 <SDMMC_GetCmdError+0x54>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	0a5b      	lsrs	r3, r3, #9
 8005df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1e5a      	subs	r2, r3, #1
 8005e06:	60fa      	str	r2, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e10:	e009      	b.n	8005e26 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f1      	beq.n	8005e02 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	22c5      	movs	r2, #197	; 0xc5
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	20000000 	.word	0x20000000
 8005e38:	10624dd3 	.word	0x10624dd3

08005e3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e40:	4904      	ldr	r1, [pc, #16]	; (8005e54 <MX_FATFS_Init+0x18>)
 8005e42:	4805      	ldr	r0, [pc, #20]	; (8005e58 <MX_FATFS_Init+0x1c>)
 8005e44:	f002 fbfa 	bl	800863c <FATFS_LinkDriver>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <MX_FATFS_Init+0x20>)
 8005e4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e50:	bf00      	nop
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	2000039c 	.word	0x2000039c
 8005e58:	0800b5bc 	.word	0x0800b5bc
 8005e5c:	20000398 	.word	0x20000398

08005e60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005e7a:	f000 f888 	bl	8005f8e <BSP_SD_IsDetected>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d001      	beq.n	8005e88 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e005      	b.n	8005e94 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005e88:	4804      	ldr	r0, [pc, #16]	; (8005e9c <BSP_SD_Init+0x2c>)
 8005e8a:	f7fe f975 	bl	8004178 <HAL_SD_Init>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005e92:	79fb      	ldrb	r3, [r7, #7]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	2000024c 	.word	0x2000024c

08005ea0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	68f9      	ldr	r1, [r7, #12]
 8005eb6:	4806      	ldr	r0, [pc, #24]	; (8005ed0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005eb8:	f7fe fa0e 	bl	80042d8 <HAL_SD_ReadBlocks_DMA>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	2000024c 	.word	0x2000024c

08005ed4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	68f9      	ldr	r1, [r7, #12]
 8005eea:	4806      	ldr	r0, [pc, #24]	; (8005f04 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005eec:	f7fe fad6 	bl	800449c <HAL_SD_WriteBlocks_DMA>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2000024c 	.word	0x2000024c

08005f08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f0c:	4805      	ldr	r0, [pc, #20]	; (8005f24 <BSP_SD_GetCardState+0x1c>)
 8005f0e:	f7fe ff0b 	bl	8004d28 <HAL_SD_GetCardState>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	2000024c 	.word	0x2000024c

08005f28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	4803      	ldr	r0, [pc, #12]	; (8005f40 <BSP_SD_GetCardInfo+0x18>)
 8005f34:	f7fe fecc 	bl	8004cd0 <HAL_SD_GetCardInfo>
}
 8005f38:	bf00      	nop
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	2000024c 	.word	0x2000024c

08005f44 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005f4c:	f000 f818 	bl	8005f80 <BSP_SD_AbortCallback>
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005f60:	f000 f9a8 	bl	80062b4 <BSP_SD_WriteCpltCallback>
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005f74:	f000 f9aa 	bl	80062cc <BSP_SD_ReadCpltCallback>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0

}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005f94:	2301      	movs	r3, #1
 8005f96:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005f98:	f000 f80c 	bl	8005fb4 <BSP_PlatformIsDetected>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	b2db      	uxtb	r3, r3
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fc2:	4806      	ldr	r0, [pc, #24]	; (8005fdc <BSP_PlatformIsDetected+0x28>)
 8005fc4:	f7fc fc88 	bl	80028d8 <HAL_GPIO_ReadPin>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40020400 	.word	0x40020400

08005fe0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005fe8:	f7fb fdfa 	bl	8001be0 <HAL_GetTick>
 8005fec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005fee:	e006      	b.n	8005ffe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ff0:	f7ff ff8a 	bl	8005f08 <BSP_SD_GetCardState>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e009      	b.n	8006012 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005ffe:	f7fb fdef 	bl	8001be0 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	429a      	cmp	r2, r3
 800600c:	d8f0      	bhi.n	8005ff0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800600e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <SD_CheckStatus+0x38>)
 8006028:	2201      	movs	r2, #1
 800602a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800602c:	f7ff ff6c 	bl	8005f08 <BSP_SD_GetCardState>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d107      	bne.n	8006046 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <SD_CheckStatus+0x38>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f023 0301 	bic.w	r3, r3, #1
 8006040:	b2da      	uxtb	r2, r3
 8006042:	4b04      	ldr	r3, [pc, #16]	; (8006054 <SD_CheckStatus+0x38>)
 8006044:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <SD_CheckStatus+0x38>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	b2db      	uxtb	r3, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000009 	.word	0x20000009

08006058 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006062:	f7ff ff05 	bl	8005e70 <BSP_SD_Init>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff ffd4 	bl	800601c <SD_CheckStatus>
 8006074:	4603      	mov	r3, r0
 8006076:	461a      	mov	r2, r3
 8006078:	4b04      	ldr	r3, [pc, #16]	; (800608c <SD_initialize+0x34>)
 800607a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800607c:	4b03      	ldr	r3, [pc, #12]	; (800608c <SD_initialize+0x34>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b2db      	uxtb	r3, r3
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000009 	.word	0x20000009

08006090 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff ffbd 	bl	800601c <SD_CheckStatus>
 80060a2:	4603      	mov	r3, r0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80060c0:	f247 5030 	movw	r0, #30000	; 0x7530
 80060c4:	f7ff ff8c 	bl	8005fe0 <SD_CheckStatusWithTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da01      	bge.n	80060d2 <SD_read+0x26>
  {
    return res;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	e03b      	b.n	800614a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	68b8      	ldr	r0, [r7, #8]
 80060d8:	f7ff fee2 	bl	8005ea0 <BSP_SD_ReadBlocks_DMA>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d132      	bne.n	8006148 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <SD_read+0xa8>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80060e8:	f7fb fd7a 	bl	8001be0 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80060ee:	bf00      	nop
 80060f0:	4b18      	ldr	r3, [pc, #96]	; (8006154 <SD_read+0xa8>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d108      	bne.n	800610a <SD_read+0x5e>
 80060f8:	f7fb fd72 	bl	8001be0 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f247 522f 	movw	r2, #29999	; 0x752f
 8006106:	4293      	cmp	r3, r2
 8006108:	d9f2      	bls.n	80060f0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <SD_read+0xa8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d102      	bne.n	8006118 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
 8006116:	e017      	b.n	8006148 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006118:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <SD_read+0xa8>)
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800611e:	f7fb fd5f 	bl	8001be0 <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006124:	e007      	b.n	8006136 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006126:	f7ff feef 	bl	8005f08 <BSP_SD_GetCardState>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <SD_read+0x8a>
          {
            res = RES_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006134:	e008      	b.n	8006148 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006136:	f7fb fd53 	bl	8001be0 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f247 522f 	movw	r2, #29999	; 0x752f
 8006144:	4293      	cmp	r3, r2
 8006146:	d9ee      	bls.n	8006126 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200003a4 	.word	0x200003a4

08006158 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800616c:	4b24      	ldr	r3, [pc, #144]	; (8006200 <SD_write+0xa8>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006172:	f247 5030 	movw	r0, #30000	; 0x7530
 8006176:	f7ff ff33 	bl	8005fe0 <SD_CheckStatusWithTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	da01      	bge.n	8006184 <SD_write+0x2c>
  {
    return res;
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	e038      	b.n	80061f6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	68b8      	ldr	r0, [r7, #8]
 800618a:	f7ff fea3 	bl	8005ed4 <BSP_SD_WriteBlocks_DMA>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d12f      	bne.n	80061f4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006194:	f7fb fd24 	bl	8001be0 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800619a:	bf00      	nop
 800619c:	4b18      	ldr	r3, [pc, #96]	; (8006200 <SD_write+0xa8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d108      	bne.n	80061b6 <SD_write+0x5e>
 80061a4:	f7fb fd1c 	bl	8001be0 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f247 522f 	movw	r2, #29999	; 0x752f
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d9f2      	bls.n	800619c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <SD_write+0xa8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	75fb      	strb	r3, [r7, #23]
 80061c2:	e017      	b.n	80061f4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <SD_write+0xa8>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80061ca:	f7fb fd09 	bl	8001be0 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80061d0:	e007      	b.n	80061e2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061d2:	f7ff fe99 	bl	8005f08 <BSP_SD_GetCardState>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <SD_write+0x8a>
          {
            res = RES_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	75fb      	strb	r3, [r7, #23]
            break;
 80061e0:	e008      	b.n	80061f4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80061e2:	f7fb fcfd 	bl	8001be0 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d9ee      	bls.n	80061d2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200003a0 	.word	0x200003a0

08006204 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	603a      	str	r2, [r7, #0]
 800620e:	71fb      	strb	r3, [r7, #7]
 8006210:	460b      	mov	r3, r1
 8006212:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800621a:	4b25      	ldr	r3, [pc, #148]	; (80062b0 <SD_ioctl+0xac>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <SD_ioctl+0x28>
 8006228:	2303      	movs	r3, #3
 800622a:	e03c      	b.n	80062a6 <SD_ioctl+0xa2>

  switch (cmd)
 800622c:	79bb      	ldrb	r3, [r7, #6]
 800622e:	2b03      	cmp	r3, #3
 8006230:	d834      	bhi.n	800629c <SD_ioctl+0x98>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <SD_ioctl+0x34>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	08006249 	.word	0x08006249
 800623c:	08006251 	.word	0x08006251
 8006240:	08006269 	.word	0x08006269
 8006244:	08006283 	.word	0x08006283
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800624e:	e028      	b.n	80062a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006250:	f107 030c 	add.w	r3, r7, #12
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fe67 	bl	8005f28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800625a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006266:	e01c      	b.n	80062a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006268:	f107 030c 	add.w	r3, r7, #12
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fe5b 	bl	8005f28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	b29a      	uxth	r2, r3
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006280:	e00f      	b.n	80062a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006282:	f107 030c 	add.w	r3, r7, #12
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fe4e 	bl	8005f28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	0a5a      	lsrs	r2, r3, #9
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800629a:	e002      	b.n	80062a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800629c:	2304      	movs	r3, #4
 800629e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80062a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3730      	adds	r7, #48	; 0x30
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000009 	.word	0x20000009

080062b4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <BSP_SD_WriteCpltCallback+0x14>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	200003a0 	.word	0x200003a0

080062cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <BSP_SD_ReadCpltCallback+0x14>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
}
 80062d6:	bf00      	nop
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	200003a4 	.word	0x200003a4

080062e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	4a08      	ldr	r2, [pc, #32]	; (8006314 <disk_status+0x30>)
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	79fa      	ldrb	r2, [r7, #7]
 80062fc:	4905      	ldr	r1, [pc, #20]	; (8006314 <disk_status+0x30>)
 80062fe:	440a      	add	r2, r1
 8006300:	7a12      	ldrb	r2, [r2, #8]
 8006302:	4610      	mov	r0, r2
 8006304:	4798      	blx	r3
 8006306:	4603      	mov	r3, r0
 8006308:	73fb      	strb	r3, [r7, #15]
  return stat;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	200003d0 	.word	0x200003d0

08006318 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	4a0d      	ldr	r2, [pc, #52]	; (8006360 <disk_initialize+0x48>)
 800632a:	5cd3      	ldrb	r3, [r2, r3]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d111      	bne.n	8006354 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	4a0b      	ldr	r2, [pc, #44]	; (8006360 <disk_initialize+0x48>)
 8006334:	2101      	movs	r1, #1
 8006336:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	4a09      	ldr	r2, [pc, #36]	; (8006360 <disk_initialize+0x48>)
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	79fa      	ldrb	r2, [r7, #7]
 8006346:	4906      	ldr	r1, [pc, #24]	; (8006360 <disk_initialize+0x48>)
 8006348:	440a      	add	r2, r1
 800634a:	7a12      	ldrb	r2, [r2, #8]
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	200003d0 	.word	0x200003d0

08006364 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006364:	b590      	push	{r4, r7, lr}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	4603      	mov	r3, r0
 8006372:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <disk_read+0x3c>)
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	689c      	ldr	r4, [r3, #8]
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	4a07      	ldr	r2, [pc, #28]	; (80063a0 <disk_read+0x3c>)
 8006384:	4413      	add	r3, r2
 8006386:	7a18      	ldrb	r0, [r3, #8]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	47a0      	blx	r4
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]
  return res;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
}
 8006396:	4618      	mov	r0, r3
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	bd90      	pop	{r4, r7, pc}
 800639e:	bf00      	nop
 80063a0:	200003d0 	.word	0x200003d0

080063a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <disk_write+0x3c>)
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68dc      	ldr	r4, [r3, #12]
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	4a07      	ldr	r2, [pc, #28]	; (80063e0 <disk_write+0x3c>)
 80063c4:	4413      	add	r3, r2
 80063c6:	7a18      	ldrb	r0, [r3, #8]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	47a0      	blx	r4
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd90      	pop	{r4, r7, pc}
 80063de:	bf00      	nop
 80063e0:	200003d0 	.word	0x200003d0

080063e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	603a      	str	r2, [r7, #0]
 80063ee:	71fb      	strb	r3, [r7, #7]
 80063f0:	460b      	mov	r3, r1
 80063f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <disk_ioctl+0x38>)
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	79fa      	ldrb	r2, [r7, #7]
 8006402:	4906      	ldr	r1, [pc, #24]	; (800641c <disk_ioctl+0x38>)
 8006404:	440a      	add	r2, r1
 8006406:	7a10      	ldrb	r0, [r2, #8]
 8006408:	79b9      	ldrb	r1, [r7, #6]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	4798      	blx	r3
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]
  return res;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	200003d0 	.word	0x200003d0

08006420 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3301      	adds	r3, #1
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006430:	89fb      	ldrh	r3, [r7, #14]
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	b21a      	sxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	b21b      	sxth	r3, r3
 800643c:	4313      	orrs	r3, r2
 800643e:	b21b      	sxth	r3, r3
 8006440:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006442:	89fb      	ldrh	r3, [r7, #14]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3303      	adds	r3, #3
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	3202      	adds	r2, #2
 8006468:	7812      	ldrb	r2, [r2, #0]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	3201      	adds	r2, #1
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	7812      	ldrb	r2, [r2, #0]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
	return rv;
 8006488:	68fb      	ldr	r3, [r7, #12]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	887a      	ldrh	r2, [r7, #2]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	887b      	ldrh	r3, [r7, #2]
 80064b0:	0a1b      	lsrs	r3, r3, #8
 80064b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	887a      	ldrh	r2, [r7, #2]
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	607a      	str	r2, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	1c53      	adds	r3, r2, #1
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	6179      	str	r1, [r7, #20]
 800654a:	7812      	ldrb	r2, [r2, #0]
 800654c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3b01      	subs	r3, #1
 8006552:	607b      	str	r3, [r7, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f1      	bne.n	800653e <mem_cpy+0x1a>
	}
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006566:	b480      	push	{r7}
 8006568:	b087      	sub	sp, #28
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	617a      	str	r2, [r7, #20]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3b01      	subs	r3, #1
 8006586:	607b      	str	r3, [r7, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f3      	bne.n	8006576 <mem_set+0x10>
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800659c:	b480      	push	{r7}
 800659e:	b089      	sub	sp, #36	; 0x24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	61fa      	str	r2, [r7, #28]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	4619      	mov	r1, r3
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	61ba      	str	r2, [r7, #24]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	1acb      	subs	r3, r1, r3
 80065c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	607b      	str	r3, [r7, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <mem_cmp+0x40>
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0eb      	beq.n	80065b4 <mem_cmp+0x18>

	return r;
 80065dc:	697b      	ldr	r3, [r7, #20]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3724      	adds	r7, #36	; 0x24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065f4:	e002      	b.n	80065fc <chk_chr+0x12>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3301      	adds	r3, #1
 80065fa:	607b      	str	r3, [r7, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <chk_chr+0x26>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	4293      	cmp	r3, r2
 800660e:	d1f2      	bne.n	80065f6 <chk_chr+0xc>
	return *str;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	781b      	ldrb	r3, [r3, #0]
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e029      	b.n	8006688 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006634:	4a27      	ldr	r2, [pc, #156]	; (80066d4 <chk_lock+0xb4>)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	4413      	add	r3, r2
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01d      	beq.n	800667e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006642:	4a24      	ldr	r2, [pc, #144]	; (80066d4 <chk_lock+0xb4>)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	4413      	add	r3, r2
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d116      	bne.n	8006682 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006654:	4a1f      	ldr	r2, [pc, #124]	; (80066d4 <chk_lock+0xb4>)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	4413      	add	r3, r2
 800665c:	3304      	adds	r3, #4
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006664:	429a      	cmp	r2, r3
 8006666:	d10c      	bne.n	8006682 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006668:	4a1a      	ldr	r2, [pc, #104]	; (80066d4 <chk_lock+0xb4>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	4413      	add	r3, r2
 8006670:	3308      	adds	r3, #8
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006678:	429a      	cmp	r2, r3
 800667a:	d102      	bne.n	8006682 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800667c:	e007      	b.n	800668e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800667e:	2301      	movs	r3, #1
 8006680:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d9d2      	bls.n	8006634 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d109      	bne.n	80066a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <chk_lock+0x80>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d101      	bne.n	80066a4 <chk_lock+0x84>
 80066a0:	2300      	movs	r3, #0
 80066a2:	e010      	b.n	80066c6 <chk_lock+0xa6>
 80066a4:	2312      	movs	r3, #18
 80066a6:	e00e      	b.n	80066c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d108      	bne.n	80066c0 <chk_lock+0xa0>
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <chk_lock+0xb4>)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	4413      	add	r3, r2
 80066b6:	330c      	adds	r3, #12
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066be:	d101      	bne.n	80066c4 <chk_lock+0xa4>
 80066c0:	2310      	movs	r3, #16
 80066c2:	e000      	b.n	80066c6 <chk_lock+0xa6>
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	200003b0 	.word	0x200003b0

080066d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066de:	2300      	movs	r3, #0
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	e002      	b.n	80066ea <enq_lock+0x12>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3301      	adds	r3, #1
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d806      	bhi.n	80066fe <enq_lock+0x26>
 80066f0:	4a09      	ldr	r2, [pc, #36]	; (8006718 <enq_lock+0x40>)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	4413      	add	r3, r2
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1f2      	bne.n	80066e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b02      	cmp	r3, #2
 8006702:	bf14      	ite	ne
 8006704:	2301      	movne	r3, #1
 8006706:	2300      	moveq	r3, #0
 8006708:	b2db      	uxtb	r3, r3
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	200003b0 	.word	0x200003b0

0800671c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	e01f      	b.n	800676c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800672c:	4a41      	ldr	r2, [pc, #260]	; (8006834 <inc_lock+0x118>)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	4413      	add	r3, r2
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d113      	bne.n	8006766 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800673e:	4a3d      	ldr	r2, [pc, #244]	; (8006834 <inc_lock+0x118>)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	4413      	add	r3, r2
 8006746:	3304      	adds	r3, #4
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800674e:	429a      	cmp	r2, r3
 8006750:	d109      	bne.n	8006766 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006752:	4a38      	ldr	r2, [pc, #224]	; (8006834 <inc_lock+0x118>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	4413      	add	r3, r2
 800675a:	3308      	adds	r3, #8
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006762:	429a      	cmp	r2, r3
 8006764:	d006      	beq.n	8006774 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3301      	adds	r3, #1
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d9dc      	bls.n	800672c <inc_lock+0x10>
 8006772:	e000      	b.n	8006776 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006774:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d132      	bne.n	80067e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e002      	b.n	8006788 <inc_lock+0x6c>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3301      	adds	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d806      	bhi.n	800679c <inc_lock+0x80>
 800678e:	4a29      	ldr	r2, [pc, #164]	; (8006834 <inc_lock+0x118>)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	4413      	add	r3, r2
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f2      	bne.n	8006782 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d101      	bne.n	80067a6 <inc_lock+0x8a>
 80067a2:	2300      	movs	r3, #0
 80067a4:	e040      	b.n	8006828 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4922      	ldr	r1, [pc, #136]	; (8006834 <inc_lock+0x118>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	440b      	add	r3, r1
 80067b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	491e      	ldr	r1, [pc, #120]	; (8006834 <inc_lock+0x118>)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	440b      	add	r3, r1
 80067c0:	3304      	adds	r3, #4
 80067c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	695a      	ldr	r2, [r3, #20]
 80067c8:	491a      	ldr	r1, [pc, #104]	; (8006834 <inc_lock+0x118>)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	440b      	add	r3, r1
 80067d0:	3308      	adds	r3, #8
 80067d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80067d4:	4a17      	ldr	r2, [pc, #92]	; (8006834 <inc_lock+0x118>)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	4413      	add	r3, r2
 80067dc:	330c      	adds	r3, #12
 80067de:	2200      	movs	r2, #0
 80067e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <inc_lock+0xe0>
 80067e8:	4a12      	ldr	r2, [pc, #72]	; (8006834 <inc_lock+0x118>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	4413      	add	r3, r2
 80067f0:	330c      	adds	r3, #12
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <inc_lock+0xe0>
 80067f8:	2300      	movs	r3, #0
 80067fa:	e015      	b.n	8006828 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d108      	bne.n	8006814 <inc_lock+0xf8>
 8006802:	4a0c      	ldr	r2, [pc, #48]	; (8006834 <inc_lock+0x118>)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	4413      	add	r3, r2
 800680a:	330c      	adds	r3, #12
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	3301      	adds	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	e001      	b.n	8006818 <inc_lock+0xfc>
 8006814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006818:	4906      	ldr	r1, [pc, #24]	; (8006834 <inc_lock+0x118>)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	440b      	add	r3, r1
 8006820:	330c      	adds	r3, #12
 8006822:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	200003b0 	.word	0x200003b0

08006838 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3b01      	subs	r3, #1
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d825      	bhi.n	8006898 <dec_lock+0x60>
		n = Files[i].ctr;
 800684c:	4a17      	ldr	r2, [pc, #92]	; (80068ac <dec_lock+0x74>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	4413      	add	r3, r2
 8006854:	330c      	adds	r3, #12
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800685a:	89fb      	ldrh	r3, [r7, #14]
 800685c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006860:	d101      	bne.n	8006866 <dec_lock+0x2e>
 8006862:	2300      	movs	r3, #0
 8006864:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <dec_lock+0x3a>
 800686c:	89fb      	ldrh	r3, [r7, #14]
 800686e:	3b01      	subs	r3, #1
 8006870:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006872:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <dec_lock+0x74>)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	4413      	add	r3, r2
 800687a:	330c      	adds	r3, #12
 800687c:	89fa      	ldrh	r2, [r7, #14]
 800687e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d105      	bne.n	8006892 <dec_lock+0x5a>
 8006886:	4a09      	ldr	r2, [pc, #36]	; (80068ac <dec_lock+0x74>)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	4413      	add	r3, r2
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	737b      	strb	r3, [r7, #13]
 8006896:	e001      	b.n	800689c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006898:	2302      	movs	r3, #2
 800689a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800689c:	7b7b      	ldrb	r3, [r7, #13]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	200003b0 	.word	0x200003b0

080068b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e010      	b.n	80068e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80068be:	4a0d      	ldr	r2, [pc, #52]	; (80068f4 <clear_lock+0x44>)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	4413      	add	r3, r2
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d105      	bne.n	80068da <clear_lock+0x2a>
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <clear_lock+0x44>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	4413      	add	r3, r2
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3301      	adds	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d9eb      	bls.n	80068be <clear_lock+0xe>
	}
}
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	200003b0 	.word	0x200003b0

080068f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	78db      	ldrb	r3, [r3, #3]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d034      	beq.n	8006976 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7858      	ldrb	r0, [r3, #1]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800691c:	2301      	movs	r3, #1
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	f7ff fd40 	bl	80063a4 <disk_write>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <sync_window+0x38>
			res = FR_DISK_ERR;
 800692a:	2301      	movs	r3, #1
 800692c:	73fb      	strb	r3, [r7, #15]
 800692e:	e022      	b.n	8006976 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	429a      	cmp	r2, r3
 8006944:	d217      	bcs.n	8006976 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	789b      	ldrb	r3, [r3, #2]
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	e010      	b.n	8006970 <sync_window+0x78>
					wsect += fs->fsize;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4413      	add	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7858      	ldrb	r0, [r3, #1]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006962:	2301      	movs	r3, #1
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	f7ff fd1d 	bl	80063a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	3b01      	subs	r3, #1
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d8eb      	bhi.n	800694e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d01b      	beq.n	80069d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff ffad 	bl	80068f8 <sync_window>
 800699e:	4603      	mov	r3, r0
 80069a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d113      	bne.n	80069d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	7858      	ldrb	r0, [r3, #1]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069b2:	2301      	movs	r3, #1
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	f7ff fcd5 	bl	8006364 <disk_read>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ff87 	bl	80068f8 <sync_window>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d158      	bne.n	8006aa6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d148      	bne.n	8006a8e <sync_fs+0xb2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	791b      	ldrb	r3, [r3, #4]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d144      	bne.n	8006a8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3330      	adds	r3, #48	; 0x30
 8006a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fda9 	bl	8006566 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3330      	adds	r3, #48	; 0x30
 8006a18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a1c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff fd38 	bl	8006496 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3330      	adds	r3, #48	; 0x30
 8006a2a:	4921      	ldr	r1, [pc, #132]	; (8006ab0 <sync_fs+0xd4>)
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff fd4d 	bl	80064cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3330      	adds	r3, #48	; 0x30
 8006a36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a3a:	491e      	ldr	r1, [pc, #120]	; (8006ab4 <sync_fs+0xd8>)
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff fd45 	bl	80064cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3330      	adds	r3, #48	; 0x30
 8006a46:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7ff fd3b 	bl	80064cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3330      	adds	r3, #48	; 0x30
 8006a5a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f7ff fd31 	bl	80064cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	7858      	ldrb	r0, [r3, #1]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a82:	2301      	movs	r3, #1
 8006a84:	f7ff fc8e 	bl	80063a4 <disk_write>
			fs->fsi_flag = 0;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2200      	movs	r2, #0
 8006a94:	2100      	movs	r1, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fca4 	bl	80063e4 <disk_ioctl>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <sync_fs+0xca>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	41615252 	.word	0x41615252
 8006ab4:	61417272 	.word	0x61417272

08006ab8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	3b02      	subs	r3, #2
 8006ac6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	3b02      	subs	r3, #2
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d301      	bcc.n	8006ad8 <clust2sect+0x20>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e008      	b.n	8006aea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	895b      	ldrh	r3, [r3, #10]
 8006adc:	461a      	mov	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	fb03 f202 	mul.w	r2, r3, r2
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	4413      	add	r3, r2
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d904      	bls.n	8006b16 <get_fat+0x20>
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d302      	bcc.n	8006b1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006b16:	2301      	movs	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	e08f      	b.n	8006c3c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d062      	beq.n	8006bf0 <get_fat+0xfa>
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	dc7c      	bgt.n	8006c28 <get_fat+0x132>
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d002      	beq.n	8006b38 <get_fat+0x42>
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d042      	beq.n	8006bbc <get_fat+0xc6>
 8006b36:	e077      	b.n	8006c28 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6a1a      	ldr	r2, [r3, #32]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	0a5b      	lsrs	r3, r3, #9
 8006b4e:	4413      	add	r3, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	6938      	ldr	r0, [r7, #16]
 8006b54:	f7ff ff14 	bl	8006980 <move_window>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d167      	bne.n	8006c2e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	60fa      	str	r2, [r7, #12]
 8006b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6a1a      	ldr	r2, [r3, #32]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	0a5b      	lsrs	r3, r3, #9
 8006b7a:	4413      	add	r3, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6938      	ldr	r0, [r7, #16]
 8006b80:	f7ff fefe 	bl	8006980 <move_window>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d153      	bne.n	8006c32 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4413      	add	r3, r2
 8006b94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <get_fat+0xbc>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	091b      	lsrs	r3, r3, #4
 8006bb0:	e002      	b.n	8006bb8 <get_fat+0xc2>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb8:	617b      	str	r3, [r7, #20]
			break;
 8006bba:	e03f      	b.n	8006c3c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	6a1a      	ldr	r2, [r3, #32]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	4413      	add	r3, r2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6938      	ldr	r0, [r7, #16]
 8006bca:	f7ff fed9 	bl	8006980 <move_window>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d130      	bne.n	8006c36 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006be2:	4413      	add	r3, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fc1b 	bl	8006420 <ld_word>
 8006bea:	4603      	mov	r3, r0
 8006bec:	617b      	str	r3, [r7, #20]
			break;
 8006bee:	e025      	b.n	8006c3c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	6a1a      	ldr	r2, [r3, #32]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	09db      	lsrs	r3, r3, #7
 8006bf8:	4413      	add	r3, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6938      	ldr	r0, [r7, #16]
 8006bfe:	f7ff febf 	bl	8006980 <move_window>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d118      	bne.n	8006c3a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006c16:	4413      	add	r3, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fc19 	bl	8006450 <ld_dword>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c24:	617b      	str	r3, [r7, #20]
			break;
 8006c26:	e009      	b.n	8006c3c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c28:	2301      	movs	r3, #1
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e006      	b.n	8006c3c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c2e:	bf00      	nop
 8006c30:	e004      	b.n	8006c3c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c3a:	bf00      	nop
		}
	}

	return val;
 8006c3c:	697b      	ldr	r3, [r7, #20]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c46:	b590      	push	{r4, r7, lr}
 8006c48:	b089      	sub	sp, #36	; 0x24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c52:	2302      	movs	r3, #2
 8006c54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	f240 80d2 	bls.w	8006e02 <put_fat+0x1bc>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	f080 80cc 	bcs.w	8006e02 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	f000 8096 	beq.w	8006da0 <put_fat+0x15a>
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	f300 80cd 	bgt.w	8006e14 <put_fat+0x1ce>
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d002      	beq.n	8006c84 <put_fat+0x3e>
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d06e      	beq.n	8006d60 <put_fat+0x11a>
 8006c82:	e0c7      	b.n	8006e14 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4413      	add	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	0a5b      	lsrs	r3, r3, #9
 8006c9a:	4413      	add	r3, r2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fe6e 	bl	8006980 <move_window>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ca8:	7ffb      	ldrb	r3, [r7, #31]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 80ab 	bne.w	8006e06 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	1c59      	adds	r1, r3, #1
 8006cba:	61b9      	str	r1, [r7, #24]
 8006cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc0:	4413      	add	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00d      	beq.n	8006cea <put_fat+0xa4>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	b25a      	sxtb	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	b25b      	sxtb	r3, r3
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	e001      	b.n	8006cee <put_fat+0xa8>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1a      	ldr	r2, [r3, #32]
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	0a5b      	lsrs	r3, r3, #9
 8006d00:	4413      	add	r3, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff fe3b 	bl	8006980 <move_window>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d0e:	7ffb      	ldrb	r3, [r7, #31]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d17a      	bne.n	8006e0a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d20:	4413      	add	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <put_fat+0xf0>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	091b      	lsrs	r3, r3, #4
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	e00e      	b.n	8006d54 <put_fat+0x10e>
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b25b      	sxtb	r3, r3
 8006d3c:	f023 030f 	bic.w	r3, r3, #15
 8006d40:	b25a      	sxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	b25b      	sxtb	r3, r3
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	b25b      	sxtb	r3, r3
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	b25b      	sxtb	r3, r3
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	70da      	strb	r2, [r3, #3]
			break;
 8006d5e:	e059      	b.n	8006e14 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	4413      	add	r3, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fe07 	bl	8006980 <move_window>
 8006d72:	4603      	mov	r3, r0
 8006d74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d76:	7ffb      	ldrb	r3, [r7, #31]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d148      	bne.n	8006e0e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006d8a:	4413      	add	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	b292      	uxth	r2, r2
 8006d90:	4611      	mov	r1, r2
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fb7f 	bl	8006496 <st_word>
			fs->wflag = 1;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	70da      	strb	r2, [r3, #3]
			break;
 8006d9e:	e039      	b.n	8006e14 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1a      	ldr	r2, [r3, #32]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	4413      	add	r3, r2
 8006daa:	4619      	mov	r1, r3
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fde7 	bl	8006980 <move_window>
 8006db2:	4603      	mov	r3, r0
 8006db4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006db6:	7ffb      	ldrb	r3, [r7, #31]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d12a      	bne.n	8006e12 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006dd0:	4413      	add	r3, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff fb3c 	bl	8006450 <ld_dword>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dde:	4323      	orrs	r3, r4
 8006de0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006df0:	4413      	add	r3, r2
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fb69 	bl	80064cc <st_dword>
			fs->wflag = 1;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	70da      	strb	r2, [r3, #3]
			break;
 8006e00:	e008      	b.n	8006e14 <put_fat+0x1ce>
		}
	}
 8006e02:	bf00      	nop
 8006e04:	e006      	b.n	8006e14 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006e06:	bf00      	nop
 8006e08:	e004      	b.n	8006e14 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006e0a:	bf00      	nop
 8006e0c:	e002      	b.n	8006e14 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006e0e:	bf00      	nop
 8006e10:	e000      	b.n	8006e14 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006e12:	bf00      	nop
	return res;
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3724      	adds	r7, #36	; 0x24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd90      	pop	{r4, r7, pc}

08006e1e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b088      	sub	sp, #32
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d904      	bls.n	8006e44 <remove_chain+0x26>
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d301      	bcc.n	8006e48 <remove_chain+0x2a>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e04b      	b.n	8006ee0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	69b8      	ldr	r0, [r7, #24]
 8006e56:	f7ff fef6 	bl	8006c46 <put_fat>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006e5e:	7ffb      	ldrb	r3, [r7, #31]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <remove_chain+0x4a>
 8006e64:	7ffb      	ldrb	r3, [r7, #31]
 8006e66:	e03b      	b.n	8006ee0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fe43 	bl	8006af6 <get_fat>
 8006e70:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d031      	beq.n	8006edc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <remove_chain+0x64>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e02e      	b.n	8006ee0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e88:	d101      	bne.n	8006e8e <remove_chain+0x70>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e028      	b.n	8006ee0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006e8e:	2200      	movs	r2, #0
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	69b8      	ldr	r0, [r7, #24]
 8006e94:	f7ff fed7 	bl	8006c46 <put_fat>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e9c:	7ffb      	ldrb	r3, [r7, #31]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <remove_chain+0x88>
 8006ea2:	7ffb      	ldrb	r3, [r7, #31]
 8006ea4:	e01c      	b.n	8006ee0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	3b02      	subs	r3, #2
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d20b      	bcs.n	8006ecc <remove_chain+0xae>
			fs->free_clst++;
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	791b      	ldrb	r3, [r3, #4]
 8006ec2:	f043 0301 	orr.w	r3, r3, #1
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d3c6      	bcc.n	8006e68 <remove_chain+0x4a>
 8006eda:	e000      	b.n	8006ede <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006edc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10d      	bne.n	8006f1a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <create_chain+0x2c>
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d31b      	bcc.n	8006f4c <create_chain+0x64>
 8006f14:	2301      	movs	r3, #1
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	e018      	b.n	8006f4c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff fdea 	bl	8006af6 <get_fat>
 8006f22:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d801      	bhi.n	8006f2e <create_chain+0x46>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e070      	b.n	8007010 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f34:	d101      	bne.n	8006f3a <create_chain+0x52>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	e06a      	b.n	8007010 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d201      	bcs.n	8006f48 <create_chain+0x60>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	e063      	b.n	8007010 <create_chain+0x128>
		scl = clst;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	3301      	adds	r3, #1
 8006f54:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d307      	bcc.n	8006f70 <create_chain+0x88>
				ncl = 2;
 8006f60:	2302      	movs	r3, #2
 8006f62:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d901      	bls.n	8006f70 <create_chain+0x88>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e04f      	b.n	8007010 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006f70:	69f9      	ldr	r1, [r7, #28]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fdbf 	bl	8006af6 <get_fat>
 8006f78:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00e      	beq.n	8006f9e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d003      	beq.n	8006f8e <create_chain+0xa6>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f8c:	d101      	bne.n	8006f92 <create_chain+0xaa>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	e03e      	b.n	8007010 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d1da      	bne.n	8006f50 <create_chain+0x68>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e038      	b.n	8007010 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f9e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa4:	69f9      	ldr	r1, [r7, #28]
 8006fa6:	6938      	ldr	r0, [r7, #16]
 8006fa8:	f7ff fe4d 	bl	8006c46 <put_fat>
 8006fac:	4603      	mov	r3, r0
 8006fae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <create_chain+0xe2>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6938      	ldr	r0, [r7, #16]
 8006fc2:	f7ff fe40 	bl	8006c46 <put_fat>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d116      	bne.n	8006ffe <create_chain+0x116>
		fs->last_clst = ncl;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	3b02      	subs	r3, #2
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d804      	bhi.n	8006fee <create_chain+0x106>
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	1e5a      	subs	r2, r3, #1
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	791b      	ldrb	r3, [r3, #4]
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	711a      	strb	r2, [r3, #4]
 8006ffc:	e007      	b.n	800700e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d102      	bne.n	800700a <create_chain+0x122>
 8007004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007008:	e000      	b.n	800700c <create_chain+0x124>
 800700a:	2301      	movs	r3, #1
 800700c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800700e:	69fb      	ldr	r3, [r7, #28]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	3304      	adds	r3, #4
 800702e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	0a5b      	lsrs	r3, r3, #9
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	8952      	ldrh	r2, [r2, #10]
 8007038:	fbb3 f3f2 	udiv	r3, r3, r2
 800703c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1d1a      	adds	r2, r3, #4
 8007042:	613a      	str	r2, [r7, #16]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <clmt_clust+0x3a>
 800704e:	2300      	movs	r3, #0
 8007050:	e010      	b.n	8007074 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	429a      	cmp	r2, r3
 8007058:	d307      	bcc.n	800706a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	3304      	adds	r3, #4
 8007066:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007068:	e7e9      	b.n	800703e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800706a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	4413      	add	r3, r2
}
 8007074:	4618      	mov	r0, r3
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007096:	d204      	bcs.n	80070a2 <dir_sdi+0x22>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	f003 031f 	and.w	r3, r3, #31
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80070a2:	2302      	movs	r3, #2
 80070a4:	e063      	b.n	800716e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <dir_sdi+0x46>
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d902      	bls.n	80070c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10c      	bne.n	80070e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	8912      	ldrh	r2, [r2, #8]
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d301      	bcc.n	80070dc <dir_sdi+0x5c>
 80070d8:	2302      	movs	r3, #2
 80070da:	e048      	b.n	800716e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	61da      	str	r2, [r3, #28]
 80070e4:	e029      	b.n	800713a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	895b      	ldrh	r3, [r3, #10]
 80070ea:	025b      	lsls	r3, r3, #9
 80070ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070ee:	e019      	b.n	8007124 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6979      	ldr	r1, [r7, #20]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fcfe 	bl	8006af6 <get_fat>
 80070fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007102:	d101      	bne.n	8007108 <dir_sdi+0x88>
 8007104:	2301      	movs	r3, #1
 8007106:	e032      	b.n	800716e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d904      	bls.n	8007118 <dir_sdi+0x98>
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	429a      	cmp	r2, r3
 8007116:	d301      	bcc.n	800711c <dir_sdi+0x9c>
 8007118:	2302      	movs	r3, #2
 800711a:	e028      	b.n	800716e <dir_sdi+0xee>
			ofs -= csz;
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	429a      	cmp	r2, r3
 800712a:	d2e1      	bcs.n	80070f0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800712c:	6979      	ldr	r1, [r7, #20]
 800712e:	6938      	ldr	r0, [r7, #16]
 8007130:	f7ff fcc2 	bl	8006ab8 <clust2sect>
 8007134:	4602      	mov	r2, r0
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <dir_sdi+0xcc>
 8007148:	2302      	movs	r3, #2
 800714a:	e010      	b.n	800716e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69da      	ldr	r2, [r3, #28]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	0a5b      	lsrs	r3, r3, #9
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	441a      	add	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	3320      	adds	r3, #32
 800718c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <dir_next+0x28>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800719c:	d301      	bcc.n	80071a2 <dir_next+0x2c>
 800719e:	2304      	movs	r3, #4
 80071a0:	e0aa      	b.n	80072f8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f040 8098 	bne.w	80072de <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10b      	bne.n	80071d8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	095b      	lsrs	r3, r3, #5
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	8912      	ldrh	r2, [r2, #8]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	f0c0 8088 	bcc.w	80072de <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	61da      	str	r2, [r3, #28]
 80071d4:	2304      	movs	r3, #4
 80071d6:	e08f      	b.n	80072f8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	0a5b      	lsrs	r3, r3, #9
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	8952      	ldrh	r2, [r2, #10]
 80071e0:	3a01      	subs	r2, #1
 80071e2:	4013      	ands	r3, r2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d17a      	bne.n	80072de <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7ff fc80 	bl	8006af6 <get_fat>
 80071f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d801      	bhi.n	8007202 <dir_next+0x8c>
 80071fe:	2302      	movs	r3, #2
 8007200:	e07a      	b.n	80072f8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007208:	d101      	bne.n	800720e <dir_next+0x98>
 800720a:	2301      	movs	r3, #1
 800720c:	e074      	b.n	80072f8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	429a      	cmp	r2, r3
 8007216:	d358      	bcc.n	80072ca <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	61da      	str	r2, [r3, #28]
 8007224:	2304      	movs	r3, #4
 8007226:	e067      	b.n	80072f8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7ff fe59 	bl	8006ee8 <create_chain>
 8007236:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <dir_next+0xcc>
 800723e:	2307      	movs	r3, #7
 8007240:	e05a      	b.n	80072f8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <dir_next+0xd6>
 8007248:	2302      	movs	r3, #2
 800724a:	e055      	b.n	80072f8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007252:	d101      	bne.n	8007258 <dir_next+0xe2>
 8007254:	2301      	movs	r3, #1
 8007256:	e04f      	b.n	80072f8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f7ff fb4d 	bl	80068f8 <sync_window>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <dir_next+0xf2>
 8007264:	2301      	movs	r3, #1
 8007266:	e047      	b.n	80072f8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3330      	adds	r3, #48	; 0x30
 800726c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff f977 	bl	8006566 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007278:	2300      	movs	r3, #0
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	6979      	ldr	r1, [r7, #20]
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff fc1a 	bl	8006ab8 <clust2sect>
 8007284:	4602      	mov	r2, r0
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	62da      	str	r2, [r3, #44]	; 0x2c
 800728a:	e012      	b.n	80072b2 <dir_next+0x13c>
						fs->wflag = 1;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2201      	movs	r2, #1
 8007290:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff fb30 	bl	80068f8 <sync_window>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <dir_next+0x12c>
 800729e:	2301      	movs	r3, #1
 80072a0:	e02a      	b.n	80072f8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3301      	adds	r3, #1
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	895b      	ldrh	r3, [r3, #10]
 80072b6:	461a      	mov	r2, r3
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d3e6      	bcc.n	800728c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	1ad2      	subs	r2, r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80072d0:	6979      	ldr	r1, [r7, #20]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff fbf0 	bl	8006ab8 <clust2sect>
 80072d8:	4602      	mov	r2, r0
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f0:	441a      	add	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007310:	2100      	movs	r1, #0
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff feb4 	bl	8007080 <dir_sdi>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800731c:	7dfb      	ldrb	r3, [r7, #23]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d12b      	bne.n	800737a <dir_alloc+0x7a>
		n = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	4619      	mov	r1, r3
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7ff fb27 	bl	8006980 <move_window>
 8007332:	4603      	mov	r3, r0
 8007334:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007336:	7dfb      	ldrb	r3, [r7, #23]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d11d      	bne.n	8007378 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2be5      	cmp	r3, #229	; 0xe5
 8007344:	d004      	beq.n	8007350 <dir_alloc+0x50>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d107      	bne.n	8007360 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	3301      	adds	r3, #1
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d102      	bne.n	8007364 <dir_alloc+0x64>
 800735e:	e00c      	b.n	800737a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007360:	2300      	movs	r3, #0
 8007362:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007364:	2101      	movs	r1, #1
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ff05 	bl	8007176 <dir_next>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0d7      	beq.n	8007326 <dir_alloc+0x26>
 8007376:	e000      	b.n	800737a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007378:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b04      	cmp	r3, #4
 800737e:	d101      	bne.n	8007384 <dir_alloc+0x84>
 8007380:	2307      	movs	r3, #7
 8007382:	75fb      	strb	r3, [r7, #23]
	return res;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	331a      	adds	r3, #26
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff f83f 	bl	8006420 <ld_word>
 80073a2:	4603      	mov	r3, r0
 80073a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d109      	bne.n	80073c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	3314      	adds	r3, #20
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff f834 	bl	8006420 <ld_word>
 80073b8:	4603      	mov	r3, r0
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	331a      	adds	r3, #26
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	b292      	uxth	r2, r2
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff f857 	bl	8006496 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d109      	bne.n	8007404 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f103 0214 	add.w	r2, r3, #20
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f7ff f849 	bl	8006496 <st_word>
	}
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800741a:	2100      	movs	r1, #0
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fe2f 	bl	8007080 <dir_sdi>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <dir_find+0x24>
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	e03e      	b.n	80074ae <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	4619      	mov	r1, r3
 8007436:	6938      	ldr	r0, [r7, #16]
 8007438:	f7ff faa2 	bl	8006980 <move_window>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d12f      	bne.n	80074a6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <dir_find+0x4e>
 8007454:	2304      	movs	r3, #4
 8007456:	75fb      	strb	r3, [r7, #23]
 8007458:	e028      	b.n	80074ac <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	330b      	adds	r3, #11
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007466:	b2da      	uxtb	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	330b      	adds	r3, #11
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <dir_find+0x86>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a18      	ldr	r0, [r3, #32]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3324      	adds	r3, #36	; 0x24
 8007484:	220b      	movs	r2, #11
 8007486:	4619      	mov	r1, r3
 8007488:	f7ff f888 	bl	800659c <mem_cmp>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007492:	2100      	movs	r1, #0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fe6e 	bl	8007176 <dir_next>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0c5      	beq.n	8007430 <dir_find+0x24>
 80074a4:	e002      	b.n	80074ac <dir_find+0xa0>
		if (res != FR_OK) break;
 80074a6:	bf00      	nop
 80074a8:	e000      	b.n	80074ac <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80074aa:	bf00      	nop

	return res;
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80074c4:	2101      	movs	r1, #1
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff ff1a 	bl	8007300 <dir_alloc>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d11c      	bne.n	8007510 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	4619      	mov	r1, r3
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f7ff fa4f 	bl	8006980 <move_window>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d111      	bne.n	8007510 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	2220      	movs	r2, #32
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff f836 	bl	8006566 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a18      	ldr	r0, [r3, #32]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3324      	adds	r3, #36	; 0x24
 8007502:	220b      	movs	r2, #11
 8007504:	4619      	mov	r1, r3
 8007506:	f7ff f80d 	bl	8006524 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2201      	movs	r2, #1
 800750e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3324      	adds	r3, #36	; 0x24
 8007530:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007532:	220b      	movs	r2, #11
 8007534:	2120      	movs	r1, #32
 8007536:	68b8      	ldr	r0, [r7, #8]
 8007538:	f7ff f815 	bl	8006566 <mem_set>
	si = i = 0; ni = 8;
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	61fb      	str	r3, [r7, #28]
 8007544:	2308      	movs	r3, #8
 8007546:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	61fa      	str	r2, [r7, #28]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007556:	7efb      	ldrb	r3, [r7, #27]
 8007558:	2b20      	cmp	r3, #32
 800755a:	d94e      	bls.n	80075fa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800755c:	7efb      	ldrb	r3, [r7, #27]
 800755e:	2b2f      	cmp	r3, #47	; 0x2f
 8007560:	d006      	beq.n	8007570 <create_name+0x54>
 8007562:	7efb      	ldrb	r3, [r7, #27]
 8007564:	2b5c      	cmp	r3, #92	; 0x5c
 8007566:	d110      	bne.n	800758a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007568:	e002      	b.n	8007570 <create_name+0x54>
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	3301      	adds	r3, #1
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b2f      	cmp	r3, #47	; 0x2f
 800757a:	d0f6      	beq.n	800756a <create_name+0x4e>
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b5c      	cmp	r3, #92	; 0x5c
 8007586:	d0f0      	beq.n	800756a <create_name+0x4e>
			break;
 8007588:	e038      	b.n	80075fc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800758a:	7efb      	ldrb	r3, [r7, #27]
 800758c:	2b2e      	cmp	r3, #46	; 0x2e
 800758e:	d003      	beq.n	8007598 <create_name+0x7c>
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	429a      	cmp	r2, r3
 8007596:	d30c      	bcc.n	80075b2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2b0b      	cmp	r3, #11
 800759c:	d002      	beq.n	80075a4 <create_name+0x88>
 800759e:	7efb      	ldrb	r3, [r7, #27]
 80075a0:	2b2e      	cmp	r3, #46	; 0x2e
 80075a2:	d001      	beq.n	80075a8 <create_name+0x8c>
 80075a4:	2306      	movs	r3, #6
 80075a6:	e044      	b.n	8007632 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80075a8:	2308      	movs	r3, #8
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	230b      	movs	r3, #11
 80075ae:	617b      	str	r3, [r7, #20]
			continue;
 80075b0:	e022      	b.n	80075f8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80075b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	da04      	bge.n	80075c4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80075ba:	7efb      	ldrb	r3, [r7, #27]
 80075bc:	3b80      	subs	r3, #128	; 0x80
 80075be:	4a1f      	ldr	r2, [pc, #124]	; (800763c <create_name+0x120>)
 80075c0:	5cd3      	ldrb	r3, [r2, r3]
 80075c2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80075c4:	7efb      	ldrb	r3, [r7, #27]
 80075c6:	4619      	mov	r1, r3
 80075c8:	481d      	ldr	r0, [pc, #116]	; (8007640 <create_name+0x124>)
 80075ca:	f7ff f80e 	bl	80065ea <chk_chr>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <create_name+0xbc>
 80075d4:	2306      	movs	r3, #6
 80075d6:	e02c      	b.n	8007632 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80075d8:	7efb      	ldrb	r3, [r7, #27]
 80075da:	2b60      	cmp	r3, #96	; 0x60
 80075dc:	d905      	bls.n	80075ea <create_name+0xce>
 80075de:	7efb      	ldrb	r3, [r7, #27]
 80075e0:	2b7a      	cmp	r3, #122	; 0x7a
 80075e2:	d802      	bhi.n	80075ea <create_name+0xce>
 80075e4:	7efb      	ldrb	r3, [r7, #27]
 80075e6:	3b20      	subs	r3, #32
 80075e8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	613a      	str	r2, [r7, #16]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	4413      	add	r3, r2
 80075f4:	7efa      	ldrb	r2, [r7, #27]
 80075f6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80075f8:	e7a6      	b.n	8007548 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80075fa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	441a      	add	r2, r3
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <create_name+0xf4>
 800760c:	2306      	movs	r3, #6
 800760e:	e010      	b.n	8007632 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2be5      	cmp	r3, #229	; 0xe5
 8007616:	d102      	bne.n	800761e <create_name+0x102>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2205      	movs	r2, #5
 800761c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800761e:	7efb      	ldrb	r3, [r7, #27]
 8007620:	2b20      	cmp	r3, #32
 8007622:	d801      	bhi.n	8007628 <create_name+0x10c>
 8007624:	2204      	movs	r2, #4
 8007626:	e000      	b.n	800762a <create_name+0x10e>
 8007628:	2200      	movs	r2, #0
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	330b      	adds	r3, #11
 800762e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007630:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	0800b5d0 	.word	0x0800b5d0
 8007640:	0800b558 	.word	0x0800b558

08007644 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007658:	e002      	b.n	8007660 <follow_path+0x1c>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	3301      	adds	r3, #1
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b2f      	cmp	r3, #47	; 0x2f
 8007666:	d0f8      	beq.n	800765a <follow_path+0x16>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b5c      	cmp	r3, #92	; 0x5c
 800766e:	d0f4      	beq.n	800765a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2200      	movs	r2, #0
 8007674:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b1f      	cmp	r3, #31
 800767c:	d80a      	bhi.n	8007694 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2280      	movs	r2, #128	; 0x80
 8007682:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007686:	2100      	movs	r1, #0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff fcf9 	bl	8007080 <dir_sdi>
 800768e:	4603      	mov	r3, r0
 8007690:	75fb      	strb	r3, [r7, #23]
 8007692:	e043      	b.n	800771c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007694:	463b      	mov	r3, r7
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff ff3f 	bl	800751c <create_name>
 800769e:	4603      	mov	r3, r0
 80076a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d134      	bne.n	8007712 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff feaf 	bl	800740c <dir_find>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80076b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d127      	bne.n	8007716 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80076c6:	7afb      	ldrb	r3, [r7, #11]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d122      	bne.n	8007716 <follow_path+0xd2>
 80076d0:	2305      	movs	r3, #5
 80076d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80076d4:	e01f      	b.n	8007716 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d11c      	bne.n	800771a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	799b      	ldrb	r3, [r3, #6]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80076ec:	2305      	movs	r3, #5
 80076ee:	75fb      	strb	r3, [r7, #23]
 80076f0:	e014      	b.n	800771c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007700:	4413      	add	r3, r2
 8007702:	4619      	mov	r1, r3
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f7ff fe42 	bl	800738e <ld_clust>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007710:	e7c0      	b.n	8007694 <follow_path+0x50>
			if (res != FR_OK) break;
 8007712:	bf00      	nop
 8007714:	e002      	b.n	800771c <follow_path+0xd8>
				break;
 8007716:	bf00      	nop
 8007718:	e000      	b.n	800771c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800771a:	bf00      	nop
			}
		}
	}

	return res;
 800771c:	7dfb      	ldrb	r3, [r7, #23]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800772e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007732:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d031      	beq.n	80077a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e002      	b.n	800774a <get_ldnumber+0x24>
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	3301      	adds	r3, #1
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b20      	cmp	r3, #32
 8007750:	d903      	bls.n	800775a <get_ldnumber+0x34>
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	2b3a      	cmp	r3, #58	; 0x3a
 8007758:	d1f4      	bne.n	8007744 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b3a      	cmp	r3, #58	; 0x3a
 8007760:	d11c      	bne.n	800779c <get_ldnumber+0x76>
			tp = *path;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	60fa      	str	r2, [r7, #12]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	3b30      	subs	r3, #48	; 0x30
 8007772:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b09      	cmp	r3, #9
 8007778:	d80e      	bhi.n	8007798 <get_ldnumber+0x72>
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	429a      	cmp	r2, r3
 8007780:	d10a      	bne.n	8007798 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <get_ldnumber+0x72>
					vol = (int)i;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	3301      	adds	r3, #1
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	e002      	b.n	80077a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80077a0:	693b      	ldr	r3, [r7, #16]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	70da      	strb	r2, [r3, #3]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077c6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff f8d8 	bl	8006980 <move_window>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <check_fs+0x2a>
 80077d6:	2304      	movs	r3, #4
 80077d8:	e038      	b.n	800784c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3330      	adds	r3, #48	; 0x30
 80077de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fe1c 	bl	8006420 <ld_word>
 80077e8:	4603      	mov	r3, r0
 80077ea:	461a      	mov	r2, r3
 80077ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d001      	beq.n	80077f8 <check_fs+0x48>
 80077f4:	2303      	movs	r3, #3
 80077f6:	e029      	b.n	800784c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077fe:	2be9      	cmp	r3, #233	; 0xe9
 8007800:	d009      	beq.n	8007816 <check_fs+0x66>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007808:	2beb      	cmp	r3, #235	; 0xeb
 800780a:	d11e      	bne.n	800784a <check_fs+0x9a>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007812:	2b90      	cmp	r3, #144	; 0x90
 8007814:	d119      	bne.n	800784a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3330      	adds	r3, #48	; 0x30
 800781a:	3336      	adds	r3, #54	; 0x36
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe fe17 	bl	8006450 <ld_dword>
 8007822:	4603      	mov	r3, r0
 8007824:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007828:	4a0a      	ldr	r2, [pc, #40]	; (8007854 <check_fs+0xa4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d101      	bne.n	8007832 <check_fs+0x82>
 800782e:	2300      	movs	r3, #0
 8007830:	e00c      	b.n	800784c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3330      	adds	r3, #48	; 0x30
 8007836:	3352      	adds	r3, #82	; 0x52
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fe09 	bl	8006450 <ld_dword>
 800783e:	4603      	mov	r3, r0
 8007840:	4a05      	ldr	r2, [pc, #20]	; (8007858 <check_fs+0xa8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d101      	bne.n	800784a <check_fs+0x9a>
 8007846:	2300      	movs	r3, #0
 8007848:	e000      	b.n	800784c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800784a:	2302      	movs	r3, #2
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	00544146 	.word	0x00544146
 8007858:	33544146 	.word	0x33544146

0800785c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b096      	sub	sp, #88	; 0x58
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff ff58 	bl	8007726 <get_ldnumber>
 8007876:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787a:	2b00      	cmp	r3, #0
 800787c:	da01      	bge.n	8007882 <find_volume+0x26>
 800787e:	230b      	movs	r3, #11
 8007880:	e22d      	b.n	8007cde <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007882:	4aa1      	ldr	r2, [pc, #644]	; (8007b08 <find_volume+0x2ac>)
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800788a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <find_volume+0x3a>
 8007892:	230c      	movs	r3, #12
 8007894:	e223      	b.n	8007cde <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800789a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01a      	beq.n	80078e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe fd17 	bl	80062e4 <disk_status>
 80078b6:	4603      	mov	r3, r0
 80078b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80078bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10c      	bne.n	80078e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <find_volume+0x82>
 80078ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80078da:	230a      	movs	r3, #10
 80078dc:	e1ff      	b.n	8007cde <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80078de:	2300      	movs	r3, #0
 80078e0:	e1fd      	b.n	8007cde <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80078e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe fd0f 	bl	8006318 <disk_initialize>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007900:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800790c:	2303      	movs	r3, #3
 800790e:	e1e6      	b.n	8007cde <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <find_volume+0xca>
 8007916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007922:	230a      	movs	r3, #10
 8007924:	e1db      	b.n	8007cde <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800792a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800792c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800792e:	f7ff ff3f 	bl	80077b0 <check_fs>
 8007932:	4603      	mov	r3, r0
 8007934:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800793c:	2b02      	cmp	r3, #2
 800793e:	d149      	bne.n	80079d4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007940:	2300      	movs	r3, #0
 8007942:	643b      	str	r3, [r7, #64]	; 0x40
 8007944:	e01e      	b.n	8007984 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800794c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007954:	4413      	add	r3, r2
 8007956:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	3304      	adds	r3, #4
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d006      	beq.n	8007970 <find_volume+0x114>
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	3308      	adds	r3, #8
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fd72 	bl	8006450 <ld_dword>
 800796c:	4602      	mov	r2, r0
 800796e:	e000      	b.n	8007972 <find_volume+0x116>
 8007970:	2200      	movs	r2, #0
 8007972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	3358      	adds	r3, #88	; 0x58
 8007978:	443b      	add	r3, r7
 800797a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800797e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007980:	3301      	adds	r3, #1
 8007982:	643b      	str	r3, [r7, #64]	; 0x40
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	2b03      	cmp	r3, #3
 8007988:	d9dd      	bls.n	8007946 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800798a:	2300      	movs	r3, #0
 800798c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800798e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <find_volume+0x13e>
 8007994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007996:	3b01      	subs	r3, #1
 8007998:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800799a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	3358      	adds	r3, #88	; 0x58
 80079a0:	443b      	add	r3, r7
 80079a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80079a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80079a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <find_volume+0x15e>
 80079ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079b2:	f7ff fefd 	bl	80077b0 <check_fs>
 80079b6:	4603      	mov	r3, r0
 80079b8:	e000      	b.n	80079bc <find_volume+0x160>
 80079ba:	2303      	movs	r3, #3
 80079bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80079c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d905      	bls.n	80079d4 <find_volume+0x178>
 80079c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ca:	3301      	adds	r3, #1
 80079cc:	643b      	str	r3, [r7, #64]	; 0x40
 80079ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d9e2      	bls.n	800799a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80079d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d101      	bne.n	80079e0 <find_volume+0x184>
 80079dc:	2301      	movs	r3, #1
 80079de:	e17e      	b.n	8007cde <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80079e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d901      	bls.n	80079ec <find_volume+0x190>
 80079e8:	230d      	movs	r3, #13
 80079ea:	e178      	b.n	8007cde <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	3330      	adds	r3, #48	; 0x30
 80079f0:	330b      	adds	r3, #11
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fd14 	bl	8006420 <ld_word>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079fe:	d001      	beq.n	8007a04 <find_volume+0x1a8>
 8007a00:	230d      	movs	r3, #13
 8007a02:	e16c      	b.n	8007cde <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	3330      	adds	r3, #48	; 0x30
 8007a08:	3316      	adds	r3, #22
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe fd08 	bl	8006420 <ld_word>
 8007a10:	4603      	mov	r3, r0
 8007a12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <find_volume+0x1cc>
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	3330      	adds	r3, #48	; 0x30
 8007a1e:	3324      	adds	r3, #36	; 0x24
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fd15 	bl	8006450 <ld_dword>
 8007a26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a2c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3a:	789b      	ldrb	r3, [r3, #2]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d005      	beq.n	8007a4c <find_volume+0x1f0>
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	789b      	ldrb	r3, [r3, #2]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d001      	beq.n	8007a4c <find_volume+0x1f0>
 8007a48:	230d      	movs	r3, #13
 8007a4a:	e148      	b.n	8007cde <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	789b      	ldrb	r3, [r3, #2]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a68:	895b      	ldrh	r3, [r3, #10]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <find_volume+0x224>
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	895b      	ldrh	r3, [r3, #10]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	895b      	ldrh	r3, [r3, #10]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <find_volume+0x228>
 8007a80:	230d      	movs	r3, #13
 8007a82:	e12c      	b.n	8007cde <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	3330      	adds	r3, #48	; 0x30
 8007a88:	3311      	adds	r3, #17
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fcc8 	bl	8006420 <ld_word>
 8007a90:	4603      	mov	r3, r0
 8007a92:	461a      	mov	r2, r3
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	891b      	ldrh	r3, [r3, #8]
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <find_volume+0x24e>
 8007aa6:	230d      	movs	r3, #13
 8007aa8:	e119      	b.n	8007cde <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	3330      	adds	r3, #48	; 0x30
 8007aae:	3313      	adds	r3, #19
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fcb5 	bl	8006420 <ld_word>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d106      	bne.n	8007ace <find_volume+0x272>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	3330      	adds	r3, #48	; 0x30
 8007ac4:	3320      	adds	r3, #32
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fcc2 	bl	8006450 <ld_dword>
 8007acc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	3330      	adds	r3, #48	; 0x30
 8007ad2:	330e      	adds	r3, #14
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fe fca3 	bl	8006420 <ld_word>
 8007ada:	4603      	mov	r3, r0
 8007adc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <find_volume+0x28c>
 8007ae4:	230d      	movs	r3, #13
 8007ae6:	e0fa      	b.n	8007cde <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ae8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aec:	4413      	add	r3, r2
 8007aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007af0:	8912      	ldrh	r2, [r2, #8]
 8007af2:	0912      	lsrs	r2, r2, #4
 8007af4:	b292      	uxth	r2, r2
 8007af6:	4413      	add	r3, r2
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d204      	bcs.n	8007b0c <find_volume+0x2b0>
 8007b02:	230d      	movs	r3, #13
 8007b04:	e0eb      	b.n	8007cde <find_volume+0x482>
 8007b06:	bf00      	nop
 8007b08:	200003a8 	.word	0x200003a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b14:	8952      	ldrh	r2, [r2, #10]
 8007b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <find_volume+0x2ca>
 8007b22:	230d      	movs	r3, #13
 8007b24:	e0db      	b.n	8007cde <find_volume+0x482>
		fmt = FS_FAT32;
 8007b26:	2303      	movs	r3, #3
 8007b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d802      	bhi.n	8007b3c <find_volume+0x2e0>
 8007b36:	2302      	movs	r3, #2
 8007b38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d802      	bhi.n	8007b4c <find_volume+0x2f0>
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	1c9a      	adds	r2, r3, #2
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b58:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b5e:	441a      	add	r2, r3
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007b64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	441a      	add	r2, r3
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007b6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d11e      	bne.n	8007bb4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	3330      	adds	r3, #48	; 0x30
 8007b7a:	332a      	adds	r3, #42	; 0x2a
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe fc4f 	bl	8006420 <ld_word>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <find_volume+0x330>
 8007b88:	230d      	movs	r3, #13
 8007b8a:	e0a8      	b.n	8007cde <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	891b      	ldrh	r3, [r3, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <find_volume+0x33c>
 8007b94:	230d      	movs	r3, #13
 8007b96:	e0a2      	b.n	8007cde <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	3330      	adds	r3, #48	; 0x30
 8007b9c:	332c      	adds	r3, #44	; 0x2c
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fc56 	bl	8006450 <ld_dword>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb2:	e01f      	b.n	8007bf4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	891b      	ldrh	r3, [r3, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <find_volume+0x364>
 8007bbc:	230d      	movs	r3, #13
 8007bbe:	e08e      	b.n	8007cde <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	6a1a      	ldr	r2, [r3, #32]
 8007bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc6:	441a      	add	r2, r3
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d103      	bne.n	8007bdc <find_volume+0x380>
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	e00a      	b.n	8007bf2 <find_volume+0x396>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	695a      	ldr	r2, [r3, #20]
 8007be0:	4613      	mov	r3, r2
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	4413      	add	r3, r2
 8007be6:	085a      	lsrs	r2, r3, #1
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007bf2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	699a      	ldr	r2, [r3, #24]
 8007bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bfa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007bfe:	0a5b      	lsrs	r3, r3, #9
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d201      	bcs.n	8007c08 <find_volume+0x3ac>
 8007c04:	230d      	movs	r3, #13
 8007c06:	e06a      	b.n	8007cde <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c0e:	611a      	str	r2, [r3, #16]
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	2280      	movs	r2, #128	; 0x80
 8007c1c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007c1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d149      	bne.n	8007cba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	3330      	adds	r3, #48	; 0x30
 8007c2a:	3330      	adds	r3, #48	; 0x30
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe fbf7 	bl	8006420 <ld_word>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d140      	bne.n	8007cba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c40:	f7fe fe9e 	bl	8006980 <move_window>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d137      	bne.n	8007cba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	3330      	adds	r3, #48	; 0x30
 8007c54:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fbe1 	bl	8006420 <ld_word>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	461a      	mov	r2, r3
 8007c62:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d127      	bne.n	8007cba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	3330      	adds	r3, #48	; 0x30
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fbee 	bl	8006450 <ld_dword>
 8007c74:	4603      	mov	r3, r0
 8007c76:	4a1c      	ldr	r2, [pc, #112]	; (8007ce8 <find_volume+0x48c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d11e      	bne.n	8007cba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	3330      	adds	r3, #48	; 0x30
 8007c80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fbe3 	bl	8006450 <ld_dword>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4a17      	ldr	r2, [pc, #92]	; (8007cec <find_volume+0x490>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d113      	bne.n	8007cba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	3330      	adds	r3, #48	; 0x30
 8007c96:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fbd8 	bl	8006450 <ld_dword>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	3330      	adds	r3, #48	; 0x30
 8007caa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fbce 	bl	8006450 <ld_dword>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007cc0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007cc2:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <find_volume+0x494>)
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <find_volume+0x494>)
 8007ccc:	801a      	strh	r2, [r3, #0]
 8007cce:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <find_volume+0x494>)
 8007cd0:	881a      	ldrh	r2, [r3, #0]
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007cd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cd8:	f7fe fdea 	bl	80068b0 <clear_lock>
#endif
	return FR_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3758      	adds	r7, #88	; 0x58
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	41615252 	.word	0x41615252
 8007cec:	61417272 	.word	0x61417272
 8007cf0:	200003ac 	.word	0x200003ac

08007cf4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007cfe:	2309      	movs	r3, #9
 8007d00:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01c      	beq.n	8007d42 <validate+0x4e>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d018      	beq.n	8007d42 <validate+0x4e>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d013      	beq.n	8007d42 <validate+0x4e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	889a      	ldrh	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	88db      	ldrh	r3, [r3, #6]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d10c      	bne.n	8007d42 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fad8 	bl	80062e4 <disk_status>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <validate+0x4e>
			res = FR_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <validate+0x5a>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	e000      	b.n	8007d50 <validate+0x5c>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	6013      	str	r3, [r2, #0]
	return res;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007d72:	f107 0310 	add.w	r3, r7, #16
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fcd5 	bl	8007726 <get_ldnumber>
 8007d7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	da01      	bge.n	8007d88 <f_mount+0x28>
 8007d84:	230b      	movs	r3, #11
 8007d86:	e02b      	b.n	8007de0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d88:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <f_mount+0x88>)
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d98:	69b8      	ldr	r0, [r7, #24]
 8007d9a:	f7fe fd89 	bl	80068b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	490d      	ldr	r1, [pc, #52]	; (8007de8 <f_mount+0x88>)
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <f_mount+0x66>
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d001      	beq.n	8007dca <f_mount+0x6a>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e00a      	b.n	8007de0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007dca:	f107 010c 	add.w	r1, r7, #12
 8007dce:	f107 0308 	add.w	r3, r7, #8
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fd41 	bl	800785c <find_volume>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	200003a8 	.word	0x200003a8

08007dec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b098      	sub	sp, #96	; 0x60
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <f_open+0x18>
 8007e00:	2309      	movs	r3, #9
 8007e02:	e1ad      	b.n	8008160 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007e0c:	79fa      	ldrb	r2, [r7, #7]
 8007e0e:	f107 0110 	add.w	r1, r7, #16
 8007e12:	f107 0308 	add.w	r3, r7, #8
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff fd20 	bl	800785c <find_volume>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f040 8191 	bne.w	800814e <f_open+0x362>
		dj.obj.fs = fs;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	f107 0314 	add.w	r3, r7, #20
 8007e36:	4611      	mov	r1, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff fc03 	bl	8007644 <follow_path>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007e44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d11a      	bne.n	8007e82 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007e4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e50:	b25b      	sxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da03      	bge.n	8007e5e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007e56:	2306      	movs	r3, #6
 8007e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007e5c:	e011      	b.n	8007e82 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	f023 0301 	bic.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	bf14      	ite	ne
 8007e68:	2301      	movne	r3, #1
 8007e6a:	2300      	moveq	r3, #0
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f107 0314 	add.w	r3, r7, #20
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fbd2 	bl	8006620 <chk_lock>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	f003 031c 	and.w	r3, r3, #28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d07f      	beq.n	8007f8c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d017      	beq.n	8007ec4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	d10e      	bne.n	8007eba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e9c:	f7fe fc1c 	bl	80066d8 <enq_lock>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d006      	beq.n	8007eb4 <f_open+0xc8>
 8007ea6:	f107 0314 	add.w	r3, r7, #20
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff fb03 	bl	80074b6 <dir_register>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	e000      	b.n	8007eb6 <f_open+0xca>
 8007eb4:	2312      	movs	r3, #18
 8007eb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	f043 0308 	orr.w	r3, r3, #8
 8007ec0:	71fb      	strb	r3, [r7, #7]
 8007ec2:	e010      	b.n	8007ee6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ec4:	7ebb      	ldrb	r3, [r7, #26]
 8007ec6:	f003 0311 	and.w	r3, r3, #17
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <f_open+0xea>
					res = FR_DENIED;
 8007ece:	2307      	movs	r3, #7
 8007ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007ed4:	e007      	b.n	8007ee6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <f_open+0xfa>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d168      	bne.n	8007fc0 <f_open+0x1d4>
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	f003 0308 	and.w	r3, r3, #8
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d063      	beq.n	8007fc0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007ef8:	f7fd ffb2 	bl	8005e60 <get_fattime>
 8007efc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f00:	330e      	adds	r3, #14
 8007f02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fae1 	bl	80064cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0c:	3316      	adds	r3, #22
 8007f0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe fadb 	bl	80064cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f18:	330b      	adds	r3, #11
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f22:	4611      	mov	r1, r2
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff fa32 	bl	800738e <ld_clust>
 8007f2a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f30:	2200      	movs	r2, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fa4a 	bl	80073cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3a:	331c      	adds	r3, #28
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fac4 	bl	80064cc <st_dword>
					fs->wflag = 1;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2201      	movs	r2, #1
 8007f48:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d037      	beq.n	8007fc0 <f_open+0x1d4>
						dw = fs->winsect;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007f56:	f107 0314 	add.w	r3, r7, #20
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe ff5d 	bl	8006e1e <remove_chain>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007f6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d126      	bne.n	8007fc0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fd02 	bl	8006980 <move_window>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f86:	3a01      	subs	r2, #1
 8007f88:	60da      	str	r2, [r3, #12]
 8007f8a:	e019      	b.n	8007fc0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d115      	bne.n	8007fc0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007f94:	7ebb      	ldrb	r3, [r7, #26]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007f9e:	2304      	movs	r3, #4
 8007fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007fa4:	e00c      	b.n	8007fc0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d007      	beq.n	8007fc0 <f_open+0x1d4>
 8007fb0:	7ebb      	ldrb	r3, [r7, #26]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <f_open+0x1d4>
						res = FR_DENIED;
 8007fba:	2307      	movs	r3, #7
 8007fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d128      	bne.n	800801a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf14      	ite	ne
 8007ff2:	2301      	movne	r3, #1
 8007ff4:	2300      	moveq	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f107 0314 	add.w	r3, r7, #20
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fb8b 	bl	800671c <inc_lock>
 8008006:	4602      	mov	r2, r0
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d102      	bne.n	800801a <f_open+0x22e>
 8008014:	2302      	movs	r3, #2
 8008016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800801a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800801e:	2b00      	cmp	r3, #0
 8008020:	f040 8095 	bne.w	800814e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008028:	4611      	mov	r1, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff f9af 	bl	800738e <ld_clust>
 8008030:	4602      	mov	r2, r0
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008038:	331c      	adds	r3, #28
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fa08 	bl	8006450 <ld_dword>
 8008040:	4602      	mov	r2, r0
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	88da      	ldrh	r2, [r3, #6]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	79fa      	ldrb	r2, [r7, #7]
 800805e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3330      	adds	r3, #48	; 0x30
 8008076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800807a:	2100      	movs	r1, #0
 800807c:	4618      	mov	r0, r3
 800807e:	f7fe fa72 	bl	8006566 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b00      	cmp	r3, #0
 800808a:	d060      	beq.n	800814e <f_open+0x362>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d05c      	beq.n	800814e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	895b      	ldrh	r3, [r3, #10]
 80080a0:	025b      	lsls	r3, r3, #9
 80080a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	657b      	str	r3, [r7, #84]	; 0x54
 80080b0:	e016      	b.n	80080e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fd1d 	bl	8006af6 <get_fat>
 80080bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80080be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d802      	bhi.n	80080ca <f_open+0x2de>
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80080ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d0:	d102      	bne.n	80080d8 <f_open+0x2ec>
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	657b      	str	r3, [r7, #84]	; 0x54
 80080e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <f_open+0x304>
 80080e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d8e0      	bhi.n	80080b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80080f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d127      	bne.n	800814e <f_open+0x362>
 80080fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008104:	2b00      	cmp	r3, #0
 8008106:	d022      	beq.n	800814e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fcd3 	bl	8006ab8 <clust2sect>
 8008112:	6478      	str	r0, [r7, #68]	; 0x44
 8008114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <f_open+0x336>
						res = FR_INT_ERR;
 800811a:	2302      	movs	r3, #2
 800811c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008120:	e015      	b.n	800814e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008124:	0a5a      	lsrs	r2, r3, #9
 8008126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008128:	441a      	add	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	7858      	ldrb	r0, [r3, #1]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a1a      	ldr	r2, [r3, #32]
 800813c:	2301      	movs	r3, #1
 800813e:	f7fe f911 	bl	8006364 <disk_read>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <f_open+0x362>
 8008148:	2301      	movs	r3, #1
 800814a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800814e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <f_open+0x370>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800815c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008160:	4618      	mov	r0, r3
 8008162:	3760      	adds	r7, #96	; 0x60
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08c      	sub	sp, #48	; 0x30
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f107 0210 	add.w	r2, r7, #16
 8008186:	4611      	mov	r1, r2
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff fdb3 	bl	8007cf4 <validate>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008198:	2b00      	cmp	r3, #0
 800819a:	d107      	bne.n	80081ac <f_write+0x44>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	7d5b      	ldrb	r3, [r3, #21]
 80081a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <f_write+0x4a>
 80081ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081b0:	e14b      	b.n	800844a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	7d1b      	ldrb	r3, [r3, #20]
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <f_write+0x5a>
 80081be:	2307      	movs	r3, #7
 80081c0:	e143      	b.n	800844a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	441a      	add	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	f080 812d 	bcs.w	800842e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	43db      	mvns	r3, r3
 80081da:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80081dc:	e127      	b.n	800842e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 80e3 	bne.w	80083b2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	0a5b      	lsrs	r3, r3, #9
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	8952      	ldrh	r2, [r2, #10]
 80081f6:	3a01      	subs	r2, #1
 80081f8:	4013      	ands	r3, r2
 80081fa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d143      	bne.n	800828a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10c      	bne.n	8008224 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d11a      	bne.n	800824c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2100      	movs	r1, #0
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe fe64 	bl	8006ee8 <create_chain>
 8008220:	62b8      	str	r0, [r7, #40]	; 0x28
 8008222:	e013      	b.n	800824c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d007      	beq.n	800823c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	4619      	mov	r1, r3
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7fe fef0 	bl	8007018 <clmt_clust>
 8008238:	62b8      	str	r0, [r7, #40]	; 0x28
 800823a:	e007      	b.n	800824c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7fe fe4f 	bl	8006ee8 <create_chain>
 800824a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80f2 	beq.w	8008438 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	2b01      	cmp	r3, #1
 8008258:	d104      	bne.n	8008264 <f_write+0xfc>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2202      	movs	r2, #2
 800825e:	755a      	strb	r2, [r3, #21]
 8008260:	2302      	movs	r3, #2
 8008262:	e0f2      	b.n	800844a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800826a:	d104      	bne.n	8008276 <f_write+0x10e>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2201      	movs	r2, #1
 8008270:	755a      	strb	r2, [r3, #21]
 8008272:	2301      	movs	r3, #1
 8008274:	e0e9      	b.n	800844a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800827a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <f_write+0x122>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008288:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	7d1b      	ldrb	r3, [r3, #20]
 800828e:	b25b      	sxtb	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	da18      	bge.n	80082c6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	7858      	ldrb	r0, [r3, #1]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1a      	ldr	r2, [r3, #32]
 80082a2:	2301      	movs	r3, #1
 80082a4:	f7fe f87e 	bl	80063a4 <disk_write>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d004      	beq.n	80082b8 <f_write+0x150>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	755a      	strb	r2, [r3, #21]
 80082b4:	2301      	movs	r3, #1
 80082b6:	e0c8      	b.n	800844a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	7d1b      	ldrb	r3, [r3, #20]
 80082bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7fe fbf2 	bl	8006ab8 <clust2sect>
 80082d4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <f_write+0x17e>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2202      	movs	r2, #2
 80082e0:	755a      	strb	r2, [r3, #21]
 80082e2:	2302      	movs	r3, #2
 80082e4:	e0b1      	b.n	800844a <f_write+0x2e2>
			sect += csect;
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	4413      	add	r3, r2
 80082ec:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	0a5b      	lsrs	r3, r3, #9
 80082f2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d03c      	beq.n	8008374 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	4413      	add	r3, r2
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	8952      	ldrh	r2, [r2, #10]
 8008304:	4293      	cmp	r3, r2
 8008306:	d905      	bls.n	8008314 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	895b      	ldrh	r3, [r3, #10]
 800830c:	461a      	mov	r2, r3
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	7858      	ldrb	r0, [r3, #1]
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	69f9      	ldr	r1, [r7, #28]
 800831e:	f7fe f841 	bl	80063a4 <disk_write>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <f_write+0x1ca>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	755a      	strb	r2, [r3, #21]
 800832e:	2301      	movs	r3, #1
 8008330:	e08b      	b.n	800844a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a1a      	ldr	r2, [r3, #32]
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	6a3a      	ldr	r2, [r7, #32]
 800833c:	429a      	cmp	r2, r3
 800833e:	d915      	bls.n	800836c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1a      	ldr	r2, [r3, #32]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	025b      	lsls	r3, r3, #9
 8008350:	69fa      	ldr	r2, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008358:	4619      	mov	r1, r3
 800835a:	f7fe f8e3 	bl	8006524 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	7d1b      	ldrb	r3, [r3, #20]
 8008362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008366:	b2da      	uxtb	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	025b      	lsls	r3, r3, #9
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008372:	e03f      	b.n	80083f4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	429a      	cmp	r2, r3
 800837c:	d016      	beq.n	80083ac <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008386:	429a      	cmp	r2, r3
 8008388:	d210      	bcs.n	80083ac <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	7858      	ldrb	r0, [r3, #1]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008394:	2301      	movs	r3, #1
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	f7fd ffe4 	bl	8006364 <disk_read>
 800839c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	755a      	strb	r2, [r3, #21]
 80083a8:	2301      	movs	r3, #1
 80083aa:	e04e      	b.n	800844a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80083be:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80083c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d901      	bls.n	80083cc <f_write+0x264>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083da:	4413      	add	r3, r2
 80083dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083de:	69f9      	ldr	r1, [r7, #28]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe f89f 	bl	8006524 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	7d1b      	ldrb	r3, [r3, #20]
 80083ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80083f4:	69fa      	ldr	r2, [r7, #28]
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	4413      	add	r3, r2
 80083fa:	61fb      	str	r3, [r7, #28]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	699a      	ldr	r2, [r3, #24]
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	441a      	add	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	619a      	str	r2, [r3, #24]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68da      	ldr	r2, [r3, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	429a      	cmp	r2, r3
 8008412:	bf38      	it	cc
 8008414:	461a      	movcc	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	60da      	str	r2, [r3, #12]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	441a      	add	r2, r3
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f47f aed4 	bne.w	80081de <f_write+0x76>
 8008436:	e000      	b.n	800843a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008438:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	7d1b      	ldrb	r3, [r3, #20]
 800843e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008442:	b2da      	uxtb	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3730      	adds	r7, #48	; 0x30
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f107 0208 	add.w	r2, r7, #8
 8008460:	4611      	mov	r1, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fc46 	bl	8007cf4 <validate>
 8008468:	4603      	mov	r3, r0
 800846a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d168      	bne.n	8008544 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	7d1b      	ldrb	r3, [r3, #20]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d062      	beq.n	8008544 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	7d1b      	ldrb	r3, [r3, #20]
 8008482:	b25b      	sxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	da15      	bge.n	80084b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	7858      	ldrb	r0, [r3, #1]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1a      	ldr	r2, [r3, #32]
 8008496:	2301      	movs	r3, #1
 8008498:	f7fd ff84 	bl	80063a4 <disk_write>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <f_sync+0x54>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e04f      	b.n	8008546 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	7d1b      	ldrb	r3, [r3, #20]
 80084aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80084b4:	f7fd fcd4 	bl	8005e60 <get_fattime>
 80084b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	4619      	mov	r1, r3
 80084c2:	4610      	mov	r0, r2
 80084c4:	f7fe fa5c 	bl	8006980 <move_window>
 80084c8:	4603      	mov	r3, r0
 80084ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d138      	bne.n	8008544 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	330b      	adds	r3, #11
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	330b      	adds	r3, #11
 80084e2:	f042 0220 	orr.w	r2, r2, #32
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	461a      	mov	r2, r3
 80084f4:	68f9      	ldr	r1, [r7, #12]
 80084f6:	f7fe ff69 	bl	80073cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f103 021c 	add.w	r2, r3, #28
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f7fd ffe0 	bl	80064cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3316      	adds	r3, #22
 8008510:	6939      	ldr	r1, [r7, #16]
 8008512:	4618      	mov	r0, r3
 8008514:	f7fd ffda 	bl	80064cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3312      	adds	r3, #18
 800851c:	2100      	movs	r1, #0
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd ffb9 	bl	8006496 <st_word>
					fs->wflag = 1;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2201      	movs	r2, #1
 8008528:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe fa55 	bl	80069dc <sync_fs>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7d1b      	ldrb	r3, [r3, #20]
 800853a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853e:	b2da      	uxtb	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008544:	7dfb      	ldrb	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ff7b 	bl	8008452 <f_sync>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d118      	bne.n	8008598 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f107 0208 	add.w	r2, r7, #8
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff fbc0 	bl	8007cf4 <validate>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10c      	bne.n	8008598 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe f958 	bl	8006838 <dec_lock>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d102      	bne.n	8008598 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80085b2:	2301      	movs	r3, #1
 80085b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80085ba:	4b1f      	ldr	r3, [pc, #124]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085bc:	7a5b      	ldrb	r3, [r3, #9]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d131      	bne.n	8008628 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80085c4:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085c6:	7a5b      	ldrb	r3, [r3, #9]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	461a      	mov	r2, r3
 80085cc:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085ce:	2100      	movs	r1, #0
 80085d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80085d2:	4b19      	ldr	r3, [pc, #100]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085d4:	7a5b      	ldrb	r3, [r3, #9]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	4a17      	ldr	r2, [pc, #92]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80085e2:	4b15      	ldr	r3, [pc, #84]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085e4:	7a5b      	ldrb	r3, [r3, #9]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	4b13      	ldr	r3, [pc, #76]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085ec:	4413      	add	r3, r2
 80085ee:	79fa      	ldrb	r2, [r7, #7]
 80085f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80085f2:	4b11      	ldr	r3, [pc, #68]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085f4:	7a5b      	ldrb	r3, [r3, #9]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	b2d1      	uxtb	r1, r2
 80085fc:	4a0e      	ldr	r2, [pc, #56]	; (8008638 <FATFS_LinkDriverEx+0x94>)
 80085fe:	7251      	strb	r1, [r2, #9]
 8008600:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008602:	7dbb      	ldrb	r3, [r7, #22]
 8008604:	3330      	adds	r3, #48	; 0x30
 8008606:	b2da      	uxtb	r2, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3301      	adds	r3, #1
 8008610:	223a      	movs	r2, #58	; 0x3a
 8008612:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	3302      	adds	r3, #2
 8008618:	222f      	movs	r2, #47	; 0x2f
 800861a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	3303      	adds	r3, #3
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008628:	7dfb      	ldrb	r3, [r7, #23]
}
 800862a:	4618      	mov	r0, r3
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	200003d0 	.word	0x200003d0

0800863c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008646:	2200      	movs	r2, #0
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff ffaa 	bl	80085a4 <FATFS_LinkDriverEx>
 8008650:	4603      	mov	r3, r0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8008670:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <FATFS_UnLinkDriverEx+0x6c>)
 8008672:	7a5b      	ldrb	r3, [r3, #9]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d01e      	beq.n	80086b8 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	3b30      	subs	r3, #48	; 0x30
 8008680:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	4a10      	ldr	r2, [pc, #64]	; (80086c8 <FATFS_UnLinkDriverEx+0x6c>)
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d013      	beq.n	80086b8 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	4a0d      	ldr	r2, [pc, #52]	; (80086c8 <FATFS_UnLinkDriverEx+0x6c>)
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	2200      	movs	r2, #0
 800869a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	4a0a      	ldr	r2, [pc, #40]	; (80086c8 <FATFS_UnLinkDriverEx+0x6c>)
 80086a0:	4413      	add	r3, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80086a6:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <FATFS_UnLinkDriverEx+0x6c>)
 80086a8:	7a5b      	ldrb	r3, [r3, #9]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <FATFS_UnLinkDriverEx+0x6c>)
 80086b2:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	200003d0 	.word	0x200003d0

080086cc <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80086d4:	2100      	movs	r1, #0
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff ffc0 	bl	800865c <FATFS_UnLinkDriverEx>
 80086dc:	4603      	mov	r3, r0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <__errno>:
 80086e8:	4b01      	ldr	r3, [pc, #4]	; (80086f0 <__errno+0x8>)
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	2000000c 	.word	0x2000000c

080086f4 <__libc_init_array>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	4d0d      	ldr	r5, [pc, #52]	; (800872c <__libc_init_array+0x38>)
 80086f8:	4c0d      	ldr	r4, [pc, #52]	; (8008730 <__libc_init_array+0x3c>)
 80086fa:	1b64      	subs	r4, r4, r5
 80086fc:	10a4      	asrs	r4, r4, #2
 80086fe:	2600      	movs	r6, #0
 8008700:	42a6      	cmp	r6, r4
 8008702:	d109      	bne.n	8008718 <__libc_init_array+0x24>
 8008704:	4d0b      	ldr	r5, [pc, #44]	; (8008734 <__libc_init_array+0x40>)
 8008706:	4c0c      	ldr	r4, [pc, #48]	; (8008738 <__libc_init_array+0x44>)
 8008708:	f002 ff02 	bl	800b510 <_init>
 800870c:	1b64      	subs	r4, r4, r5
 800870e:	10a4      	asrs	r4, r4, #2
 8008710:	2600      	movs	r6, #0
 8008712:	42a6      	cmp	r6, r4
 8008714:	d105      	bne.n	8008722 <__libc_init_array+0x2e>
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	f855 3b04 	ldr.w	r3, [r5], #4
 800871c:	4798      	blx	r3
 800871e:	3601      	adds	r6, #1
 8008720:	e7ee      	b.n	8008700 <__libc_init_array+0xc>
 8008722:	f855 3b04 	ldr.w	r3, [r5], #4
 8008726:	4798      	blx	r3
 8008728:	3601      	adds	r6, #1
 800872a:	e7f2      	b.n	8008712 <__libc_init_array+0x1e>
 800872c:	0800ba34 	.word	0x0800ba34
 8008730:	0800ba34 	.word	0x0800ba34
 8008734:	0800ba34 	.word	0x0800ba34
 8008738:	0800ba38 	.word	0x0800ba38

0800873c <memset>:
 800873c:	4402      	add	r2, r0
 800873e:	4603      	mov	r3, r0
 8008740:	4293      	cmp	r3, r2
 8008742:	d100      	bne.n	8008746 <memset+0xa>
 8008744:	4770      	bx	lr
 8008746:	f803 1b01 	strb.w	r1, [r3], #1
 800874a:	e7f9      	b.n	8008740 <memset+0x4>

0800874c <__cvt>:
 800874c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	ec55 4b10 	vmov	r4, r5, d0
 8008754:	2d00      	cmp	r5, #0
 8008756:	460e      	mov	r6, r1
 8008758:	4619      	mov	r1, r3
 800875a:	462b      	mov	r3, r5
 800875c:	bfbb      	ittet	lt
 800875e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008762:	461d      	movlt	r5, r3
 8008764:	2300      	movge	r3, #0
 8008766:	232d      	movlt	r3, #45	; 0x2d
 8008768:	700b      	strb	r3, [r1, #0]
 800876a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800876c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008770:	4691      	mov	r9, r2
 8008772:	f023 0820 	bic.w	r8, r3, #32
 8008776:	bfbc      	itt	lt
 8008778:	4622      	movlt	r2, r4
 800877a:	4614      	movlt	r4, r2
 800877c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008780:	d005      	beq.n	800878e <__cvt+0x42>
 8008782:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008786:	d100      	bne.n	800878a <__cvt+0x3e>
 8008788:	3601      	adds	r6, #1
 800878a:	2102      	movs	r1, #2
 800878c:	e000      	b.n	8008790 <__cvt+0x44>
 800878e:	2103      	movs	r1, #3
 8008790:	ab03      	add	r3, sp, #12
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	ab02      	add	r3, sp, #8
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	ec45 4b10 	vmov	d0, r4, r5
 800879c:	4653      	mov	r3, sl
 800879e:	4632      	mov	r2, r6
 80087a0:	f000 fcea 	bl	8009178 <_dtoa_r>
 80087a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087a8:	4607      	mov	r7, r0
 80087aa:	d102      	bne.n	80087b2 <__cvt+0x66>
 80087ac:	f019 0f01 	tst.w	r9, #1
 80087b0:	d022      	beq.n	80087f8 <__cvt+0xac>
 80087b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087b6:	eb07 0906 	add.w	r9, r7, r6
 80087ba:	d110      	bne.n	80087de <__cvt+0x92>
 80087bc:	783b      	ldrb	r3, [r7, #0]
 80087be:	2b30      	cmp	r3, #48	; 0x30
 80087c0:	d10a      	bne.n	80087d8 <__cvt+0x8c>
 80087c2:	2200      	movs	r2, #0
 80087c4:	2300      	movs	r3, #0
 80087c6:	4620      	mov	r0, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f8 f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 80087ce:	b918      	cbnz	r0, 80087d8 <__cvt+0x8c>
 80087d0:	f1c6 0601 	rsb	r6, r6, #1
 80087d4:	f8ca 6000 	str.w	r6, [sl]
 80087d8:	f8da 3000 	ldr.w	r3, [sl]
 80087dc:	4499      	add	r9, r3
 80087de:	2200      	movs	r2, #0
 80087e0:	2300      	movs	r3, #0
 80087e2:	4620      	mov	r0, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	f7f8 f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 80087ea:	b108      	cbz	r0, 80087f0 <__cvt+0xa4>
 80087ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80087f0:	2230      	movs	r2, #48	; 0x30
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	454b      	cmp	r3, r9
 80087f6:	d307      	bcc.n	8008808 <__cvt+0xbc>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087fc:	1bdb      	subs	r3, r3, r7
 80087fe:	4638      	mov	r0, r7
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	b004      	add	sp, #16
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	1c59      	adds	r1, r3, #1
 800880a:	9103      	str	r1, [sp, #12]
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	e7f0      	b.n	80087f2 <__cvt+0xa6>

08008810 <__exponent>:
 8008810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008812:	4603      	mov	r3, r0
 8008814:	2900      	cmp	r1, #0
 8008816:	bfb8      	it	lt
 8008818:	4249      	neglt	r1, r1
 800881a:	f803 2b02 	strb.w	r2, [r3], #2
 800881e:	bfb4      	ite	lt
 8008820:	222d      	movlt	r2, #45	; 0x2d
 8008822:	222b      	movge	r2, #43	; 0x2b
 8008824:	2909      	cmp	r1, #9
 8008826:	7042      	strb	r2, [r0, #1]
 8008828:	dd2a      	ble.n	8008880 <__exponent+0x70>
 800882a:	f10d 0407 	add.w	r4, sp, #7
 800882e:	46a4      	mov	ip, r4
 8008830:	270a      	movs	r7, #10
 8008832:	46a6      	mov	lr, r4
 8008834:	460a      	mov	r2, r1
 8008836:	fb91 f6f7 	sdiv	r6, r1, r7
 800883a:	fb07 1516 	mls	r5, r7, r6, r1
 800883e:	3530      	adds	r5, #48	; 0x30
 8008840:	2a63      	cmp	r2, #99	; 0x63
 8008842:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800884a:	4631      	mov	r1, r6
 800884c:	dcf1      	bgt.n	8008832 <__exponent+0x22>
 800884e:	3130      	adds	r1, #48	; 0x30
 8008850:	f1ae 0502 	sub.w	r5, lr, #2
 8008854:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008858:	1c44      	adds	r4, r0, #1
 800885a:	4629      	mov	r1, r5
 800885c:	4561      	cmp	r1, ip
 800885e:	d30a      	bcc.n	8008876 <__exponent+0x66>
 8008860:	f10d 0209 	add.w	r2, sp, #9
 8008864:	eba2 020e 	sub.w	r2, r2, lr
 8008868:	4565      	cmp	r5, ip
 800886a:	bf88      	it	hi
 800886c:	2200      	movhi	r2, #0
 800886e:	4413      	add	r3, r2
 8008870:	1a18      	subs	r0, r3, r0
 8008872:	b003      	add	sp, #12
 8008874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800887e:	e7ed      	b.n	800885c <__exponent+0x4c>
 8008880:	2330      	movs	r3, #48	; 0x30
 8008882:	3130      	adds	r1, #48	; 0x30
 8008884:	7083      	strb	r3, [r0, #2]
 8008886:	70c1      	strb	r1, [r0, #3]
 8008888:	1d03      	adds	r3, r0, #4
 800888a:	e7f1      	b.n	8008870 <__exponent+0x60>

0800888c <_printf_float>:
 800888c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008890:	ed2d 8b02 	vpush	{d8}
 8008894:	b08d      	sub	sp, #52	; 0x34
 8008896:	460c      	mov	r4, r1
 8008898:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800889c:	4616      	mov	r6, r2
 800889e:	461f      	mov	r7, r3
 80088a0:	4605      	mov	r5, r0
 80088a2:	f001 fa57 	bl	8009d54 <_localeconv_r>
 80088a6:	f8d0 a000 	ldr.w	sl, [r0]
 80088aa:	4650      	mov	r0, sl
 80088ac:	f7f7 fc90 	bl	80001d0 <strlen>
 80088b0:	2300      	movs	r3, #0
 80088b2:	930a      	str	r3, [sp, #40]	; 0x28
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	9305      	str	r3, [sp, #20]
 80088b8:	f8d8 3000 	ldr.w	r3, [r8]
 80088bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80088c0:	3307      	adds	r3, #7
 80088c2:	f023 0307 	bic.w	r3, r3, #7
 80088c6:	f103 0208 	add.w	r2, r3, #8
 80088ca:	f8c8 2000 	str.w	r2, [r8]
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80088d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80088da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088de:	9307      	str	r3, [sp, #28]
 80088e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80088e4:	ee08 0a10 	vmov	s16, r0
 80088e8:	4b9f      	ldr	r3, [pc, #636]	; (8008b68 <_printf_float+0x2dc>)
 80088ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088f2:	f7f8 f91b 	bl	8000b2c <__aeabi_dcmpun>
 80088f6:	bb88      	cbnz	r0, 800895c <_printf_float+0xd0>
 80088f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088fc:	4b9a      	ldr	r3, [pc, #616]	; (8008b68 <_printf_float+0x2dc>)
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008902:	f7f8 f8f5 	bl	8000af0 <__aeabi_dcmple>
 8008906:	bb48      	cbnz	r0, 800895c <_printf_float+0xd0>
 8008908:	2200      	movs	r2, #0
 800890a:	2300      	movs	r3, #0
 800890c:	4640      	mov	r0, r8
 800890e:	4649      	mov	r1, r9
 8008910:	f7f8 f8e4 	bl	8000adc <__aeabi_dcmplt>
 8008914:	b110      	cbz	r0, 800891c <_printf_float+0x90>
 8008916:	232d      	movs	r3, #45	; 0x2d
 8008918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800891c:	4b93      	ldr	r3, [pc, #588]	; (8008b6c <_printf_float+0x2e0>)
 800891e:	4894      	ldr	r0, [pc, #592]	; (8008b70 <_printf_float+0x2e4>)
 8008920:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008924:	bf94      	ite	ls
 8008926:	4698      	movls	r8, r3
 8008928:	4680      	movhi	r8, r0
 800892a:	2303      	movs	r3, #3
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	9b05      	ldr	r3, [sp, #20]
 8008930:	f023 0204 	bic.w	r2, r3, #4
 8008934:	6022      	str	r2, [r4, #0]
 8008936:	f04f 0900 	mov.w	r9, #0
 800893a:	9700      	str	r7, [sp, #0]
 800893c:	4633      	mov	r3, r6
 800893e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008940:	4621      	mov	r1, r4
 8008942:	4628      	mov	r0, r5
 8008944:	f000 f9d8 	bl	8008cf8 <_printf_common>
 8008948:	3001      	adds	r0, #1
 800894a:	f040 8090 	bne.w	8008a6e <_printf_float+0x1e2>
 800894e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008952:	b00d      	add	sp, #52	; 0x34
 8008954:	ecbd 8b02 	vpop	{d8}
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895c:	4642      	mov	r2, r8
 800895e:	464b      	mov	r3, r9
 8008960:	4640      	mov	r0, r8
 8008962:	4649      	mov	r1, r9
 8008964:	f7f8 f8e2 	bl	8000b2c <__aeabi_dcmpun>
 8008968:	b140      	cbz	r0, 800897c <_printf_float+0xf0>
 800896a:	464b      	mov	r3, r9
 800896c:	2b00      	cmp	r3, #0
 800896e:	bfbc      	itt	lt
 8008970:	232d      	movlt	r3, #45	; 0x2d
 8008972:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008976:	487f      	ldr	r0, [pc, #508]	; (8008b74 <_printf_float+0x2e8>)
 8008978:	4b7f      	ldr	r3, [pc, #508]	; (8008b78 <_printf_float+0x2ec>)
 800897a:	e7d1      	b.n	8008920 <_printf_float+0x94>
 800897c:	6863      	ldr	r3, [r4, #4]
 800897e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008982:	9206      	str	r2, [sp, #24]
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	d13f      	bne.n	8008a08 <_printf_float+0x17c>
 8008988:	2306      	movs	r3, #6
 800898a:	6063      	str	r3, [r4, #4]
 800898c:	9b05      	ldr	r3, [sp, #20]
 800898e:	6861      	ldr	r1, [r4, #4]
 8008990:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008994:	2300      	movs	r3, #0
 8008996:	9303      	str	r3, [sp, #12]
 8008998:	ab0a      	add	r3, sp, #40	; 0x28
 800899a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800899e:	ab09      	add	r3, sp, #36	; 0x24
 80089a0:	ec49 8b10 	vmov	d0, r8, r9
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	6022      	str	r2, [r4, #0]
 80089a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089ac:	4628      	mov	r0, r5
 80089ae:	f7ff fecd 	bl	800874c <__cvt>
 80089b2:	9b06      	ldr	r3, [sp, #24]
 80089b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089b6:	2b47      	cmp	r3, #71	; 0x47
 80089b8:	4680      	mov	r8, r0
 80089ba:	d108      	bne.n	80089ce <_printf_float+0x142>
 80089bc:	1cc8      	adds	r0, r1, #3
 80089be:	db02      	blt.n	80089c6 <_printf_float+0x13a>
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	4299      	cmp	r1, r3
 80089c4:	dd41      	ble.n	8008a4a <_printf_float+0x1be>
 80089c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80089ca:	fa5f fb8b 	uxtb.w	fp, fp
 80089ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089d2:	d820      	bhi.n	8008a16 <_printf_float+0x18a>
 80089d4:	3901      	subs	r1, #1
 80089d6:	465a      	mov	r2, fp
 80089d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089dc:	9109      	str	r1, [sp, #36]	; 0x24
 80089de:	f7ff ff17 	bl	8008810 <__exponent>
 80089e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089e4:	1813      	adds	r3, r2, r0
 80089e6:	2a01      	cmp	r2, #1
 80089e8:	4681      	mov	r9, r0
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	dc02      	bgt.n	80089f4 <_printf_float+0x168>
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	07d2      	lsls	r2, r2, #31
 80089f2:	d501      	bpl.n	80089f8 <_printf_float+0x16c>
 80089f4:	3301      	adds	r3, #1
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d09c      	beq.n	800893a <_printf_float+0xae>
 8008a00:	232d      	movs	r3, #45	; 0x2d
 8008a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a06:	e798      	b.n	800893a <_printf_float+0xae>
 8008a08:	9a06      	ldr	r2, [sp, #24]
 8008a0a:	2a47      	cmp	r2, #71	; 0x47
 8008a0c:	d1be      	bne.n	800898c <_printf_float+0x100>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1bc      	bne.n	800898c <_printf_float+0x100>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7b9      	b.n	800898a <_printf_float+0xfe>
 8008a16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a1a:	d118      	bne.n	8008a4e <_printf_float+0x1c2>
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	6863      	ldr	r3, [r4, #4]
 8008a20:	dd0b      	ble.n	8008a3a <_printf_float+0x1ae>
 8008a22:	6121      	str	r1, [r4, #16]
 8008a24:	b913      	cbnz	r3, 8008a2c <_printf_float+0x1a0>
 8008a26:	6822      	ldr	r2, [r4, #0]
 8008a28:	07d0      	lsls	r0, r2, #31
 8008a2a:	d502      	bpl.n	8008a32 <_printf_float+0x1a6>
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	440b      	add	r3, r1
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a34:	f04f 0900 	mov.w	r9, #0
 8008a38:	e7de      	b.n	80089f8 <_printf_float+0x16c>
 8008a3a:	b913      	cbnz	r3, 8008a42 <_printf_float+0x1b6>
 8008a3c:	6822      	ldr	r2, [r4, #0]
 8008a3e:	07d2      	lsls	r2, r2, #31
 8008a40:	d501      	bpl.n	8008a46 <_printf_float+0x1ba>
 8008a42:	3302      	adds	r3, #2
 8008a44:	e7f4      	b.n	8008a30 <_printf_float+0x1a4>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e7f2      	b.n	8008a30 <_printf_float+0x1a4>
 8008a4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a50:	4299      	cmp	r1, r3
 8008a52:	db05      	blt.n	8008a60 <_printf_float+0x1d4>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	6121      	str	r1, [r4, #16]
 8008a58:	07d8      	lsls	r0, r3, #31
 8008a5a:	d5ea      	bpl.n	8008a32 <_printf_float+0x1a6>
 8008a5c:	1c4b      	adds	r3, r1, #1
 8008a5e:	e7e7      	b.n	8008a30 <_printf_float+0x1a4>
 8008a60:	2900      	cmp	r1, #0
 8008a62:	bfd4      	ite	le
 8008a64:	f1c1 0202 	rsble	r2, r1, #2
 8008a68:	2201      	movgt	r2, #1
 8008a6a:	4413      	add	r3, r2
 8008a6c:	e7e0      	b.n	8008a30 <_printf_float+0x1a4>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	055a      	lsls	r2, r3, #21
 8008a72:	d407      	bmi.n	8008a84 <_printf_float+0x1f8>
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	4642      	mov	r2, r8
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	47b8      	blx	r7
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d12c      	bne.n	8008adc <_printf_float+0x250>
 8008a82:	e764      	b.n	800894e <_printf_float+0xc2>
 8008a84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a88:	f240 80e0 	bls.w	8008c4c <_printf_float+0x3c0>
 8008a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a90:	2200      	movs	r2, #0
 8008a92:	2300      	movs	r3, #0
 8008a94:	f7f8 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d034      	beq.n	8008b06 <_printf_float+0x27a>
 8008a9c:	4a37      	ldr	r2, [pc, #220]	; (8008b7c <_printf_float+0x2f0>)
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f af51 	beq.w	800894e <_printf_float+0xc2>
 8008aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	db02      	blt.n	8008aba <_printf_float+0x22e>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	07d8      	lsls	r0, r3, #31
 8008ab8:	d510      	bpl.n	8008adc <_printf_float+0x250>
 8008aba:	ee18 3a10 	vmov	r3, s16
 8008abe:	4652      	mov	r2, sl
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	47b8      	blx	r7
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f43f af41 	beq.w	800894e <_printf_float+0xc2>
 8008acc:	f04f 0800 	mov.w	r8, #0
 8008ad0:	f104 091a 	add.w	r9, r4, #26
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	4543      	cmp	r3, r8
 8008ada:	dc09      	bgt.n	8008af0 <_printf_float+0x264>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	079b      	lsls	r3, r3, #30
 8008ae0:	f100 8105 	bmi.w	8008cee <_printf_float+0x462>
 8008ae4:	68e0      	ldr	r0, [r4, #12]
 8008ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae8:	4298      	cmp	r0, r3
 8008aea:	bfb8      	it	lt
 8008aec:	4618      	movlt	r0, r3
 8008aee:	e730      	b.n	8008952 <_printf_float+0xc6>
 8008af0:	2301      	movs	r3, #1
 8008af2:	464a      	mov	r2, r9
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	f43f af27 	beq.w	800894e <_printf_float+0xc2>
 8008b00:	f108 0801 	add.w	r8, r8, #1
 8008b04:	e7e6      	b.n	8008ad4 <_printf_float+0x248>
 8008b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc39      	bgt.n	8008b80 <_printf_float+0x2f4>
 8008b0c:	4a1b      	ldr	r2, [pc, #108]	; (8008b7c <_printf_float+0x2f0>)
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4631      	mov	r1, r6
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b8      	blx	r7
 8008b16:	3001      	adds	r0, #1
 8008b18:	f43f af19 	beq.w	800894e <_printf_float+0xc2>
 8008b1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b20:	4313      	orrs	r3, r2
 8008b22:	d102      	bne.n	8008b2a <_printf_float+0x29e>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	07d9      	lsls	r1, r3, #31
 8008b28:	d5d8      	bpl.n	8008adc <_printf_float+0x250>
 8008b2a:	ee18 3a10 	vmov	r3, s16
 8008b2e:	4652      	mov	r2, sl
 8008b30:	4631      	mov	r1, r6
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	f43f af09 	beq.w	800894e <_printf_float+0xc2>
 8008b3c:	f04f 0900 	mov.w	r9, #0
 8008b40:	f104 0a1a 	add.w	sl, r4, #26
 8008b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b46:	425b      	negs	r3, r3
 8008b48:	454b      	cmp	r3, r9
 8008b4a:	dc01      	bgt.n	8008b50 <_printf_float+0x2c4>
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4e:	e792      	b.n	8008a76 <_printf_float+0x1ea>
 8008b50:	2301      	movs	r3, #1
 8008b52:	4652      	mov	r2, sl
 8008b54:	4631      	mov	r1, r6
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b8      	blx	r7
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	f43f aef7 	beq.w	800894e <_printf_float+0xc2>
 8008b60:	f109 0901 	add.w	r9, r9, #1
 8008b64:	e7ee      	b.n	8008b44 <_printf_float+0x2b8>
 8008b66:	bf00      	nop
 8008b68:	7fefffff 	.word	0x7fefffff
 8008b6c:	0800b654 	.word	0x0800b654
 8008b70:	0800b658 	.word	0x0800b658
 8008b74:	0800b660 	.word	0x0800b660
 8008b78:	0800b65c 	.word	0x0800b65c
 8008b7c:	0800b664 	.word	0x0800b664
 8008b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b84:	429a      	cmp	r2, r3
 8008b86:	bfa8      	it	ge
 8008b88:	461a      	movge	r2, r3
 8008b8a:	2a00      	cmp	r2, #0
 8008b8c:	4691      	mov	r9, r2
 8008b8e:	dc37      	bgt.n	8008c00 <_printf_float+0x374>
 8008b90:	f04f 0b00 	mov.w	fp, #0
 8008b94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b98:	f104 021a 	add.w	r2, r4, #26
 8008b9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b9e:	9305      	str	r3, [sp, #20]
 8008ba0:	eba3 0309 	sub.w	r3, r3, r9
 8008ba4:	455b      	cmp	r3, fp
 8008ba6:	dc33      	bgt.n	8008c10 <_printf_float+0x384>
 8008ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bac:	429a      	cmp	r2, r3
 8008bae:	db3b      	blt.n	8008c28 <_printf_float+0x39c>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	07da      	lsls	r2, r3, #31
 8008bb4:	d438      	bmi.n	8008c28 <_printf_float+0x39c>
 8008bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb8:	9a05      	ldr	r2, [sp, #20]
 8008bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bbc:	1a9a      	subs	r2, r3, r2
 8008bbe:	eba3 0901 	sub.w	r9, r3, r1
 8008bc2:	4591      	cmp	r9, r2
 8008bc4:	bfa8      	it	ge
 8008bc6:	4691      	movge	r9, r2
 8008bc8:	f1b9 0f00 	cmp.w	r9, #0
 8008bcc:	dc35      	bgt.n	8008c3a <_printf_float+0x3ae>
 8008bce:	f04f 0800 	mov.w	r8, #0
 8008bd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bd6:	f104 0a1a 	add.w	sl, r4, #26
 8008bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bde:	1a9b      	subs	r3, r3, r2
 8008be0:	eba3 0309 	sub.w	r3, r3, r9
 8008be4:	4543      	cmp	r3, r8
 8008be6:	f77f af79 	ble.w	8008adc <_printf_float+0x250>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4652      	mov	r2, sl
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f43f aeaa 	beq.w	800894e <_printf_float+0xc2>
 8008bfa:	f108 0801 	add.w	r8, r8, #1
 8008bfe:	e7ec      	b.n	8008bda <_printf_float+0x34e>
 8008c00:	4613      	mov	r3, r2
 8008c02:	4631      	mov	r1, r6
 8008c04:	4642      	mov	r2, r8
 8008c06:	4628      	mov	r0, r5
 8008c08:	47b8      	blx	r7
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d1c0      	bne.n	8008b90 <_printf_float+0x304>
 8008c0e:	e69e      	b.n	800894e <_printf_float+0xc2>
 8008c10:	2301      	movs	r3, #1
 8008c12:	4631      	mov	r1, r6
 8008c14:	4628      	mov	r0, r5
 8008c16:	9205      	str	r2, [sp, #20]
 8008c18:	47b8      	blx	r7
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	f43f ae97 	beq.w	800894e <_printf_float+0xc2>
 8008c20:	9a05      	ldr	r2, [sp, #20]
 8008c22:	f10b 0b01 	add.w	fp, fp, #1
 8008c26:	e7b9      	b.n	8008b9c <_printf_float+0x310>
 8008c28:	ee18 3a10 	vmov	r3, s16
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	d1be      	bne.n	8008bb6 <_printf_float+0x32a>
 8008c38:	e689      	b.n	800894e <_printf_float+0xc2>
 8008c3a:	9a05      	ldr	r2, [sp, #20]
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	4442      	add	r2, r8
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	d1c1      	bne.n	8008bce <_printf_float+0x342>
 8008c4a:	e680      	b.n	800894e <_printf_float+0xc2>
 8008c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c4e:	2a01      	cmp	r2, #1
 8008c50:	dc01      	bgt.n	8008c56 <_printf_float+0x3ca>
 8008c52:	07db      	lsls	r3, r3, #31
 8008c54:	d538      	bpl.n	8008cc8 <_printf_float+0x43c>
 8008c56:	2301      	movs	r3, #1
 8008c58:	4642      	mov	r2, r8
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b8      	blx	r7
 8008c60:	3001      	adds	r0, #1
 8008c62:	f43f ae74 	beq.w	800894e <_printf_float+0xc2>
 8008c66:	ee18 3a10 	vmov	r3, s16
 8008c6a:	4652      	mov	r2, sl
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b8      	blx	r7
 8008c72:	3001      	adds	r0, #1
 8008c74:	f43f ae6b 	beq.w	800894e <_printf_float+0xc2>
 8008c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f7f7 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c84:	b9d8      	cbnz	r0, 8008cbe <_printf_float+0x432>
 8008c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c88:	f108 0201 	add.w	r2, r8, #1
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b8      	blx	r7
 8008c94:	3001      	adds	r0, #1
 8008c96:	d10e      	bne.n	8008cb6 <_printf_float+0x42a>
 8008c98:	e659      	b.n	800894e <_printf_float+0xc2>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	4652      	mov	r2, sl
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	47b8      	blx	r7
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	f43f ae52 	beq.w	800894e <_printf_float+0xc2>
 8008caa:	f108 0801 	add.w	r8, r8, #1
 8008cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	4543      	cmp	r3, r8
 8008cb4:	dcf1      	bgt.n	8008c9a <_printf_float+0x40e>
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cbc:	e6dc      	b.n	8008a78 <_printf_float+0x1ec>
 8008cbe:	f04f 0800 	mov.w	r8, #0
 8008cc2:	f104 0a1a 	add.w	sl, r4, #26
 8008cc6:	e7f2      	b.n	8008cae <_printf_float+0x422>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	4642      	mov	r2, r8
 8008ccc:	e7df      	b.n	8008c8e <_printf_float+0x402>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	464a      	mov	r2, r9
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f ae38 	beq.w	800894e <_printf_float+0xc2>
 8008cde:	f108 0801 	add.w	r8, r8, #1
 8008ce2:	68e3      	ldr	r3, [r4, #12]
 8008ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ce6:	1a5b      	subs	r3, r3, r1
 8008ce8:	4543      	cmp	r3, r8
 8008cea:	dcf0      	bgt.n	8008cce <_printf_float+0x442>
 8008cec:	e6fa      	b.n	8008ae4 <_printf_float+0x258>
 8008cee:	f04f 0800 	mov.w	r8, #0
 8008cf2:	f104 0919 	add.w	r9, r4, #25
 8008cf6:	e7f4      	b.n	8008ce2 <_printf_float+0x456>

08008cf8 <_printf_common>:
 8008cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	4699      	mov	r9, r3
 8008d00:	688a      	ldr	r2, [r1, #8]
 8008d02:	690b      	ldr	r3, [r1, #16]
 8008d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bfb8      	it	lt
 8008d0c:	4613      	movlt	r3, r2
 8008d0e:	6033      	str	r3, [r6, #0]
 8008d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d14:	4607      	mov	r7, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	b10a      	cbz	r2, 8008d1e <_printf_common+0x26>
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	6033      	str	r3, [r6, #0]
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	0699      	lsls	r1, r3, #26
 8008d22:	bf42      	ittt	mi
 8008d24:	6833      	ldrmi	r3, [r6, #0]
 8008d26:	3302      	addmi	r3, #2
 8008d28:	6033      	strmi	r3, [r6, #0]
 8008d2a:	6825      	ldr	r5, [r4, #0]
 8008d2c:	f015 0506 	ands.w	r5, r5, #6
 8008d30:	d106      	bne.n	8008d40 <_printf_common+0x48>
 8008d32:	f104 0a19 	add.w	sl, r4, #25
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	6832      	ldr	r2, [r6, #0]
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	dc26      	bgt.n	8008d8e <_printf_common+0x96>
 8008d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d44:	1e13      	subs	r3, r2, #0
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	bf18      	it	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	0692      	lsls	r2, r2, #26
 8008d4e:	d42b      	bmi.n	8008da8 <_printf_common+0xb0>
 8008d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d54:	4649      	mov	r1, r9
 8008d56:	4638      	mov	r0, r7
 8008d58:	47c0      	blx	r8
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	d01e      	beq.n	8008d9c <_printf_common+0xa4>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	68e5      	ldr	r5, [r4, #12]
 8008d62:	6832      	ldr	r2, [r6, #0]
 8008d64:	f003 0306 	and.w	r3, r3, #6
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	bf08      	it	eq
 8008d6c:	1aad      	subeq	r5, r5, r2
 8008d6e:	68a3      	ldr	r3, [r4, #8]
 8008d70:	6922      	ldr	r2, [r4, #16]
 8008d72:	bf0c      	ite	eq
 8008d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d78:	2500      	movne	r5, #0
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	bfc4      	itt	gt
 8008d7e:	1a9b      	subgt	r3, r3, r2
 8008d80:	18ed      	addgt	r5, r5, r3
 8008d82:	2600      	movs	r6, #0
 8008d84:	341a      	adds	r4, #26
 8008d86:	42b5      	cmp	r5, r6
 8008d88:	d11a      	bne.n	8008dc0 <_printf_common+0xc8>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e008      	b.n	8008da0 <_printf_common+0xa8>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4652      	mov	r2, sl
 8008d92:	4649      	mov	r1, r9
 8008d94:	4638      	mov	r0, r7
 8008d96:	47c0      	blx	r8
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d103      	bne.n	8008da4 <_printf_common+0xac>
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da4:	3501      	adds	r5, #1
 8008da6:	e7c6      	b.n	8008d36 <_printf_common+0x3e>
 8008da8:	18e1      	adds	r1, r4, r3
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	2030      	movs	r0, #48	; 0x30
 8008dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008db2:	4422      	add	r2, r4
 8008db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	e7c7      	b.n	8008d50 <_printf_common+0x58>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	47c0      	blx	r8
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d0e6      	beq.n	8008d9c <_printf_common+0xa4>
 8008dce:	3601      	adds	r6, #1
 8008dd0:	e7d9      	b.n	8008d86 <_printf_common+0x8e>
	...

08008dd4 <_printf_i>:
 8008dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	7e0f      	ldrb	r7, [r1, #24]
 8008dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ddc:	2f78      	cmp	r7, #120	; 0x78
 8008dde:	4691      	mov	r9, r2
 8008de0:	4680      	mov	r8, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	469a      	mov	sl, r3
 8008de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dea:	d807      	bhi.n	8008dfc <_printf_i+0x28>
 8008dec:	2f62      	cmp	r7, #98	; 0x62
 8008dee:	d80a      	bhi.n	8008e06 <_printf_i+0x32>
 8008df0:	2f00      	cmp	r7, #0
 8008df2:	f000 80d8 	beq.w	8008fa6 <_printf_i+0x1d2>
 8008df6:	2f58      	cmp	r7, #88	; 0x58
 8008df8:	f000 80a3 	beq.w	8008f42 <_printf_i+0x16e>
 8008dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e04:	e03a      	b.n	8008e7c <_printf_i+0xa8>
 8008e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e0a:	2b15      	cmp	r3, #21
 8008e0c:	d8f6      	bhi.n	8008dfc <_printf_i+0x28>
 8008e0e:	a101      	add	r1, pc, #4	; (adr r1, 8008e14 <_printf_i+0x40>)
 8008e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008dfd 	.word	0x08008dfd
 8008e20:	08008dfd 	.word	0x08008dfd
 8008e24:	08008dfd 	.word	0x08008dfd
 8008e28:	08008dfd 	.word	0x08008dfd
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08008dfd 	.word	0x08008dfd
 8008e34:	08008dfd 	.word	0x08008dfd
 8008e38:	08008dfd 	.word	0x08008dfd
 8008e3c:	08008dfd 	.word	0x08008dfd
 8008e40:	08008f8d 	.word	0x08008f8d
 8008e44:	08008eb1 	.word	0x08008eb1
 8008e48:	08008f6f 	.word	0x08008f6f
 8008e4c:	08008dfd 	.word	0x08008dfd
 8008e50:	08008dfd 	.word	0x08008dfd
 8008e54:	08008faf 	.word	0x08008faf
 8008e58:	08008dfd 	.word	0x08008dfd
 8008e5c:	08008eb1 	.word	0x08008eb1
 8008e60:	08008dfd 	.word	0x08008dfd
 8008e64:	08008dfd 	.word	0x08008dfd
 8008e68:	08008f77 	.word	0x08008f77
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	1d1a      	adds	r2, r3, #4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	602a      	str	r2, [r5, #0]
 8008e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e0a3      	b.n	8008fc8 <_printf_i+0x1f4>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	6829      	ldr	r1, [r5, #0]
 8008e84:	0606      	lsls	r6, r0, #24
 8008e86:	f101 0304 	add.w	r3, r1, #4
 8008e8a:	d50a      	bpl.n	8008ea2 <_printf_i+0xce>
 8008e8c:	680e      	ldr	r6, [r1, #0]
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	2e00      	cmp	r6, #0
 8008e92:	da03      	bge.n	8008e9c <_printf_i+0xc8>
 8008e94:	232d      	movs	r3, #45	; 0x2d
 8008e96:	4276      	negs	r6, r6
 8008e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e9c:	485e      	ldr	r0, [pc, #376]	; (8009018 <_printf_i+0x244>)
 8008e9e:	230a      	movs	r3, #10
 8008ea0:	e019      	b.n	8008ed6 <_printf_i+0x102>
 8008ea2:	680e      	ldr	r6, [r1, #0]
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008eaa:	bf18      	it	ne
 8008eac:	b236      	sxthne	r6, r6
 8008eae:	e7ef      	b.n	8008e90 <_printf_i+0xbc>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	6820      	ldr	r0, [r4, #0]
 8008eb4:	1d19      	adds	r1, r3, #4
 8008eb6:	6029      	str	r1, [r5, #0]
 8008eb8:	0601      	lsls	r1, r0, #24
 8008eba:	d501      	bpl.n	8008ec0 <_printf_i+0xec>
 8008ebc:	681e      	ldr	r6, [r3, #0]
 8008ebe:	e002      	b.n	8008ec6 <_printf_i+0xf2>
 8008ec0:	0646      	lsls	r6, r0, #25
 8008ec2:	d5fb      	bpl.n	8008ebc <_printf_i+0xe8>
 8008ec4:	881e      	ldrh	r6, [r3, #0]
 8008ec6:	4854      	ldr	r0, [pc, #336]	; (8009018 <_printf_i+0x244>)
 8008ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8008eca:	bf0c      	ite	eq
 8008ecc:	2308      	moveq	r3, #8
 8008ece:	230a      	movne	r3, #10
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ed6:	6865      	ldr	r5, [r4, #4]
 8008ed8:	60a5      	str	r5, [r4, #8]
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	bfa2      	ittt	ge
 8008ede:	6821      	ldrge	r1, [r4, #0]
 8008ee0:	f021 0104 	bicge.w	r1, r1, #4
 8008ee4:	6021      	strge	r1, [r4, #0]
 8008ee6:	b90e      	cbnz	r6, 8008eec <_printf_i+0x118>
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	d04d      	beq.n	8008f88 <_printf_i+0x1b4>
 8008eec:	4615      	mov	r5, r2
 8008eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ef6:	5dc7      	ldrb	r7, [r0, r7]
 8008ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008efc:	4637      	mov	r7, r6
 8008efe:	42bb      	cmp	r3, r7
 8008f00:	460e      	mov	r6, r1
 8008f02:	d9f4      	bls.n	8008eee <_printf_i+0x11a>
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d10b      	bne.n	8008f20 <_printf_i+0x14c>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	07de      	lsls	r6, r3, #31
 8008f0c:	d508      	bpl.n	8008f20 <_printf_i+0x14c>
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	6861      	ldr	r1, [r4, #4]
 8008f12:	4299      	cmp	r1, r3
 8008f14:	bfde      	ittt	le
 8008f16:	2330      	movle	r3, #48	; 0x30
 8008f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008f20:	1b52      	subs	r2, r2, r5
 8008f22:	6122      	str	r2, [r4, #16]
 8008f24:	f8cd a000 	str.w	sl, [sp]
 8008f28:	464b      	mov	r3, r9
 8008f2a:	aa03      	add	r2, sp, #12
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4640      	mov	r0, r8
 8008f30:	f7ff fee2 	bl	8008cf8 <_printf_common>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d14c      	bne.n	8008fd2 <_printf_i+0x1fe>
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f3c:	b004      	add	sp, #16
 8008f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f42:	4835      	ldr	r0, [pc, #212]	; (8009018 <_printf_i+0x244>)
 8008f44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f48:	6829      	ldr	r1, [r5, #0]
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f50:	6029      	str	r1, [r5, #0]
 8008f52:	061d      	lsls	r5, r3, #24
 8008f54:	d514      	bpl.n	8008f80 <_printf_i+0x1ac>
 8008f56:	07df      	lsls	r7, r3, #31
 8008f58:	bf44      	itt	mi
 8008f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8008f5e:	6023      	strmi	r3, [r4, #0]
 8008f60:	b91e      	cbnz	r6, 8008f6a <_printf_i+0x196>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	f023 0320 	bic.w	r3, r3, #32
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	2310      	movs	r3, #16
 8008f6c:	e7b0      	b.n	8008ed0 <_printf_i+0xfc>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	f043 0320 	orr.w	r3, r3, #32
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	2378      	movs	r3, #120	; 0x78
 8008f78:	4828      	ldr	r0, [pc, #160]	; (800901c <_printf_i+0x248>)
 8008f7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f7e:	e7e3      	b.n	8008f48 <_printf_i+0x174>
 8008f80:	0659      	lsls	r1, r3, #25
 8008f82:	bf48      	it	mi
 8008f84:	b2b6      	uxthmi	r6, r6
 8008f86:	e7e6      	b.n	8008f56 <_printf_i+0x182>
 8008f88:	4615      	mov	r5, r2
 8008f8a:	e7bb      	b.n	8008f04 <_printf_i+0x130>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	6826      	ldr	r6, [r4, #0]
 8008f90:	6961      	ldr	r1, [r4, #20]
 8008f92:	1d18      	adds	r0, r3, #4
 8008f94:	6028      	str	r0, [r5, #0]
 8008f96:	0635      	lsls	r5, r6, #24
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	d501      	bpl.n	8008fa0 <_printf_i+0x1cc>
 8008f9c:	6019      	str	r1, [r3, #0]
 8008f9e:	e002      	b.n	8008fa6 <_printf_i+0x1d2>
 8008fa0:	0670      	lsls	r0, r6, #25
 8008fa2:	d5fb      	bpl.n	8008f9c <_printf_i+0x1c8>
 8008fa4:	8019      	strh	r1, [r3, #0]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6123      	str	r3, [r4, #16]
 8008faa:	4615      	mov	r5, r2
 8008fac:	e7ba      	b.n	8008f24 <_printf_i+0x150>
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	1d1a      	adds	r2, r3, #4
 8008fb2:	602a      	str	r2, [r5, #0]
 8008fb4:	681d      	ldr	r5, [r3, #0]
 8008fb6:	6862      	ldr	r2, [r4, #4]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f7f7 f910 	bl	80001e0 <memchr>
 8008fc0:	b108      	cbz	r0, 8008fc6 <_printf_i+0x1f2>
 8008fc2:	1b40      	subs	r0, r0, r5
 8008fc4:	6060      	str	r0, [r4, #4]
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	6123      	str	r3, [r4, #16]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd0:	e7a8      	b.n	8008f24 <_printf_i+0x150>
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	4640      	mov	r0, r8
 8008fda:	47d0      	blx	sl
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d0ab      	beq.n	8008f38 <_printf_i+0x164>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	079b      	lsls	r3, r3, #30
 8008fe4:	d413      	bmi.n	800900e <_printf_i+0x23a>
 8008fe6:	68e0      	ldr	r0, [r4, #12]
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	4298      	cmp	r0, r3
 8008fec:	bfb8      	it	lt
 8008fee:	4618      	movlt	r0, r3
 8008ff0:	e7a4      	b.n	8008f3c <_printf_i+0x168>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	47d0      	blx	sl
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d09b      	beq.n	8008f38 <_printf_i+0x164>
 8009000:	3501      	adds	r5, #1
 8009002:	68e3      	ldr	r3, [r4, #12]
 8009004:	9903      	ldr	r1, [sp, #12]
 8009006:	1a5b      	subs	r3, r3, r1
 8009008:	42ab      	cmp	r3, r5
 800900a:	dcf2      	bgt.n	8008ff2 <_printf_i+0x21e>
 800900c:	e7eb      	b.n	8008fe6 <_printf_i+0x212>
 800900e:	2500      	movs	r5, #0
 8009010:	f104 0619 	add.w	r6, r4, #25
 8009014:	e7f5      	b.n	8009002 <_printf_i+0x22e>
 8009016:	bf00      	nop
 8009018:	0800b666 	.word	0x0800b666
 800901c:	0800b677 	.word	0x0800b677

08009020 <siprintf>:
 8009020:	b40e      	push	{r1, r2, r3}
 8009022:	b500      	push	{lr}
 8009024:	b09c      	sub	sp, #112	; 0x70
 8009026:	ab1d      	add	r3, sp, #116	; 0x74
 8009028:	9002      	str	r0, [sp, #8]
 800902a:	9006      	str	r0, [sp, #24]
 800902c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009030:	4809      	ldr	r0, [pc, #36]	; (8009058 <siprintf+0x38>)
 8009032:	9107      	str	r1, [sp, #28]
 8009034:	9104      	str	r1, [sp, #16]
 8009036:	4909      	ldr	r1, [pc, #36]	; (800905c <siprintf+0x3c>)
 8009038:	f853 2b04 	ldr.w	r2, [r3], #4
 800903c:	9105      	str	r1, [sp, #20]
 800903e:	6800      	ldr	r0, [r0, #0]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	a902      	add	r1, sp, #8
 8009044:	f001 fb76 	bl	800a734 <_svfiprintf_r>
 8009048:	9b02      	ldr	r3, [sp, #8]
 800904a:	2200      	movs	r2, #0
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	b01c      	add	sp, #112	; 0x70
 8009050:	f85d eb04 	ldr.w	lr, [sp], #4
 8009054:	b003      	add	sp, #12
 8009056:	4770      	bx	lr
 8009058:	2000000c 	.word	0x2000000c
 800905c:	ffff0208 	.word	0xffff0208

08009060 <quorem>:
 8009060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	6903      	ldr	r3, [r0, #16]
 8009066:	690c      	ldr	r4, [r1, #16]
 8009068:	42a3      	cmp	r3, r4
 800906a:	4607      	mov	r7, r0
 800906c:	f2c0 8081 	blt.w	8009172 <quorem+0x112>
 8009070:	3c01      	subs	r4, #1
 8009072:	f101 0814 	add.w	r8, r1, #20
 8009076:	f100 0514 	add.w	r5, r0, #20
 800907a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009088:	3301      	adds	r3, #1
 800908a:	429a      	cmp	r2, r3
 800908c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009090:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009094:	fbb2 f6f3 	udiv	r6, r2, r3
 8009098:	d331      	bcc.n	80090fe <quorem+0x9e>
 800909a:	f04f 0e00 	mov.w	lr, #0
 800909e:	4640      	mov	r0, r8
 80090a0:	46ac      	mov	ip, r5
 80090a2:	46f2      	mov	sl, lr
 80090a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80090a8:	b293      	uxth	r3, r2
 80090aa:	fb06 e303 	mla	r3, r6, r3, lr
 80090ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	ebaa 0303 	sub.w	r3, sl, r3
 80090b8:	f8dc a000 	ldr.w	sl, [ip]
 80090bc:	0c12      	lsrs	r2, r2, #16
 80090be:	fa13 f38a 	uxtah	r3, r3, sl
 80090c2:	fb06 e202 	mla	r2, r6, r2, lr
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	9b00      	ldr	r3, [sp, #0]
 80090ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090ce:	b292      	uxth	r2, r2
 80090d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80090dc:	4581      	cmp	r9, r0
 80090de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090e2:	f84c 3b04 	str.w	r3, [ip], #4
 80090e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090ea:	d2db      	bcs.n	80090a4 <quorem+0x44>
 80090ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80090f0:	b92b      	cbnz	r3, 80090fe <quorem+0x9e>
 80090f2:	9b01      	ldr	r3, [sp, #4]
 80090f4:	3b04      	subs	r3, #4
 80090f6:	429d      	cmp	r5, r3
 80090f8:	461a      	mov	r2, r3
 80090fa:	d32e      	bcc.n	800915a <quorem+0xfa>
 80090fc:	613c      	str	r4, [r7, #16]
 80090fe:	4638      	mov	r0, r7
 8009100:	f001 f8c4 	bl	800a28c <__mcmp>
 8009104:	2800      	cmp	r0, #0
 8009106:	db24      	blt.n	8009152 <quorem+0xf2>
 8009108:	3601      	adds	r6, #1
 800910a:	4628      	mov	r0, r5
 800910c:	f04f 0c00 	mov.w	ip, #0
 8009110:	f858 2b04 	ldr.w	r2, [r8], #4
 8009114:	f8d0 e000 	ldr.w	lr, [r0]
 8009118:	b293      	uxth	r3, r2
 800911a:	ebac 0303 	sub.w	r3, ip, r3
 800911e:	0c12      	lsrs	r2, r2, #16
 8009120:	fa13 f38e 	uxtah	r3, r3, lr
 8009124:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800912c:	b29b      	uxth	r3, r3
 800912e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009132:	45c1      	cmp	r9, r8
 8009134:	f840 3b04 	str.w	r3, [r0], #4
 8009138:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800913c:	d2e8      	bcs.n	8009110 <quorem+0xb0>
 800913e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009146:	b922      	cbnz	r2, 8009152 <quorem+0xf2>
 8009148:	3b04      	subs	r3, #4
 800914a:	429d      	cmp	r5, r3
 800914c:	461a      	mov	r2, r3
 800914e:	d30a      	bcc.n	8009166 <quorem+0x106>
 8009150:	613c      	str	r4, [r7, #16]
 8009152:	4630      	mov	r0, r6
 8009154:	b003      	add	sp, #12
 8009156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	3b04      	subs	r3, #4
 800915e:	2a00      	cmp	r2, #0
 8009160:	d1cc      	bne.n	80090fc <quorem+0x9c>
 8009162:	3c01      	subs	r4, #1
 8009164:	e7c7      	b.n	80090f6 <quorem+0x96>
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	3b04      	subs	r3, #4
 800916a:	2a00      	cmp	r2, #0
 800916c:	d1f0      	bne.n	8009150 <quorem+0xf0>
 800916e:	3c01      	subs	r4, #1
 8009170:	e7eb      	b.n	800914a <quorem+0xea>
 8009172:	2000      	movs	r0, #0
 8009174:	e7ee      	b.n	8009154 <quorem+0xf4>
	...

08009178 <_dtoa_r>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	ed2d 8b04 	vpush	{d8-d9}
 8009180:	ec57 6b10 	vmov	r6, r7, d0
 8009184:	b093      	sub	sp, #76	; 0x4c
 8009186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009188:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800918c:	9106      	str	r1, [sp, #24]
 800918e:	ee10 aa10 	vmov	sl, s0
 8009192:	4604      	mov	r4, r0
 8009194:	9209      	str	r2, [sp, #36]	; 0x24
 8009196:	930c      	str	r3, [sp, #48]	; 0x30
 8009198:	46bb      	mov	fp, r7
 800919a:	b975      	cbnz	r5, 80091ba <_dtoa_r+0x42>
 800919c:	2010      	movs	r0, #16
 800919e:	f000 fddd 	bl	8009d5c <malloc>
 80091a2:	4602      	mov	r2, r0
 80091a4:	6260      	str	r0, [r4, #36]	; 0x24
 80091a6:	b920      	cbnz	r0, 80091b2 <_dtoa_r+0x3a>
 80091a8:	4ba7      	ldr	r3, [pc, #668]	; (8009448 <_dtoa_r+0x2d0>)
 80091aa:	21ea      	movs	r1, #234	; 0xea
 80091ac:	48a7      	ldr	r0, [pc, #668]	; (800944c <_dtoa_r+0x2d4>)
 80091ae:	f001 fbd1 	bl	800a954 <__assert_func>
 80091b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091b6:	6005      	str	r5, [r0, #0]
 80091b8:	60c5      	str	r5, [r0, #12]
 80091ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091bc:	6819      	ldr	r1, [r3, #0]
 80091be:	b151      	cbz	r1, 80091d6 <_dtoa_r+0x5e>
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	604a      	str	r2, [r1, #4]
 80091c4:	2301      	movs	r3, #1
 80091c6:	4093      	lsls	r3, r2
 80091c8:	608b      	str	r3, [r1, #8]
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 fe1c 	bl	8009e08 <_Bfree>
 80091d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	1e3b      	subs	r3, r7, #0
 80091d8:	bfaa      	itet	ge
 80091da:	2300      	movge	r3, #0
 80091dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80091e0:	f8c8 3000 	strge.w	r3, [r8]
 80091e4:	4b9a      	ldr	r3, [pc, #616]	; (8009450 <_dtoa_r+0x2d8>)
 80091e6:	bfbc      	itt	lt
 80091e8:	2201      	movlt	r2, #1
 80091ea:	f8c8 2000 	strlt.w	r2, [r8]
 80091ee:	ea33 030b 	bics.w	r3, r3, fp
 80091f2:	d11b      	bne.n	800922c <_dtoa_r+0xb4>
 80091f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009200:	4333      	orrs	r3, r6
 8009202:	f000 8592 	beq.w	8009d2a <_dtoa_r+0xbb2>
 8009206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009208:	b963      	cbnz	r3, 8009224 <_dtoa_r+0xac>
 800920a:	4b92      	ldr	r3, [pc, #584]	; (8009454 <_dtoa_r+0x2dc>)
 800920c:	e022      	b.n	8009254 <_dtoa_r+0xdc>
 800920e:	4b92      	ldr	r3, [pc, #584]	; (8009458 <_dtoa_r+0x2e0>)
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	3308      	adds	r3, #8
 8009214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	9801      	ldr	r0, [sp, #4]
 800921a:	b013      	add	sp, #76	; 0x4c
 800921c:	ecbd 8b04 	vpop	{d8-d9}
 8009220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009224:	4b8b      	ldr	r3, [pc, #556]	; (8009454 <_dtoa_r+0x2dc>)
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	3303      	adds	r3, #3
 800922a:	e7f3      	b.n	8009214 <_dtoa_r+0x9c>
 800922c:	2200      	movs	r2, #0
 800922e:	2300      	movs	r3, #0
 8009230:	4650      	mov	r0, sl
 8009232:	4659      	mov	r1, fp
 8009234:	f7f7 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009238:	ec4b ab19 	vmov	d9, sl, fp
 800923c:	4680      	mov	r8, r0
 800923e:	b158      	cbz	r0, 8009258 <_dtoa_r+0xe0>
 8009240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009242:	2301      	movs	r3, #1
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 856b 	beq.w	8009d24 <_dtoa_r+0xbac>
 800924e:	4883      	ldr	r0, [pc, #524]	; (800945c <_dtoa_r+0x2e4>)
 8009250:	6018      	str	r0, [r3, #0]
 8009252:	1e43      	subs	r3, r0, #1
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	e7df      	b.n	8009218 <_dtoa_r+0xa0>
 8009258:	ec4b ab10 	vmov	d0, sl, fp
 800925c:	aa10      	add	r2, sp, #64	; 0x40
 800925e:	a911      	add	r1, sp, #68	; 0x44
 8009260:	4620      	mov	r0, r4
 8009262:	f001 f8b9 	bl	800a3d8 <__d2b>
 8009266:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800926a:	ee08 0a10 	vmov	s16, r0
 800926e:	2d00      	cmp	r5, #0
 8009270:	f000 8084 	beq.w	800937c <_dtoa_r+0x204>
 8009274:	ee19 3a90 	vmov	r3, s19
 8009278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800927c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009280:	4656      	mov	r6, sl
 8009282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800928a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800928e:	4b74      	ldr	r3, [pc, #464]	; (8009460 <_dtoa_r+0x2e8>)
 8009290:	2200      	movs	r2, #0
 8009292:	4630      	mov	r0, r6
 8009294:	4639      	mov	r1, r7
 8009296:	f7f6 fff7 	bl	8000288 <__aeabi_dsub>
 800929a:	a365      	add	r3, pc, #404	; (adr r3, 8009430 <_dtoa_r+0x2b8>)
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	f7f7 f9aa 	bl	80005f8 <__aeabi_dmul>
 80092a4:	a364      	add	r3, pc, #400	; (adr r3, 8009438 <_dtoa_r+0x2c0>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f7f6 ffef 	bl	800028c <__adddf3>
 80092ae:	4606      	mov	r6, r0
 80092b0:	4628      	mov	r0, r5
 80092b2:	460f      	mov	r7, r1
 80092b4:	f7f7 f936 	bl	8000524 <__aeabi_i2d>
 80092b8:	a361      	add	r3, pc, #388	; (adr r3, 8009440 <_dtoa_r+0x2c8>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f7 f99b 	bl	80005f8 <__aeabi_dmul>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4630      	mov	r0, r6
 80092c8:	4639      	mov	r1, r7
 80092ca:	f7f6 ffdf 	bl	800028c <__adddf3>
 80092ce:	4606      	mov	r6, r0
 80092d0:	460f      	mov	r7, r1
 80092d2:	f7f7 fc41 	bl	8000b58 <__aeabi_d2iz>
 80092d6:	2200      	movs	r2, #0
 80092d8:	9000      	str	r0, [sp, #0]
 80092da:	2300      	movs	r3, #0
 80092dc:	4630      	mov	r0, r6
 80092de:	4639      	mov	r1, r7
 80092e0:	f7f7 fbfc 	bl	8000adc <__aeabi_dcmplt>
 80092e4:	b150      	cbz	r0, 80092fc <_dtoa_r+0x184>
 80092e6:	9800      	ldr	r0, [sp, #0]
 80092e8:	f7f7 f91c 	bl	8000524 <__aeabi_i2d>
 80092ec:	4632      	mov	r2, r6
 80092ee:	463b      	mov	r3, r7
 80092f0:	f7f7 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80092f4:	b910      	cbnz	r0, 80092fc <_dtoa_r+0x184>
 80092f6:	9b00      	ldr	r3, [sp, #0]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	9b00      	ldr	r3, [sp, #0]
 80092fe:	2b16      	cmp	r3, #22
 8009300:	d85a      	bhi.n	80093b8 <_dtoa_r+0x240>
 8009302:	9a00      	ldr	r2, [sp, #0]
 8009304:	4b57      	ldr	r3, [pc, #348]	; (8009464 <_dtoa_r+0x2ec>)
 8009306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	ec51 0b19 	vmov	r0, r1, d9
 8009312:	f7f7 fbe3 	bl	8000adc <__aeabi_dcmplt>
 8009316:	2800      	cmp	r0, #0
 8009318:	d050      	beq.n	80093bc <_dtoa_r+0x244>
 800931a:	9b00      	ldr	r3, [sp, #0]
 800931c:	3b01      	subs	r3, #1
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	2300      	movs	r3, #0
 8009322:	930b      	str	r3, [sp, #44]	; 0x2c
 8009324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009326:	1b5d      	subs	r5, r3, r5
 8009328:	1e6b      	subs	r3, r5, #1
 800932a:	9305      	str	r3, [sp, #20]
 800932c:	bf45      	ittet	mi
 800932e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009332:	9304      	strmi	r3, [sp, #16]
 8009334:	2300      	movpl	r3, #0
 8009336:	2300      	movmi	r3, #0
 8009338:	bf4c      	ite	mi
 800933a:	9305      	strmi	r3, [sp, #20]
 800933c:	9304      	strpl	r3, [sp, #16]
 800933e:	9b00      	ldr	r3, [sp, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	db3d      	blt.n	80093c0 <_dtoa_r+0x248>
 8009344:	9b05      	ldr	r3, [sp, #20]
 8009346:	9a00      	ldr	r2, [sp, #0]
 8009348:	920a      	str	r2, [sp, #40]	; 0x28
 800934a:	4413      	add	r3, r2
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	2300      	movs	r3, #0
 8009350:	9307      	str	r3, [sp, #28]
 8009352:	9b06      	ldr	r3, [sp, #24]
 8009354:	2b09      	cmp	r3, #9
 8009356:	f200 8089 	bhi.w	800946c <_dtoa_r+0x2f4>
 800935a:	2b05      	cmp	r3, #5
 800935c:	bfc4      	itt	gt
 800935e:	3b04      	subgt	r3, #4
 8009360:	9306      	strgt	r3, [sp, #24]
 8009362:	9b06      	ldr	r3, [sp, #24]
 8009364:	f1a3 0302 	sub.w	r3, r3, #2
 8009368:	bfcc      	ite	gt
 800936a:	2500      	movgt	r5, #0
 800936c:	2501      	movle	r5, #1
 800936e:	2b03      	cmp	r3, #3
 8009370:	f200 8087 	bhi.w	8009482 <_dtoa_r+0x30a>
 8009374:	e8df f003 	tbb	[pc, r3]
 8009378:	59383a2d 	.word	0x59383a2d
 800937c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009380:	441d      	add	r5, r3
 8009382:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009386:	2b20      	cmp	r3, #32
 8009388:	bfc1      	itttt	gt
 800938a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800938e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009392:	fa0b f303 	lslgt.w	r3, fp, r3
 8009396:	fa26 f000 	lsrgt.w	r0, r6, r0
 800939a:	bfda      	itte	le
 800939c:	f1c3 0320 	rsble	r3, r3, #32
 80093a0:	fa06 f003 	lslle.w	r0, r6, r3
 80093a4:	4318      	orrgt	r0, r3
 80093a6:	f7f7 f8ad 	bl	8000504 <__aeabi_ui2d>
 80093aa:	2301      	movs	r3, #1
 80093ac:	4606      	mov	r6, r0
 80093ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80093b2:	3d01      	subs	r5, #1
 80093b4:	930e      	str	r3, [sp, #56]	; 0x38
 80093b6:	e76a      	b.n	800928e <_dtoa_r+0x116>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e7b2      	b.n	8009322 <_dtoa_r+0x1aa>
 80093bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80093be:	e7b1      	b.n	8009324 <_dtoa_r+0x1ac>
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	9a00      	ldr	r2, [sp, #0]
 80093c4:	1a9b      	subs	r3, r3, r2
 80093c6:	9304      	str	r3, [sp, #16]
 80093c8:	4253      	negs	r3, r2
 80093ca:	9307      	str	r3, [sp, #28]
 80093cc:	2300      	movs	r3, #0
 80093ce:	930a      	str	r3, [sp, #40]	; 0x28
 80093d0:	e7bf      	b.n	8009352 <_dtoa_r+0x1da>
 80093d2:	2300      	movs	r3, #0
 80093d4:	9308      	str	r3, [sp, #32]
 80093d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	dc55      	bgt.n	8009488 <_dtoa_r+0x310>
 80093dc:	2301      	movs	r3, #1
 80093de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093e2:	461a      	mov	r2, r3
 80093e4:	9209      	str	r2, [sp, #36]	; 0x24
 80093e6:	e00c      	b.n	8009402 <_dtoa_r+0x28a>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e7f3      	b.n	80093d4 <_dtoa_r+0x25c>
 80093ec:	2300      	movs	r3, #0
 80093ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093f0:	9308      	str	r3, [sp, #32]
 80093f2:	9b00      	ldr	r3, [sp, #0]
 80093f4:	4413      	add	r3, r2
 80093f6:	9302      	str	r3, [sp, #8]
 80093f8:	3301      	adds	r3, #1
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	9303      	str	r3, [sp, #12]
 80093fe:	bfb8      	it	lt
 8009400:	2301      	movlt	r3, #1
 8009402:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009404:	2200      	movs	r2, #0
 8009406:	6042      	str	r2, [r0, #4]
 8009408:	2204      	movs	r2, #4
 800940a:	f102 0614 	add.w	r6, r2, #20
 800940e:	429e      	cmp	r6, r3
 8009410:	6841      	ldr	r1, [r0, #4]
 8009412:	d93d      	bls.n	8009490 <_dtoa_r+0x318>
 8009414:	4620      	mov	r0, r4
 8009416:	f000 fcb7 	bl	8009d88 <_Balloc>
 800941a:	9001      	str	r0, [sp, #4]
 800941c:	2800      	cmp	r0, #0
 800941e:	d13b      	bne.n	8009498 <_dtoa_r+0x320>
 8009420:	4b11      	ldr	r3, [pc, #68]	; (8009468 <_dtoa_r+0x2f0>)
 8009422:	4602      	mov	r2, r0
 8009424:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009428:	e6c0      	b.n	80091ac <_dtoa_r+0x34>
 800942a:	2301      	movs	r3, #1
 800942c:	e7df      	b.n	80093ee <_dtoa_r+0x276>
 800942e:	bf00      	nop
 8009430:	636f4361 	.word	0x636f4361
 8009434:	3fd287a7 	.word	0x3fd287a7
 8009438:	8b60c8b3 	.word	0x8b60c8b3
 800943c:	3fc68a28 	.word	0x3fc68a28
 8009440:	509f79fb 	.word	0x509f79fb
 8009444:	3fd34413 	.word	0x3fd34413
 8009448:	0800b695 	.word	0x0800b695
 800944c:	0800b6ac 	.word	0x0800b6ac
 8009450:	7ff00000 	.word	0x7ff00000
 8009454:	0800b691 	.word	0x0800b691
 8009458:	0800b688 	.word	0x0800b688
 800945c:	0800b665 	.word	0x0800b665
 8009460:	3ff80000 	.word	0x3ff80000
 8009464:	0800b7a0 	.word	0x0800b7a0
 8009468:	0800b707 	.word	0x0800b707
 800946c:	2501      	movs	r5, #1
 800946e:	2300      	movs	r3, #0
 8009470:	9306      	str	r3, [sp, #24]
 8009472:	9508      	str	r5, [sp, #32]
 8009474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009478:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800947c:	2200      	movs	r2, #0
 800947e:	2312      	movs	r3, #18
 8009480:	e7b0      	b.n	80093e4 <_dtoa_r+0x26c>
 8009482:	2301      	movs	r3, #1
 8009484:	9308      	str	r3, [sp, #32]
 8009486:	e7f5      	b.n	8009474 <_dtoa_r+0x2fc>
 8009488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800948e:	e7b8      	b.n	8009402 <_dtoa_r+0x28a>
 8009490:	3101      	adds	r1, #1
 8009492:	6041      	str	r1, [r0, #4]
 8009494:	0052      	lsls	r2, r2, #1
 8009496:	e7b8      	b.n	800940a <_dtoa_r+0x292>
 8009498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800949a:	9a01      	ldr	r2, [sp, #4]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	2b0e      	cmp	r3, #14
 80094a2:	f200 809d 	bhi.w	80095e0 <_dtoa_r+0x468>
 80094a6:	2d00      	cmp	r5, #0
 80094a8:	f000 809a 	beq.w	80095e0 <_dtoa_r+0x468>
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dd32      	ble.n	8009518 <_dtoa_r+0x3a0>
 80094b2:	4ab7      	ldr	r2, [pc, #732]	; (8009790 <_dtoa_r+0x618>)
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094c0:	9b00      	ldr	r3, [sp, #0]
 80094c2:	05d8      	lsls	r0, r3, #23
 80094c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80094c8:	d516      	bpl.n	80094f8 <_dtoa_r+0x380>
 80094ca:	4bb2      	ldr	r3, [pc, #712]	; (8009794 <_dtoa_r+0x61c>)
 80094cc:	ec51 0b19 	vmov	r0, r1, d9
 80094d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094d4:	f7f7 f9ba 	bl	800084c <__aeabi_ddiv>
 80094d8:	f007 070f 	and.w	r7, r7, #15
 80094dc:	4682      	mov	sl, r0
 80094de:	468b      	mov	fp, r1
 80094e0:	2503      	movs	r5, #3
 80094e2:	4eac      	ldr	r6, [pc, #688]	; (8009794 <_dtoa_r+0x61c>)
 80094e4:	b957      	cbnz	r7, 80094fc <_dtoa_r+0x384>
 80094e6:	4642      	mov	r2, r8
 80094e8:	464b      	mov	r3, r9
 80094ea:	4650      	mov	r0, sl
 80094ec:	4659      	mov	r1, fp
 80094ee:	f7f7 f9ad 	bl	800084c <__aeabi_ddiv>
 80094f2:	4682      	mov	sl, r0
 80094f4:	468b      	mov	fp, r1
 80094f6:	e028      	b.n	800954a <_dtoa_r+0x3d2>
 80094f8:	2502      	movs	r5, #2
 80094fa:	e7f2      	b.n	80094e2 <_dtoa_r+0x36a>
 80094fc:	07f9      	lsls	r1, r7, #31
 80094fe:	d508      	bpl.n	8009512 <_dtoa_r+0x39a>
 8009500:	4640      	mov	r0, r8
 8009502:	4649      	mov	r1, r9
 8009504:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009508:	f7f7 f876 	bl	80005f8 <__aeabi_dmul>
 800950c:	3501      	adds	r5, #1
 800950e:	4680      	mov	r8, r0
 8009510:	4689      	mov	r9, r1
 8009512:	107f      	asrs	r7, r7, #1
 8009514:	3608      	adds	r6, #8
 8009516:	e7e5      	b.n	80094e4 <_dtoa_r+0x36c>
 8009518:	f000 809b 	beq.w	8009652 <_dtoa_r+0x4da>
 800951c:	9b00      	ldr	r3, [sp, #0]
 800951e:	4f9d      	ldr	r7, [pc, #628]	; (8009794 <_dtoa_r+0x61c>)
 8009520:	425e      	negs	r6, r3
 8009522:	4b9b      	ldr	r3, [pc, #620]	; (8009790 <_dtoa_r+0x618>)
 8009524:	f006 020f 	and.w	r2, r6, #15
 8009528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	ec51 0b19 	vmov	r0, r1, d9
 8009534:	f7f7 f860 	bl	80005f8 <__aeabi_dmul>
 8009538:	1136      	asrs	r6, r6, #4
 800953a:	4682      	mov	sl, r0
 800953c:	468b      	mov	fp, r1
 800953e:	2300      	movs	r3, #0
 8009540:	2502      	movs	r5, #2
 8009542:	2e00      	cmp	r6, #0
 8009544:	d17a      	bne.n	800963c <_dtoa_r+0x4c4>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1d3      	bne.n	80094f2 <_dtoa_r+0x37a>
 800954a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 8082 	beq.w	8009656 <_dtoa_r+0x4de>
 8009552:	4b91      	ldr	r3, [pc, #580]	; (8009798 <_dtoa_r+0x620>)
 8009554:	2200      	movs	r2, #0
 8009556:	4650      	mov	r0, sl
 8009558:	4659      	mov	r1, fp
 800955a:	f7f7 fabf 	bl	8000adc <__aeabi_dcmplt>
 800955e:	2800      	cmp	r0, #0
 8009560:	d079      	beq.n	8009656 <_dtoa_r+0x4de>
 8009562:	9b03      	ldr	r3, [sp, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d076      	beq.n	8009656 <_dtoa_r+0x4de>
 8009568:	9b02      	ldr	r3, [sp, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	dd36      	ble.n	80095dc <_dtoa_r+0x464>
 800956e:	9b00      	ldr	r3, [sp, #0]
 8009570:	4650      	mov	r0, sl
 8009572:	4659      	mov	r1, fp
 8009574:	1e5f      	subs	r7, r3, #1
 8009576:	2200      	movs	r2, #0
 8009578:	4b88      	ldr	r3, [pc, #544]	; (800979c <_dtoa_r+0x624>)
 800957a:	f7f7 f83d 	bl	80005f8 <__aeabi_dmul>
 800957e:	9e02      	ldr	r6, [sp, #8]
 8009580:	4682      	mov	sl, r0
 8009582:	468b      	mov	fp, r1
 8009584:	3501      	adds	r5, #1
 8009586:	4628      	mov	r0, r5
 8009588:	f7f6 ffcc 	bl	8000524 <__aeabi_i2d>
 800958c:	4652      	mov	r2, sl
 800958e:	465b      	mov	r3, fp
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	4b82      	ldr	r3, [pc, #520]	; (80097a0 <_dtoa_r+0x628>)
 8009596:	2200      	movs	r2, #0
 8009598:	f7f6 fe78 	bl	800028c <__adddf3>
 800959c:	46d0      	mov	r8, sl
 800959e:	46d9      	mov	r9, fp
 80095a0:	4682      	mov	sl, r0
 80095a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d158      	bne.n	800965c <_dtoa_r+0x4e4>
 80095aa:	4b7e      	ldr	r3, [pc, #504]	; (80097a4 <_dtoa_r+0x62c>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	4640      	mov	r0, r8
 80095b0:	4649      	mov	r1, r9
 80095b2:	f7f6 fe69 	bl	8000288 <__aeabi_dsub>
 80095b6:	4652      	mov	r2, sl
 80095b8:	465b      	mov	r3, fp
 80095ba:	4680      	mov	r8, r0
 80095bc:	4689      	mov	r9, r1
 80095be:	f7f7 faab 	bl	8000b18 <__aeabi_dcmpgt>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f040 8295 	bne.w	8009af2 <_dtoa_r+0x97a>
 80095c8:	4652      	mov	r2, sl
 80095ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095ce:	4640      	mov	r0, r8
 80095d0:	4649      	mov	r1, r9
 80095d2:	f7f7 fa83 	bl	8000adc <__aeabi_dcmplt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f040 8289 	bne.w	8009aee <_dtoa_r+0x976>
 80095dc:	ec5b ab19 	vmov	sl, fp, d9
 80095e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f2c0 8148 	blt.w	8009878 <_dtoa_r+0x700>
 80095e8:	9a00      	ldr	r2, [sp, #0]
 80095ea:	2a0e      	cmp	r2, #14
 80095ec:	f300 8144 	bgt.w	8009878 <_dtoa_r+0x700>
 80095f0:	4b67      	ldr	r3, [pc, #412]	; (8009790 <_dtoa_r+0x618>)
 80095f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f280 80d5 	bge.w	80097ac <_dtoa_r+0x634>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f300 80d1 	bgt.w	80097ac <_dtoa_r+0x634>
 800960a:	f040 826f 	bne.w	8009aec <_dtoa_r+0x974>
 800960e:	4b65      	ldr	r3, [pc, #404]	; (80097a4 <_dtoa_r+0x62c>)
 8009610:	2200      	movs	r2, #0
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f6 ffef 	bl	80005f8 <__aeabi_dmul>
 800961a:	4652      	mov	r2, sl
 800961c:	465b      	mov	r3, fp
 800961e:	f7f7 fa71 	bl	8000b04 <__aeabi_dcmpge>
 8009622:	9e03      	ldr	r6, [sp, #12]
 8009624:	4637      	mov	r7, r6
 8009626:	2800      	cmp	r0, #0
 8009628:	f040 8245 	bne.w	8009ab6 <_dtoa_r+0x93e>
 800962c:	9d01      	ldr	r5, [sp, #4]
 800962e:	2331      	movs	r3, #49	; 0x31
 8009630:	f805 3b01 	strb.w	r3, [r5], #1
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	3301      	adds	r3, #1
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	e240      	b.n	8009abe <_dtoa_r+0x946>
 800963c:	07f2      	lsls	r2, r6, #31
 800963e:	d505      	bpl.n	800964c <_dtoa_r+0x4d4>
 8009640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009644:	f7f6 ffd8 	bl	80005f8 <__aeabi_dmul>
 8009648:	3501      	adds	r5, #1
 800964a:	2301      	movs	r3, #1
 800964c:	1076      	asrs	r6, r6, #1
 800964e:	3708      	adds	r7, #8
 8009650:	e777      	b.n	8009542 <_dtoa_r+0x3ca>
 8009652:	2502      	movs	r5, #2
 8009654:	e779      	b.n	800954a <_dtoa_r+0x3d2>
 8009656:	9f00      	ldr	r7, [sp, #0]
 8009658:	9e03      	ldr	r6, [sp, #12]
 800965a:	e794      	b.n	8009586 <_dtoa_r+0x40e>
 800965c:	9901      	ldr	r1, [sp, #4]
 800965e:	4b4c      	ldr	r3, [pc, #304]	; (8009790 <_dtoa_r+0x618>)
 8009660:	4431      	add	r1, r6
 8009662:	910d      	str	r1, [sp, #52]	; 0x34
 8009664:	9908      	ldr	r1, [sp, #32]
 8009666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800966a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800966e:	2900      	cmp	r1, #0
 8009670:	d043      	beq.n	80096fa <_dtoa_r+0x582>
 8009672:	494d      	ldr	r1, [pc, #308]	; (80097a8 <_dtoa_r+0x630>)
 8009674:	2000      	movs	r0, #0
 8009676:	f7f7 f8e9 	bl	800084c <__aeabi_ddiv>
 800967a:	4652      	mov	r2, sl
 800967c:	465b      	mov	r3, fp
 800967e:	f7f6 fe03 	bl	8000288 <__aeabi_dsub>
 8009682:	9d01      	ldr	r5, [sp, #4]
 8009684:	4682      	mov	sl, r0
 8009686:	468b      	mov	fp, r1
 8009688:	4649      	mov	r1, r9
 800968a:	4640      	mov	r0, r8
 800968c:	f7f7 fa64 	bl	8000b58 <__aeabi_d2iz>
 8009690:	4606      	mov	r6, r0
 8009692:	f7f6 ff47 	bl	8000524 <__aeabi_i2d>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4640      	mov	r0, r8
 800969c:	4649      	mov	r1, r9
 800969e:	f7f6 fdf3 	bl	8000288 <__aeabi_dsub>
 80096a2:	3630      	adds	r6, #48	; 0x30
 80096a4:	f805 6b01 	strb.w	r6, [r5], #1
 80096a8:	4652      	mov	r2, sl
 80096aa:	465b      	mov	r3, fp
 80096ac:	4680      	mov	r8, r0
 80096ae:	4689      	mov	r9, r1
 80096b0:	f7f7 fa14 	bl	8000adc <__aeabi_dcmplt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d163      	bne.n	8009780 <_dtoa_r+0x608>
 80096b8:	4642      	mov	r2, r8
 80096ba:	464b      	mov	r3, r9
 80096bc:	4936      	ldr	r1, [pc, #216]	; (8009798 <_dtoa_r+0x620>)
 80096be:	2000      	movs	r0, #0
 80096c0:	f7f6 fde2 	bl	8000288 <__aeabi_dsub>
 80096c4:	4652      	mov	r2, sl
 80096c6:	465b      	mov	r3, fp
 80096c8:	f7f7 fa08 	bl	8000adc <__aeabi_dcmplt>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	f040 80b5 	bne.w	800983c <_dtoa_r+0x6c4>
 80096d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096d4:	429d      	cmp	r5, r3
 80096d6:	d081      	beq.n	80095dc <_dtoa_r+0x464>
 80096d8:	4b30      	ldr	r3, [pc, #192]	; (800979c <_dtoa_r+0x624>)
 80096da:	2200      	movs	r2, #0
 80096dc:	4650      	mov	r0, sl
 80096de:	4659      	mov	r1, fp
 80096e0:	f7f6 ff8a 	bl	80005f8 <__aeabi_dmul>
 80096e4:	4b2d      	ldr	r3, [pc, #180]	; (800979c <_dtoa_r+0x624>)
 80096e6:	4682      	mov	sl, r0
 80096e8:	468b      	mov	fp, r1
 80096ea:	4640      	mov	r0, r8
 80096ec:	4649      	mov	r1, r9
 80096ee:	2200      	movs	r2, #0
 80096f0:	f7f6 ff82 	bl	80005f8 <__aeabi_dmul>
 80096f4:	4680      	mov	r8, r0
 80096f6:	4689      	mov	r9, r1
 80096f8:	e7c6      	b.n	8009688 <_dtoa_r+0x510>
 80096fa:	4650      	mov	r0, sl
 80096fc:	4659      	mov	r1, fp
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009704:	9d01      	ldr	r5, [sp, #4]
 8009706:	930f      	str	r3, [sp, #60]	; 0x3c
 8009708:	4682      	mov	sl, r0
 800970a:	468b      	mov	fp, r1
 800970c:	4649      	mov	r1, r9
 800970e:	4640      	mov	r0, r8
 8009710:	f7f7 fa22 	bl	8000b58 <__aeabi_d2iz>
 8009714:	4606      	mov	r6, r0
 8009716:	f7f6 ff05 	bl	8000524 <__aeabi_i2d>
 800971a:	3630      	adds	r6, #48	; 0x30
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4640      	mov	r0, r8
 8009722:	4649      	mov	r1, r9
 8009724:	f7f6 fdb0 	bl	8000288 <__aeabi_dsub>
 8009728:	f805 6b01 	strb.w	r6, [r5], #1
 800972c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800972e:	429d      	cmp	r5, r3
 8009730:	4680      	mov	r8, r0
 8009732:	4689      	mov	r9, r1
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	d124      	bne.n	8009784 <_dtoa_r+0x60c>
 800973a:	4b1b      	ldr	r3, [pc, #108]	; (80097a8 <_dtoa_r+0x630>)
 800973c:	4650      	mov	r0, sl
 800973e:	4659      	mov	r1, fp
 8009740:	f7f6 fda4 	bl	800028c <__adddf3>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4640      	mov	r0, r8
 800974a:	4649      	mov	r1, r9
 800974c:	f7f7 f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8009750:	2800      	cmp	r0, #0
 8009752:	d173      	bne.n	800983c <_dtoa_r+0x6c4>
 8009754:	4652      	mov	r2, sl
 8009756:	465b      	mov	r3, fp
 8009758:	4913      	ldr	r1, [pc, #76]	; (80097a8 <_dtoa_r+0x630>)
 800975a:	2000      	movs	r0, #0
 800975c:	f7f6 fd94 	bl	8000288 <__aeabi_dsub>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4640      	mov	r0, r8
 8009766:	4649      	mov	r1, r9
 8009768:	f7f7 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800976c:	2800      	cmp	r0, #0
 800976e:	f43f af35 	beq.w	80095dc <_dtoa_r+0x464>
 8009772:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009774:	1e6b      	subs	r3, r5, #1
 8009776:	930f      	str	r3, [sp, #60]	; 0x3c
 8009778:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800977c:	2b30      	cmp	r3, #48	; 0x30
 800977e:	d0f8      	beq.n	8009772 <_dtoa_r+0x5fa>
 8009780:	9700      	str	r7, [sp, #0]
 8009782:	e049      	b.n	8009818 <_dtoa_r+0x6a0>
 8009784:	4b05      	ldr	r3, [pc, #20]	; (800979c <_dtoa_r+0x624>)
 8009786:	f7f6 ff37 	bl	80005f8 <__aeabi_dmul>
 800978a:	4680      	mov	r8, r0
 800978c:	4689      	mov	r9, r1
 800978e:	e7bd      	b.n	800970c <_dtoa_r+0x594>
 8009790:	0800b7a0 	.word	0x0800b7a0
 8009794:	0800b778 	.word	0x0800b778
 8009798:	3ff00000 	.word	0x3ff00000
 800979c:	40240000 	.word	0x40240000
 80097a0:	401c0000 	.word	0x401c0000
 80097a4:	40140000 	.word	0x40140000
 80097a8:	3fe00000 	.word	0x3fe00000
 80097ac:	9d01      	ldr	r5, [sp, #4]
 80097ae:	4656      	mov	r6, sl
 80097b0:	465f      	mov	r7, fp
 80097b2:	4642      	mov	r2, r8
 80097b4:	464b      	mov	r3, r9
 80097b6:	4630      	mov	r0, r6
 80097b8:	4639      	mov	r1, r7
 80097ba:	f7f7 f847 	bl	800084c <__aeabi_ddiv>
 80097be:	f7f7 f9cb 	bl	8000b58 <__aeabi_d2iz>
 80097c2:	4682      	mov	sl, r0
 80097c4:	f7f6 feae 	bl	8000524 <__aeabi_i2d>
 80097c8:	4642      	mov	r2, r8
 80097ca:	464b      	mov	r3, r9
 80097cc:	f7f6 ff14 	bl	80005f8 <__aeabi_dmul>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4630      	mov	r0, r6
 80097d6:	4639      	mov	r1, r7
 80097d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80097dc:	f7f6 fd54 	bl	8000288 <__aeabi_dsub>
 80097e0:	f805 6b01 	strb.w	r6, [r5], #1
 80097e4:	9e01      	ldr	r6, [sp, #4]
 80097e6:	9f03      	ldr	r7, [sp, #12]
 80097e8:	1bae      	subs	r6, r5, r6
 80097ea:	42b7      	cmp	r7, r6
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	d135      	bne.n	800985e <_dtoa_r+0x6e6>
 80097f2:	f7f6 fd4b 	bl	800028c <__adddf3>
 80097f6:	4642      	mov	r2, r8
 80097f8:	464b      	mov	r3, r9
 80097fa:	4606      	mov	r6, r0
 80097fc:	460f      	mov	r7, r1
 80097fe:	f7f7 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8009802:	b9d0      	cbnz	r0, 800983a <_dtoa_r+0x6c2>
 8009804:	4642      	mov	r2, r8
 8009806:	464b      	mov	r3, r9
 8009808:	4630      	mov	r0, r6
 800980a:	4639      	mov	r1, r7
 800980c:	f7f7 f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009810:	b110      	cbz	r0, 8009818 <_dtoa_r+0x6a0>
 8009812:	f01a 0f01 	tst.w	sl, #1
 8009816:	d110      	bne.n	800983a <_dtoa_r+0x6c2>
 8009818:	4620      	mov	r0, r4
 800981a:	ee18 1a10 	vmov	r1, s16
 800981e:	f000 faf3 	bl	8009e08 <_Bfree>
 8009822:	2300      	movs	r3, #0
 8009824:	9800      	ldr	r0, [sp, #0]
 8009826:	702b      	strb	r3, [r5, #0]
 8009828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800982a:	3001      	adds	r0, #1
 800982c:	6018      	str	r0, [r3, #0]
 800982e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009830:	2b00      	cmp	r3, #0
 8009832:	f43f acf1 	beq.w	8009218 <_dtoa_r+0xa0>
 8009836:	601d      	str	r5, [r3, #0]
 8009838:	e4ee      	b.n	8009218 <_dtoa_r+0xa0>
 800983a:	9f00      	ldr	r7, [sp, #0]
 800983c:	462b      	mov	r3, r5
 800983e:	461d      	mov	r5, r3
 8009840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009844:	2a39      	cmp	r2, #57	; 0x39
 8009846:	d106      	bne.n	8009856 <_dtoa_r+0x6de>
 8009848:	9a01      	ldr	r2, [sp, #4]
 800984a:	429a      	cmp	r2, r3
 800984c:	d1f7      	bne.n	800983e <_dtoa_r+0x6c6>
 800984e:	9901      	ldr	r1, [sp, #4]
 8009850:	2230      	movs	r2, #48	; 0x30
 8009852:	3701      	adds	r7, #1
 8009854:	700a      	strb	r2, [r1, #0]
 8009856:	781a      	ldrb	r2, [r3, #0]
 8009858:	3201      	adds	r2, #1
 800985a:	701a      	strb	r2, [r3, #0]
 800985c:	e790      	b.n	8009780 <_dtoa_r+0x608>
 800985e:	4ba6      	ldr	r3, [pc, #664]	; (8009af8 <_dtoa_r+0x980>)
 8009860:	2200      	movs	r2, #0
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	2200      	movs	r2, #0
 8009868:	2300      	movs	r3, #0
 800986a:	4606      	mov	r6, r0
 800986c:	460f      	mov	r7, r1
 800986e:	f7f7 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009872:	2800      	cmp	r0, #0
 8009874:	d09d      	beq.n	80097b2 <_dtoa_r+0x63a>
 8009876:	e7cf      	b.n	8009818 <_dtoa_r+0x6a0>
 8009878:	9a08      	ldr	r2, [sp, #32]
 800987a:	2a00      	cmp	r2, #0
 800987c:	f000 80d7 	beq.w	8009a2e <_dtoa_r+0x8b6>
 8009880:	9a06      	ldr	r2, [sp, #24]
 8009882:	2a01      	cmp	r2, #1
 8009884:	f300 80ba 	bgt.w	80099fc <_dtoa_r+0x884>
 8009888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800988a:	2a00      	cmp	r2, #0
 800988c:	f000 80b2 	beq.w	80099f4 <_dtoa_r+0x87c>
 8009890:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009894:	9e07      	ldr	r6, [sp, #28]
 8009896:	9d04      	ldr	r5, [sp, #16]
 8009898:	9a04      	ldr	r2, [sp, #16]
 800989a:	441a      	add	r2, r3
 800989c:	9204      	str	r2, [sp, #16]
 800989e:	9a05      	ldr	r2, [sp, #20]
 80098a0:	2101      	movs	r1, #1
 80098a2:	441a      	add	r2, r3
 80098a4:	4620      	mov	r0, r4
 80098a6:	9205      	str	r2, [sp, #20]
 80098a8:	f000 fb66 	bl	8009f78 <__i2b>
 80098ac:	4607      	mov	r7, r0
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	dd0c      	ble.n	80098cc <_dtoa_r+0x754>
 80098b2:	9b05      	ldr	r3, [sp, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dd09      	ble.n	80098cc <_dtoa_r+0x754>
 80098b8:	42ab      	cmp	r3, r5
 80098ba:	9a04      	ldr	r2, [sp, #16]
 80098bc:	bfa8      	it	ge
 80098be:	462b      	movge	r3, r5
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	9204      	str	r2, [sp, #16]
 80098c4:	9a05      	ldr	r2, [sp, #20]
 80098c6:	1aed      	subs	r5, r5, r3
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	9305      	str	r3, [sp, #20]
 80098cc:	9b07      	ldr	r3, [sp, #28]
 80098ce:	b31b      	cbz	r3, 8009918 <_dtoa_r+0x7a0>
 80098d0:	9b08      	ldr	r3, [sp, #32]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 80af 	beq.w	8009a36 <_dtoa_r+0x8be>
 80098d8:	2e00      	cmp	r6, #0
 80098da:	dd13      	ble.n	8009904 <_dtoa_r+0x78c>
 80098dc:	4639      	mov	r1, r7
 80098de:	4632      	mov	r2, r6
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 fc09 	bl	800a0f8 <__pow5mult>
 80098e6:	ee18 2a10 	vmov	r2, s16
 80098ea:	4601      	mov	r1, r0
 80098ec:	4607      	mov	r7, r0
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 fb58 	bl	8009fa4 <__multiply>
 80098f4:	ee18 1a10 	vmov	r1, s16
 80098f8:	4680      	mov	r8, r0
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 fa84 	bl	8009e08 <_Bfree>
 8009900:	ee08 8a10 	vmov	s16, r8
 8009904:	9b07      	ldr	r3, [sp, #28]
 8009906:	1b9a      	subs	r2, r3, r6
 8009908:	d006      	beq.n	8009918 <_dtoa_r+0x7a0>
 800990a:	ee18 1a10 	vmov	r1, s16
 800990e:	4620      	mov	r0, r4
 8009910:	f000 fbf2 	bl	800a0f8 <__pow5mult>
 8009914:	ee08 0a10 	vmov	s16, r0
 8009918:	2101      	movs	r1, #1
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fb2c 	bl	8009f78 <__i2b>
 8009920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009922:	2b00      	cmp	r3, #0
 8009924:	4606      	mov	r6, r0
 8009926:	f340 8088 	ble.w	8009a3a <_dtoa_r+0x8c2>
 800992a:	461a      	mov	r2, r3
 800992c:	4601      	mov	r1, r0
 800992e:	4620      	mov	r0, r4
 8009930:	f000 fbe2 	bl	800a0f8 <__pow5mult>
 8009934:	9b06      	ldr	r3, [sp, #24]
 8009936:	2b01      	cmp	r3, #1
 8009938:	4606      	mov	r6, r0
 800993a:	f340 8081 	ble.w	8009a40 <_dtoa_r+0x8c8>
 800993e:	f04f 0800 	mov.w	r8, #0
 8009942:	6933      	ldr	r3, [r6, #16]
 8009944:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009948:	6918      	ldr	r0, [r3, #16]
 800994a:	f000 fac5 	bl	8009ed8 <__hi0bits>
 800994e:	f1c0 0020 	rsb	r0, r0, #32
 8009952:	9b05      	ldr	r3, [sp, #20]
 8009954:	4418      	add	r0, r3
 8009956:	f010 001f 	ands.w	r0, r0, #31
 800995a:	f000 8092 	beq.w	8009a82 <_dtoa_r+0x90a>
 800995e:	f1c0 0320 	rsb	r3, r0, #32
 8009962:	2b04      	cmp	r3, #4
 8009964:	f340 808a 	ble.w	8009a7c <_dtoa_r+0x904>
 8009968:	f1c0 001c 	rsb	r0, r0, #28
 800996c:	9b04      	ldr	r3, [sp, #16]
 800996e:	4403      	add	r3, r0
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	4403      	add	r3, r0
 8009976:	4405      	add	r5, r0
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	9b04      	ldr	r3, [sp, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	dd07      	ble.n	8009990 <_dtoa_r+0x818>
 8009980:	ee18 1a10 	vmov	r1, s16
 8009984:	461a      	mov	r2, r3
 8009986:	4620      	mov	r0, r4
 8009988:	f000 fc10 	bl	800a1ac <__lshift>
 800998c:	ee08 0a10 	vmov	s16, r0
 8009990:	9b05      	ldr	r3, [sp, #20]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dd05      	ble.n	80099a2 <_dtoa_r+0x82a>
 8009996:	4631      	mov	r1, r6
 8009998:	461a      	mov	r2, r3
 800999a:	4620      	mov	r0, r4
 800999c:	f000 fc06 	bl	800a1ac <__lshift>
 80099a0:	4606      	mov	r6, r0
 80099a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d06e      	beq.n	8009a86 <_dtoa_r+0x90e>
 80099a8:	ee18 0a10 	vmov	r0, s16
 80099ac:	4631      	mov	r1, r6
 80099ae:	f000 fc6d 	bl	800a28c <__mcmp>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	da67      	bge.n	8009a86 <_dtoa_r+0x90e>
 80099b6:	9b00      	ldr	r3, [sp, #0]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	ee18 1a10 	vmov	r1, s16
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	220a      	movs	r2, #10
 80099c2:	2300      	movs	r3, #0
 80099c4:	4620      	mov	r0, r4
 80099c6:	f000 fa41 	bl	8009e4c <__multadd>
 80099ca:	9b08      	ldr	r3, [sp, #32]
 80099cc:	ee08 0a10 	vmov	s16, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 81b1 	beq.w	8009d38 <_dtoa_r+0xbc0>
 80099d6:	2300      	movs	r3, #0
 80099d8:	4639      	mov	r1, r7
 80099da:	220a      	movs	r2, #10
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 fa35 	bl	8009e4c <__multadd>
 80099e2:	9b02      	ldr	r3, [sp, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	4607      	mov	r7, r0
 80099e8:	f300 808e 	bgt.w	8009b08 <_dtoa_r+0x990>
 80099ec:	9b06      	ldr	r3, [sp, #24]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	dc51      	bgt.n	8009a96 <_dtoa_r+0x91e>
 80099f2:	e089      	b.n	8009b08 <_dtoa_r+0x990>
 80099f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099fa:	e74b      	b.n	8009894 <_dtoa_r+0x71c>
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	1e5e      	subs	r6, r3, #1
 8009a00:	9b07      	ldr	r3, [sp, #28]
 8009a02:	42b3      	cmp	r3, r6
 8009a04:	bfbf      	itttt	lt
 8009a06:	9b07      	ldrlt	r3, [sp, #28]
 8009a08:	9607      	strlt	r6, [sp, #28]
 8009a0a:	1af2      	sublt	r2, r6, r3
 8009a0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009a0e:	bfb6      	itet	lt
 8009a10:	189b      	addlt	r3, r3, r2
 8009a12:	1b9e      	subge	r6, r3, r6
 8009a14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	bfb8      	it	lt
 8009a1a:	2600      	movlt	r6, #0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfb7      	itett	lt
 8009a20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009a24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009a28:	1a9d      	sublt	r5, r3, r2
 8009a2a:	2300      	movlt	r3, #0
 8009a2c:	e734      	b.n	8009898 <_dtoa_r+0x720>
 8009a2e:	9e07      	ldr	r6, [sp, #28]
 8009a30:	9d04      	ldr	r5, [sp, #16]
 8009a32:	9f08      	ldr	r7, [sp, #32]
 8009a34:	e73b      	b.n	80098ae <_dtoa_r+0x736>
 8009a36:	9a07      	ldr	r2, [sp, #28]
 8009a38:	e767      	b.n	800990a <_dtoa_r+0x792>
 8009a3a:	9b06      	ldr	r3, [sp, #24]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	dc18      	bgt.n	8009a72 <_dtoa_r+0x8fa>
 8009a40:	f1ba 0f00 	cmp.w	sl, #0
 8009a44:	d115      	bne.n	8009a72 <_dtoa_r+0x8fa>
 8009a46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a4a:	b993      	cbnz	r3, 8009a72 <_dtoa_r+0x8fa>
 8009a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a50:	0d1b      	lsrs	r3, r3, #20
 8009a52:	051b      	lsls	r3, r3, #20
 8009a54:	b183      	cbz	r3, 8009a78 <_dtoa_r+0x900>
 8009a56:	9b04      	ldr	r3, [sp, #16]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	9304      	str	r3, [sp, #16]
 8009a5c:	9b05      	ldr	r3, [sp, #20]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	9305      	str	r3, [sp, #20]
 8009a62:	f04f 0801 	mov.w	r8, #1
 8009a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f47f af6a 	bne.w	8009942 <_dtoa_r+0x7ca>
 8009a6e:	2001      	movs	r0, #1
 8009a70:	e76f      	b.n	8009952 <_dtoa_r+0x7da>
 8009a72:	f04f 0800 	mov.w	r8, #0
 8009a76:	e7f6      	b.n	8009a66 <_dtoa_r+0x8ee>
 8009a78:	4698      	mov	r8, r3
 8009a7a:	e7f4      	b.n	8009a66 <_dtoa_r+0x8ee>
 8009a7c:	f43f af7d 	beq.w	800997a <_dtoa_r+0x802>
 8009a80:	4618      	mov	r0, r3
 8009a82:	301c      	adds	r0, #28
 8009a84:	e772      	b.n	800996c <_dtoa_r+0x7f4>
 8009a86:	9b03      	ldr	r3, [sp, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	dc37      	bgt.n	8009afc <_dtoa_r+0x984>
 8009a8c:	9b06      	ldr	r3, [sp, #24]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	dd34      	ble.n	8009afc <_dtoa_r+0x984>
 8009a92:	9b03      	ldr	r3, [sp, #12]
 8009a94:	9302      	str	r3, [sp, #8]
 8009a96:	9b02      	ldr	r3, [sp, #8]
 8009a98:	b96b      	cbnz	r3, 8009ab6 <_dtoa_r+0x93e>
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	2205      	movs	r2, #5
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f9d4 	bl	8009e4c <__multadd>
 8009aa4:	4601      	mov	r1, r0
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	ee18 0a10 	vmov	r0, s16
 8009aac:	f000 fbee 	bl	800a28c <__mcmp>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	f73f adbb 	bgt.w	800962c <_dtoa_r+0x4b4>
 8009ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab8:	9d01      	ldr	r5, [sp, #4]
 8009aba:	43db      	mvns	r3, r3
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	f04f 0800 	mov.w	r8, #0
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 f99f 	bl	8009e08 <_Bfree>
 8009aca:	2f00      	cmp	r7, #0
 8009acc:	f43f aea4 	beq.w	8009818 <_dtoa_r+0x6a0>
 8009ad0:	f1b8 0f00 	cmp.w	r8, #0
 8009ad4:	d005      	beq.n	8009ae2 <_dtoa_r+0x96a>
 8009ad6:	45b8      	cmp	r8, r7
 8009ad8:	d003      	beq.n	8009ae2 <_dtoa_r+0x96a>
 8009ada:	4641      	mov	r1, r8
 8009adc:	4620      	mov	r0, r4
 8009ade:	f000 f993 	bl	8009e08 <_Bfree>
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 f98f 	bl	8009e08 <_Bfree>
 8009aea:	e695      	b.n	8009818 <_dtoa_r+0x6a0>
 8009aec:	2600      	movs	r6, #0
 8009aee:	4637      	mov	r7, r6
 8009af0:	e7e1      	b.n	8009ab6 <_dtoa_r+0x93e>
 8009af2:	9700      	str	r7, [sp, #0]
 8009af4:	4637      	mov	r7, r6
 8009af6:	e599      	b.n	800962c <_dtoa_r+0x4b4>
 8009af8:	40240000 	.word	0x40240000
 8009afc:	9b08      	ldr	r3, [sp, #32]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 80ca 	beq.w	8009c98 <_dtoa_r+0xb20>
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	9302      	str	r3, [sp, #8]
 8009b08:	2d00      	cmp	r5, #0
 8009b0a:	dd05      	ble.n	8009b18 <_dtoa_r+0x9a0>
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	462a      	mov	r2, r5
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fb4b 	bl	800a1ac <__lshift>
 8009b16:	4607      	mov	r7, r0
 8009b18:	f1b8 0f00 	cmp.w	r8, #0
 8009b1c:	d05b      	beq.n	8009bd6 <_dtoa_r+0xa5e>
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 f931 	bl	8009d88 <_Balloc>
 8009b26:	4605      	mov	r5, r0
 8009b28:	b928      	cbnz	r0, 8009b36 <_dtoa_r+0x9be>
 8009b2a:	4b87      	ldr	r3, [pc, #540]	; (8009d48 <_dtoa_r+0xbd0>)
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b32:	f7ff bb3b 	b.w	80091ac <_dtoa_r+0x34>
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	3202      	adds	r2, #2
 8009b3a:	0092      	lsls	r2, r2, #2
 8009b3c:	f107 010c 	add.w	r1, r7, #12
 8009b40:	300c      	adds	r0, #12
 8009b42:	f000 f913 	bl	8009d6c <memcpy>
 8009b46:	2201      	movs	r2, #1
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 fb2e 	bl	800a1ac <__lshift>
 8009b50:	9b01      	ldr	r3, [sp, #4]
 8009b52:	f103 0901 	add.w	r9, r3, #1
 8009b56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	9305      	str	r3, [sp, #20]
 8009b5e:	f00a 0301 	and.w	r3, sl, #1
 8009b62:	46b8      	mov	r8, r7
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	4607      	mov	r7, r0
 8009b68:	4631      	mov	r1, r6
 8009b6a:	ee18 0a10 	vmov	r0, s16
 8009b6e:	f7ff fa77 	bl	8009060 <quorem>
 8009b72:	4641      	mov	r1, r8
 8009b74:	9002      	str	r0, [sp, #8]
 8009b76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b7a:	ee18 0a10 	vmov	r0, s16
 8009b7e:	f000 fb85 	bl	800a28c <__mcmp>
 8009b82:	463a      	mov	r2, r7
 8009b84:	9003      	str	r0, [sp, #12]
 8009b86:	4631      	mov	r1, r6
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 fb9b 	bl	800a2c4 <__mdiff>
 8009b8e:	68c2      	ldr	r2, [r0, #12]
 8009b90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009b94:	4605      	mov	r5, r0
 8009b96:	bb02      	cbnz	r2, 8009bda <_dtoa_r+0xa62>
 8009b98:	4601      	mov	r1, r0
 8009b9a:	ee18 0a10 	vmov	r0, s16
 8009b9e:	f000 fb75 	bl	800a28c <__mcmp>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	9207      	str	r2, [sp, #28]
 8009baa:	f000 f92d 	bl	8009e08 <_Bfree>
 8009bae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009bb2:	ea43 0102 	orr.w	r1, r3, r2
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	430b      	orrs	r3, r1
 8009bba:	464d      	mov	r5, r9
 8009bbc:	d10f      	bne.n	8009bde <_dtoa_r+0xa66>
 8009bbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bc2:	d02a      	beq.n	8009c1a <_dtoa_r+0xaa2>
 8009bc4:	9b03      	ldr	r3, [sp, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	dd02      	ble.n	8009bd0 <_dtoa_r+0xa58>
 8009bca:	9b02      	ldr	r3, [sp, #8]
 8009bcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009bd0:	f88b a000 	strb.w	sl, [fp]
 8009bd4:	e775      	b.n	8009ac2 <_dtoa_r+0x94a>
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	e7ba      	b.n	8009b50 <_dtoa_r+0x9d8>
 8009bda:	2201      	movs	r2, #1
 8009bdc:	e7e2      	b.n	8009ba4 <_dtoa_r+0xa2c>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	db04      	blt.n	8009bee <_dtoa_r+0xa76>
 8009be4:	9906      	ldr	r1, [sp, #24]
 8009be6:	430b      	orrs	r3, r1
 8009be8:	9904      	ldr	r1, [sp, #16]
 8009bea:	430b      	orrs	r3, r1
 8009bec:	d122      	bne.n	8009c34 <_dtoa_r+0xabc>
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	ddee      	ble.n	8009bd0 <_dtoa_r+0xa58>
 8009bf2:	ee18 1a10 	vmov	r1, s16
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f000 fad7 	bl	800a1ac <__lshift>
 8009bfe:	4631      	mov	r1, r6
 8009c00:	ee08 0a10 	vmov	s16, r0
 8009c04:	f000 fb42 	bl	800a28c <__mcmp>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	dc03      	bgt.n	8009c14 <_dtoa_r+0xa9c>
 8009c0c:	d1e0      	bne.n	8009bd0 <_dtoa_r+0xa58>
 8009c0e:	f01a 0f01 	tst.w	sl, #1
 8009c12:	d0dd      	beq.n	8009bd0 <_dtoa_r+0xa58>
 8009c14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c18:	d1d7      	bne.n	8009bca <_dtoa_r+0xa52>
 8009c1a:	2339      	movs	r3, #57	; 0x39
 8009c1c:	f88b 3000 	strb.w	r3, [fp]
 8009c20:	462b      	mov	r3, r5
 8009c22:	461d      	mov	r5, r3
 8009c24:	3b01      	subs	r3, #1
 8009c26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c2a:	2a39      	cmp	r2, #57	; 0x39
 8009c2c:	d071      	beq.n	8009d12 <_dtoa_r+0xb9a>
 8009c2e:	3201      	adds	r2, #1
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	e746      	b.n	8009ac2 <_dtoa_r+0x94a>
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	dd07      	ble.n	8009c48 <_dtoa_r+0xad0>
 8009c38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c3c:	d0ed      	beq.n	8009c1a <_dtoa_r+0xaa2>
 8009c3e:	f10a 0301 	add.w	r3, sl, #1
 8009c42:	f88b 3000 	strb.w	r3, [fp]
 8009c46:	e73c      	b.n	8009ac2 <_dtoa_r+0x94a>
 8009c48:	9b05      	ldr	r3, [sp, #20]
 8009c4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009c4e:	4599      	cmp	r9, r3
 8009c50:	d047      	beq.n	8009ce2 <_dtoa_r+0xb6a>
 8009c52:	ee18 1a10 	vmov	r1, s16
 8009c56:	2300      	movs	r3, #0
 8009c58:	220a      	movs	r2, #10
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f8f6 	bl	8009e4c <__multadd>
 8009c60:	45b8      	cmp	r8, r7
 8009c62:	ee08 0a10 	vmov	s16, r0
 8009c66:	f04f 0300 	mov.w	r3, #0
 8009c6a:	f04f 020a 	mov.w	r2, #10
 8009c6e:	4641      	mov	r1, r8
 8009c70:	4620      	mov	r0, r4
 8009c72:	d106      	bne.n	8009c82 <_dtoa_r+0xb0a>
 8009c74:	f000 f8ea 	bl	8009e4c <__multadd>
 8009c78:	4680      	mov	r8, r0
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	f109 0901 	add.w	r9, r9, #1
 8009c80:	e772      	b.n	8009b68 <_dtoa_r+0x9f0>
 8009c82:	f000 f8e3 	bl	8009e4c <__multadd>
 8009c86:	4639      	mov	r1, r7
 8009c88:	4680      	mov	r8, r0
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f8dc 	bl	8009e4c <__multadd>
 8009c94:	4607      	mov	r7, r0
 8009c96:	e7f1      	b.n	8009c7c <_dtoa_r+0xb04>
 8009c98:	9b03      	ldr	r3, [sp, #12]
 8009c9a:	9302      	str	r3, [sp, #8]
 8009c9c:	9d01      	ldr	r5, [sp, #4]
 8009c9e:	ee18 0a10 	vmov	r0, s16
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	f7ff f9dc 	bl	8009060 <quorem>
 8009ca8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009cac:	9b01      	ldr	r3, [sp, #4]
 8009cae:	f805 ab01 	strb.w	sl, [r5], #1
 8009cb2:	1aea      	subs	r2, r5, r3
 8009cb4:	9b02      	ldr	r3, [sp, #8]
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	dd09      	ble.n	8009cce <_dtoa_r+0xb56>
 8009cba:	ee18 1a10 	vmov	r1, s16
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 f8c2 	bl	8009e4c <__multadd>
 8009cc8:	ee08 0a10 	vmov	s16, r0
 8009ccc:	e7e7      	b.n	8009c9e <_dtoa_r+0xb26>
 8009cce:	9b02      	ldr	r3, [sp, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bfc8      	it	gt
 8009cd4:	461d      	movgt	r5, r3
 8009cd6:	9b01      	ldr	r3, [sp, #4]
 8009cd8:	bfd8      	it	le
 8009cda:	2501      	movle	r5, #1
 8009cdc:	441d      	add	r5, r3
 8009cde:	f04f 0800 	mov.w	r8, #0
 8009ce2:	ee18 1a10 	vmov	r1, s16
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 fa5f 	bl	800a1ac <__lshift>
 8009cee:	4631      	mov	r1, r6
 8009cf0:	ee08 0a10 	vmov	s16, r0
 8009cf4:	f000 faca 	bl	800a28c <__mcmp>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	dc91      	bgt.n	8009c20 <_dtoa_r+0xaa8>
 8009cfc:	d102      	bne.n	8009d04 <_dtoa_r+0xb8c>
 8009cfe:	f01a 0f01 	tst.w	sl, #1
 8009d02:	d18d      	bne.n	8009c20 <_dtoa_r+0xaa8>
 8009d04:	462b      	mov	r3, r5
 8009d06:	461d      	mov	r5, r3
 8009d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d0c:	2a30      	cmp	r2, #48	; 0x30
 8009d0e:	d0fa      	beq.n	8009d06 <_dtoa_r+0xb8e>
 8009d10:	e6d7      	b.n	8009ac2 <_dtoa_r+0x94a>
 8009d12:	9a01      	ldr	r2, [sp, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d184      	bne.n	8009c22 <_dtoa_r+0xaaa>
 8009d18:	9b00      	ldr	r3, [sp, #0]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	2331      	movs	r3, #49	; 0x31
 8009d20:	7013      	strb	r3, [r2, #0]
 8009d22:	e6ce      	b.n	8009ac2 <_dtoa_r+0x94a>
 8009d24:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <_dtoa_r+0xbd4>)
 8009d26:	f7ff ba95 	b.w	8009254 <_dtoa_r+0xdc>
 8009d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f47f aa6e 	bne.w	800920e <_dtoa_r+0x96>
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <_dtoa_r+0xbd8>)
 8009d34:	f7ff ba8e 	b.w	8009254 <_dtoa_r+0xdc>
 8009d38:	9b02      	ldr	r3, [sp, #8]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	dcae      	bgt.n	8009c9c <_dtoa_r+0xb24>
 8009d3e:	9b06      	ldr	r3, [sp, #24]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	f73f aea8 	bgt.w	8009a96 <_dtoa_r+0x91e>
 8009d46:	e7a9      	b.n	8009c9c <_dtoa_r+0xb24>
 8009d48:	0800b707 	.word	0x0800b707
 8009d4c:	0800b664 	.word	0x0800b664
 8009d50:	0800b688 	.word	0x0800b688

08009d54 <_localeconv_r>:
 8009d54:	4800      	ldr	r0, [pc, #0]	; (8009d58 <_localeconv_r+0x4>)
 8009d56:	4770      	bx	lr
 8009d58:	20000160 	.word	0x20000160

08009d5c <malloc>:
 8009d5c:	4b02      	ldr	r3, [pc, #8]	; (8009d68 <malloc+0xc>)
 8009d5e:	4601      	mov	r1, r0
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	f000 bc17 	b.w	800a594 <_malloc_r>
 8009d66:	bf00      	nop
 8009d68:	2000000c 	.word	0x2000000c

08009d6c <memcpy>:
 8009d6c:	440a      	add	r2, r1
 8009d6e:	4291      	cmp	r1, r2
 8009d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d74:	d100      	bne.n	8009d78 <memcpy+0xc>
 8009d76:	4770      	bx	lr
 8009d78:	b510      	push	{r4, lr}
 8009d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d82:	4291      	cmp	r1, r2
 8009d84:	d1f9      	bne.n	8009d7a <memcpy+0xe>
 8009d86:	bd10      	pop	{r4, pc}

08009d88 <_Balloc>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	460d      	mov	r5, r1
 8009d90:	b976      	cbnz	r6, 8009db0 <_Balloc+0x28>
 8009d92:	2010      	movs	r0, #16
 8009d94:	f7ff ffe2 	bl	8009d5c <malloc>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8009d9c:	b920      	cbnz	r0, 8009da8 <_Balloc+0x20>
 8009d9e:	4b18      	ldr	r3, [pc, #96]	; (8009e00 <_Balloc+0x78>)
 8009da0:	4818      	ldr	r0, [pc, #96]	; (8009e04 <_Balloc+0x7c>)
 8009da2:	2166      	movs	r1, #102	; 0x66
 8009da4:	f000 fdd6 	bl	800a954 <__assert_func>
 8009da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dac:	6006      	str	r6, [r0, #0]
 8009dae:	60c6      	str	r6, [r0, #12]
 8009db0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009db2:	68f3      	ldr	r3, [r6, #12]
 8009db4:	b183      	cbz	r3, 8009dd8 <_Balloc+0x50>
 8009db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dbe:	b9b8      	cbnz	r0, 8009df0 <_Balloc+0x68>
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8009dc6:	1d72      	adds	r2, r6, #5
 8009dc8:	0092      	lsls	r2, r2, #2
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f000 fb60 	bl	800a490 <_calloc_r>
 8009dd0:	b160      	cbz	r0, 8009dec <_Balloc+0x64>
 8009dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dd6:	e00e      	b.n	8009df6 <_Balloc+0x6e>
 8009dd8:	2221      	movs	r2, #33	; 0x21
 8009dda:	2104      	movs	r1, #4
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f000 fb57 	bl	800a490 <_calloc_r>
 8009de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009de4:	60f0      	str	r0, [r6, #12]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e4      	bne.n	8009db6 <_Balloc+0x2e>
 8009dec:	2000      	movs	r0, #0
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	6802      	ldr	r2, [r0, #0]
 8009df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009df6:	2300      	movs	r3, #0
 8009df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dfc:	e7f7      	b.n	8009dee <_Balloc+0x66>
 8009dfe:	bf00      	nop
 8009e00:	0800b695 	.word	0x0800b695
 8009e04:	0800b718 	.word	0x0800b718

08009e08 <_Bfree>:
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	b976      	cbnz	r6, 8009e30 <_Bfree+0x28>
 8009e12:	2010      	movs	r0, #16
 8009e14:	f7ff ffa2 	bl	8009d5c <malloc>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	6268      	str	r0, [r5, #36]	; 0x24
 8009e1c:	b920      	cbnz	r0, 8009e28 <_Bfree+0x20>
 8009e1e:	4b09      	ldr	r3, [pc, #36]	; (8009e44 <_Bfree+0x3c>)
 8009e20:	4809      	ldr	r0, [pc, #36]	; (8009e48 <_Bfree+0x40>)
 8009e22:	218a      	movs	r1, #138	; 0x8a
 8009e24:	f000 fd96 	bl	800a954 <__assert_func>
 8009e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e2c:	6006      	str	r6, [r0, #0]
 8009e2e:	60c6      	str	r6, [r0, #12]
 8009e30:	b13c      	cbz	r4, 8009e42 <_Bfree+0x3a>
 8009e32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e34:	6862      	ldr	r2, [r4, #4]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e3c:	6021      	str	r1, [r4, #0]
 8009e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	0800b695 	.word	0x0800b695
 8009e48:	0800b718 	.word	0x0800b718

08009e4c <__multadd>:
 8009e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e50:	690d      	ldr	r5, [r1, #16]
 8009e52:	4607      	mov	r7, r0
 8009e54:	460c      	mov	r4, r1
 8009e56:	461e      	mov	r6, r3
 8009e58:	f101 0c14 	add.w	ip, r1, #20
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8009e62:	b299      	uxth	r1, r3
 8009e64:	fb02 6101 	mla	r1, r2, r1, r6
 8009e68:	0c1e      	lsrs	r6, r3, #16
 8009e6a:	0c0b      	lsrs	r3, r1, #16
 8009e6c:	fb02 3306 	mla	r3, r2, r6, r3
 8009e70:	b289      	uxth	r1, r1
 8009e72:	3001      	adds	r0, #1
 8009e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e78:	4285      	cmp	r5, r0
 8009e7a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e82:	dcec      	bgt.n	8009e5e <__multadd+0x12>
 8009e84:	b30e      	cbz	r6, 8009eca <__multadd+0x7e>
 8009e86:	68a3      	ldr	r3, [r4, #8]
 8009e88:	42ab      	cmp	r3, r5
 8009e8a:	dc19      	bgt.n	8009ec0 <__multadd+0x74>
 8009e8c:	6861      	ldr	r1, [r4, #4]
 8009e8e:	4638      	mov	r0, r7
 8009e90:	3101      	adds	r1, #1
 8009e92:	f7ff ff79 	bl	8009d88 <_Balloc>
 8009e96:	4680      	mov	r8, r0
 8009e98:	b928      	cbnz	r0, 8009ea6 <__multadd+0x5a>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ed0 <__multadd+0x84>)
 8009e9e:	480d      	ldr	r0, [pc, #52]	; (8009ed4 <__multadd+0x88>)
 8009ea0:	21b5      	movs	r1, #181	; 0xb5
 8009ea2:	f000 fd57 	bl	800a954 <__assert_func>
 8009ea6:	6922      	ldr	r2, [r4, #16]
 8009ea8:	3202      	adds	r2, #2
 8009eaa:	f104 010c 	add.w	r1, r4, #12
 8009eae:	0092      	lsls	r2, r2, #2
 8009eb0:	300c      	adds	r0, #12
 8009eb2:	f7ff ff5b 	bl	8009d6c <memcpy>
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f7ff ffa5 	bl	8009e08 <_Bfree>
 8009ebe:	4644      	mov	r4, r8
 8009ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	615e      	str	r6, [r3, #20]
 8009ec8:	6125      	str	r5, [r4, #16]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed0:	0800b707 	.word	0x0800b707
 8009ed4:	0800b718 	.word	0x0800b718

08009ed8 <__hi0bits>:
 8009ed8:	0c03      	lsrs	r3, r0, #16
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	b9d3      	cbnz	r3, 8009f14 <__hi0bits+0x3c>
 8009ede:	0400      	lsls	r0, r0, #16
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ee6:	bf04      	itt	eq
 8009ee8:	0200      	lsleq	r0, r0, #8
 8009eea:	3308      	addeq	r3, #8
 8009eec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ef0:	bf04      	itt	eq
 8009ef2:	0100      	lsleq	r0, r0, #4
 8009ef4:	3304      	addeq	r3, #4
 8009ef6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009efa:	bf04      	itt	eq
 8009efc:	0080      	lsleq	r0, r0, #2
 8009efe:	3302      	addeq	r3, #2
 8009f00:	2800      	cmp	r0, #0
 8009f02:	db05      	blt.n	8009f10 <__hi0bits+0x38>
 8009f04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f08:	f103 0301 	add.w	r3, r3, #1
 8009f0c:	bf08      	it	eq
 8009f0e:	2320      	moveq	r3, #32
 8009f10:	4618      	mov	r0, r3
 8009f12:	4770      	bx	lr
 8009f14:	2300      	movs	r3, #0
 8009f16:	e7e4      	b.n	8009ee2 <__hi0bits+0xa>

08009f18 <__lo0bits>:
 8009f18:	6803      	ldr	r3, [r0, #0]
 8009f1a:	f013 0207 	ands.w	r2, r3, #7
 8009f1e:	4601      	mov	r1, r0
 8009f20:	d00b      	beq.n	8009f3a <__lo0bits+0x22>
 8009f22:	07da      	lsls	r2, r3, #31
 8009f24:	d423      	bmi.n	8009f6e <__lo0bits+0x56>
 8009f26:	0798      	lsls	r0, r3, #30
 8009f28:	bf49      	itett	mi
 8009f2a:	085b      	lsrmi	r3, r3, #1
 8009f2c:	089b      	lsrpl	r3, r3, #2
 8009f2e:	2001      	movmi	r0, #1
 8009f30:	600b      	strmi	r3, [r1, #0]
 8009f32:	bf5c      	itt	pl
 8009f34:	600b      	strpl	r3, [r1, #0]
 8009f36:	2002      	movpl	r0, #2
 8009f38:	4770      	bx	lr
 8009f3a:	b298      	uxth	r0, r3
 8009f3c:	b9a8      	cbnz	r0, 8009f6a <__lo0bits+0x52>
 8009f3e:	0c1b      	lsrs	r3, r3, #16
 8009f40:	2010      	movs	r0, #16
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	b90a      	cbnz	r2, 8009f4a <__lo0bits+0x32>
 8009f46:	3008      	adds	r0, #8
 8009f48:	0a1b      	lsrs	r3, r3, #8
 8009f4a:	071a      	lsls	r2, r3, #28
 8009f4c:	bf04      	itt	eq
 8009f4e:	091b      	lsreq	r3, r3, #4
 8009f50:	3004      	addeq	r0, #4
 8009f52:	079a      	lsls	r2, r3, #30
 8009f54:	bf04      	itt	eq
 8009f56:	089b      	lsreq	r3, r3, #2
 8009f58:	3002      	addeq	r0, #2
 8009f5a:	07da      	lsls	r2, r3, #31
 8009f5c:	d403      	bmi.n	8009f66 <__lo0bits+0x4e>
 8009f5e:	085b      	lsrs	r3, r3, #1
 8009f60:	f100 0001 	add.w	r0, r0, #1
 8009f64:	d005      	beq.n	8009f72 <__lo0bits+0x5a>
 8009f66:	600b      	str	r3, [r1, #0]
 8009f68:	4770      	bx	lr
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	e7e9      	b.n	8009f42 <__lo0bits+0x2a>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	4770      	bx	lr
 8009f72:	2020      	movs	r0, #32
 8009f74:	4770      	bx	lr
	...

08009f78 <__i2b>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	f7ff ff03 	bl	8009d88 <_Balloc>
 8009f82:	4602      	mov	r2, r0
 8009f84:	b928      	cbnz	r0, 8009f92 <__i2b+0x1a>
 8009f86:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <__i2b+0x24>)
 8009f88:	4805      	ldr	r0, [pc, #20]	; (8009fa0 <__i2b+0x28>)
 8009f8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f8e:	f000 fce1 	bl	800a954 <__assert_func>
 8009f92:	2301      	movs	r3, #1
 8009f94:	6144      	str	r4, [r0, #20]
 8009f96:	6103      	str	r3, [r0, #16]
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	bf00      	nop
 8009f9c:	0800b707 	.word	0x0800b707
 8009fa0:	0800b718 	.word	0x0800b718

08009fa4 <__multiply>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	4691      	mov	r9, r2
 8009faa:	690a      	ldr	r2, [r1, #16]
 8009fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	bfb8      	it	lt
 8009fb4:	460b      	movlt	r3, r1
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	bfbc      	itt	lt
 8009fba:	464c      	movlt	r4, r9
 8009fbc:	4699      	movlt	r9, r3
 8009fbe:	6927      	ldr	r7, [r4, #16]
 8009fc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fc4:	68a3      	ldr	r3, [r4, #8]
 8009fc6:	6861      	ldr	r1, [r4, #4]
 8009fc8:	eb07 060a 	add.w	r6, r7, sl
 8009fcc:	42b3      	cmp	r3, r6
 8009fce:	b085      	sub	sp, #20
 8009fd0:	bfb8      	it	lt
 8009fd2:	3101      	addlt	r1, #1
 8009fd4:	f7ff fed8 	bl	8009d88 <_Balloc>
 8009fd8:	b930      	cbnz	r0, 8009fe8 <__multiply+0x44>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	4b44      	ldr	r3, [pc, #272]	; (800a0f0 <__multiply+0x14c>)
 8009fde:	4845      	ldr	r0, [pc, #276]	; (800a0f4 <__multiply+0x150>)
 8009fe0:	f240 115d 	movw	r1, #349	; 0x15d
 8009fe4:	f000 fcb6 	bl	800a954 <__assert_func>
 8009fe8:	f100 0514 	add.w	r5, r0, #20
 8009fec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	4543      	cmp	r3, r8
 8009ff6:	d321      	bcc.n	800a03c <__multiply+0x98>
 8009ff8:	f104 0314 	add.w	r3, r4, #20
 8009ffc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a000:	f109 0314 	add.w	r3, r9, #20
 800a004:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a008:	9202      	str	r2, [sp, #8]
 800a00a:	1b3a      	subs	r2, r7, r4
 800a00c:	3a15      	subs	r2, #21
 800a00e:	f022 0203 	bic.w	r2, r2, #3
 800a012:	3204      	adds	r2, #4
 800a014:	f104 0115 	add.w	r1, r4, #21
 800a018:	428f      	cmp	r7, r1
 800a01a:	bf38      	it	cc
 800a01c:	2204      	movcc	r2, #4
 800a01e:	9201      	str	r2, [sp, #4]
 800a020:	9a02      	ldr	r2, [sp, #8]
 800a022:	9303      	str	r3, [sp, #12]
 800a024:	429a      	cmp	r2, r3
 800a026:	d80c      	bhi.n	800a042 <__multiply+0x9e>
 800a028:	2e00      	cmp	r6, #0
 800a02a:	dd03      	ble.n	800a034 <__multiply+0x90>
 800a02c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a030:	2b00      	cmp	r3, #0
 800a032:	d05a      	beq.n	800a0ea <__multiply+0x146>
 800a034:	6106      	str	r6, [r0, #16]
 800a036:	b005      	add	sp, #20
 800a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03c:	f843 2b04 	str.w	r2, [r3], #4
 800a040:	e7d8      	b.n	8009ff4 <__multiply+0x50>
 800a042:	f8b3 a000 	ldrh.w	sl, [r3]
 800a046:	f1ba 0f00 	cmp.w	sl, #0
 800a04a:	d024      	beq.n	800a096 <__multiply+0xf2>
 800a04c:	f104 0e14 	add.w	lr, r4, #20
 800a050:	46a9      	mov	r9, r5
 800a052:	f04f 0c00 	mov.w	ip, #0
 800a056:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a05a:	f8d9 1000 	ldr.w	r1, [r9]
 800a05e:	fa1f fb82 	uxth.w	fp, r2
 800a062:	b289      	uxth	r1, r1
 800a064:	fb0a 110b 	mla	r1, sl, fp, r1
 800a068:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a06c:	f8d9 2000 	ldr.w	r2, [r9]
 800a070:	4461      	add	r1, ip
 800a072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a076:	fb0a c20b 	mla	r2, sl, fp, ip
 800a07a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a07e:	b289      	uxth	r1, r1
 800a080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a084:	4577      	cmp	r7, lr
 800a086:	f849 1b04 	str.w	r1, [r9], #4
 800a08a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a08e:	d8e2      	bhi.n	800a056 <__multiply+0xb2>
 800a090:	9a01      	ldr	r2, [sp, #4]
 800a092:	f845 c002 	str.w	ip, [r5, r2]
 800a096:	9a03      	ldr	r2, [sp, #12]
 800a098:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a09c:	3304      	adds	r3, #4
 800a09e:	f1b9 0f00 	cmp.w	r9, #0
 800a0a2:	d020      	beq.n	800a0e6 <__multiply+0x142>
 800a0a4:	6829      	ldr	r1, [r5, #0]
 800a0a6:	f104 0c14 	add.w	ip, r4, #20
 800a0aa:	46ae      	mov	lr, r5
 800a0ac:	f04f 0a00 	mov.w	sl, #0
 800a0b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a0b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0b8:	fb09 220b 	mla	r2, r9, fp, r2
 800a0bc:	4492      	add	sl, r2
 800a0be:	b289      	uxth	r1, r1
 800a0c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0c4:	f84e 1b04 	str.w	r1, [lr], #4
 800a0c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0cc:	f8be 1000 	ldrh.w	r1, [lr]
 800a0d0:	0c12      	lsrs	r2, r2, #16
 800a0d2:	fb09 1102 	mla	r1, r9, r2, r1
 800a0d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0da:	4567      	cmp	r7, ip
 800a0dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0e0:	d8e6      	bhi.n	800a0b0 <__multiply+0x10c>
 800a0e2:	9a01      	ldr	r2, [sp, #4]
 800a0e4:	50a9      	str	r1, [r5, r2]
 800a0e6:	3504      	adds	r5, #4
 800a0e8:	e79a      	b.n	800a020 <__multiply+0x7c>
 800a0ea:	3e01      	subs	r6, #1
 800a0ec:	e79c      	b.n	800a028 <__multiply+0x84>
 800a0ee:	bf00      	nop
 800a0f0:	0800b707 	.word	0x0800b707
 800a0f4:	0800b718 	.word	0x0800b718

0800a0f8 <__pow5mult>:
 800a0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0fc:	4615      	mov	r5, r2
 800a0fe:	f012 0203 	ands.w	r2, r2, #3
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	d007      	beq.n	800a118 <__pow5mult+0x20>
 800a108:	4c25      	ldr	r4, [pc, #148]	; (800a1a0 <__pow5mult+0xa8>)
 800a10a:	3a01      	subs	r2, #1
 800a10c:	2300      	movs	r3, #0
 800a10e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a112:	f7ff fe9b 	bl	8009e4c <__multadd>
 800a116:	4607      	mov	r7, r0
 800a118:	10ad      	asrs	r5, r5, #2
 800a11a:	d03d      	beq.n	800a198 <__pow5mult+0xa0>
 800a11c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a11e:	b97c      	cbnz	r4, 800a140 <__pow5mult+0x48>
 800a120:	2010      	movs	r0, #16
 800a122:	f7ff fe1b 	bl	8009d5c <malloc>
 800a126:	4602      	mov	r2, r0
 800a128:	6270      	str	r0, [r6, #36]	; 0x24
 800a12a:	b928      	cbnz	r0, 800a138 <__pow5mult+0x40>
 800a12c:	4b1d      	ldr	r3, [pc, #116]	; (800a1a4 <__pow5mult+0xac>)
 800a12e:	481e      	ldr	r0, [pc, #120]	; (800a1a8 <__pow5mult+0xb0>)
 800a130:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a134:	f000 fc0e 	bl	800a954 <__assert_func>
 800a138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a13c:	6004      	str	r4, [r0, #0]
 800a13e:	60c4      	str	r4, [r0, #12]
 800a140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a148:	b94c      	cbnz	r4, 800a15e <__pow5mult+0x66>
 800a14a:	f240 2171 	movw	r1, #625	; 0x271
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff ff12 	bl	8009f78 <__i2b>
 800a154:	2300      	movs	r3, #0
 800a156:	f8c8 0008 	str.w	r0, [r8, #8]
 800a15a:	4604      	mov	r4, r0
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	f04f 0900 	mov.w	r9, #0
 800a162:	07eb      	lsls	r3, r5, #31
 800a164:	d50a      	bpl.n	800a17c <__pow5mult+0x84>
 800a166:	4639      	mov	r1, r7
 800a168:	4622      	mov	r2, r4
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff ff1a 	bl	8009fa4 <__multiply>
 800a170:	4639      	mov	r1, r7
 800a172:	4680      	mov	r8, r0
 800a174:	4630      	mov	r0, r6
 800a176:	f7ff fe47 	bl	8009e08 <_Bfree>
 800a17a:	4647      	mov	r7, r8
 800a17c:	106d      	asrs	r5, r5, #1
 800a17e:	d00b      	beq.n	800a198 <__pow5mult+0xa0>
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	b938      	cbnz	r0, 800a194 <__pow5mult+0x9c>
 800a184:	4622      	mov	r2, r4
 800a186:	4621      	mov	r1, r4
 800a188:	4630      	mov	r0, r6
 800a18a:	f7ff ff0b 	bl	8009fa4 <__multiply>
 800a18e:	6020      	str	r0, [r4, #0]
 800a190:	f8c0 9000 	str.w	r9, [r0]
 800a194:	4604      	mov	r4, r0
 800a196:	e7e4      	b.n	800a162 <__pow5mult+0x6a>
 800a198:	4638      	mov	r0, r7
 800a19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19e:	bf00      	nop
 800a1a0:	0800b868 	.word	0x0800b868
 800a1a4:	0800b695 	.word	0x0800b695
 800a1a8:	0800b718 	.word	0x0800b718

0800a1ac <__lshift>:
 800a1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	6849      	ldr	r1, [r1, #4]
 800a1b4:	6923      	ldr	r3, [r4, #16]
 800a1b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1ba:	68a3      	ldr	r3, [r4, #8]
 800a1bc:	4607      	mov	r7, r0
 800a1be:	4691      	mov	r9, r2
 800a1c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1c4:	f108 0601 	add.w	r6, r8, #1
 800a1c8:	42b3      	cmp	r3, r6
 800a1ca:	db0b      	blt.n	800a1e4 <__lshift+0x38>
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f7ff fddb 	bl	8009d88 <_Balloc>
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	b948      	cbnz	r0, 800a1ea <__lshift+0x3e>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	4b2a      	ldr	r3, [pc, #168]	; (800a284 <__lshift+0xd8>)
 800a1da:	482b      	ldr	r0, [pc, #172]	; (800a288 <__lshift+0xdc>)
 800a1dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1e0:	f000 fbb8 	bl	800a954 <__assert_func>
 800a1e4:	3101      	adds	r1, #1
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	e7ee      	b.n	800a1c8 <__lshift+0x1c>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f100 0114 	add.w	r1, r0, #20
 800a1f0:	f100 0210 	add.w	r2, r0, #16
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	4553      	cmp	r3, sl
 800a1f8:	db37      	blt.n	800a26a <__lshift+0xbe>
 800a1fa:	6920      	ldr	r0, [r4, #16]
 800a1fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a200:	f104 0314 	add.w	r3, r4, #20
 800a204:	f019 091f 	ands.w	r9, r9, #31
 800a208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a20c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a210:	d02f      	beq.n	800a272 <__lshift+0xc6>
 800a212:	f1c9 0e20 	rsb	lr, r9, #32
 800a216:	468a      	mov	sl, r1
 800a218:	f04f 0c00 	mov.w	ip, #0
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	fa02 f209 	lsl.w	r2, r2, r9
 800a222:	ea42 020c 	orr.w	r2, r2, ip
 800a226:	f84a 2b04 	str.w	r2, [sl], #4
 800a22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22e:	4298      	cmp	r0, r3
 800a230:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a234:	d8f2      	bhi.n	800a21c <__lshift+0x70>
 800a236:	1b03      	subs	r3, r0, r4
 800a238:	3b15      	subs	r3, #21
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	3304      	adds	r3, #4
 800a240:	f104 0215 	add.w	r2, r4, #21
 800a244:	4290      	cmp	r0, r2
 800a246:	bf38      	it	cc
 800a248:	2304      	movcc	r3, #4
 800a24a:	f841 c003 	str.w	ip, [r1, r3]
 800a24e:	f1bc 0f00 	cmp.w	ip, #0
 800a252:	d001      	beq.n	800a258 <__lshift+0xac>
 800a254:	f108 0602 	add.w	r6, r8, #2
 800a258:	3e01      	subs	r6, #1
 800a25a:	4638      	mov	r0, r7
 800a25c:	612e      	str	r6, [r5, #16]
 800a25e:	4621      	mov	r1, r4
 800a260:	f7ff fdd2 	bl	8009e08 <_Bfree>
 800a264:	4628      	mov	r0, r5
 800a266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a26a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a26e:	3301      	adds	r3, #1
 800a270:	e7c1      	b.n	800a1f6 <__lshift+0x4a>
 800a272:	3904      	subs	r1, #4
 800a274:	f853 2b04 	ldr.w	r2, [r3], #4
 800a278:	f841 2f04 	str.w	r2, [r1, #4]!
 800a27c:	4298      	cmp	r0, r3
 800a27e:	d8f9      	bhi.n	800a274 <__lshift+0xc8>
 800a280:	e7ea      	b.n	800a258 <__lshift+0xac>
 800a282:	bf00      	nop
 800a284:	0800b707 	.word	0x0800b707
 800a288:	0800b718 	.word	0x0800b718

0800a28c <__mcmp>:
 800a28c:	b530      	push	{r4, r5, lr}
 800a28e:	6902      	ldr	r2, [r0, #16]
 800a290:	690c      	ldr	r4, [r1, #16]
 800a292:	1b12      	subs	r2, r2, r4
 800a294:	d10e      	bne.n	800a2b4 <__mcmp+0x28>
 800a296:	f100 0314 	add.w	r3, r0, #20
 800a29a:	3114      	adds	r1, #20
 800a29c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2ac:	42a5      	cmp	r5, r4
 800a2ae:	d003      	beq.n	800a2b8 <__mcmp+0x2c>
 800a2b0:	d305      	bcc.n	800a2be <__mcmp+0x32>
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	bd30      	pop	{r4, r5, pc}
 800a2b8:	4283      	cmp	r3, r0
 800a2ba:	d3f3      	bcc.n	800a2a4 <__mcmp+0x18>
 800a2bc:	e7fa      	b.n	800a2b4 <__mcmp+0x28>
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2c2:	e7f7      	b.n	800a2b4 <__mcmp+0x28>

0800a2c4 <__mdiff>:
 800a2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	4690      	mov	r8, r2
 800a2d2:	f7ff ffdb 	bl	800a28c <__mcmp>
 800a2d6:	1e05      	subs	r5, r0, #0
 800a2d8:	d110      	bne.n	800a2fc <__mdiff+0x38>
 800a2da:	4629      	mov	r1, r5
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f7ff fd53 	bl	8009d88 <_Balloc>
 800a2e2:	b930      	cbnz	r0, 800a2f2 <__mdiff+0x2e>
 800a2e4:	4b3a      	ldr	r3, [pc, #232]	; (800a3d0 <__mdiff+0x10c>)
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	f240 2132 	movw	r1, #562	; 0x232
 800a2ec:	4839      	ldr	r0, [pc, #228]	; (800a3d4 <__mdiff+0x110>)
 800a2ee:	f000 fb31 	bl	800a954 <__assert_func>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	bfa4      	itt	ge
 800a2fe:	4643      	movge	r3, r8
 800a300:	46a0      	movge	r8, r4
 800a302:	4630      	mov	r0, r6
 800a304:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a308:	bfa6      	itte	ge
 800a30a:	461c      	movge	r4, r3
 800a30c:	2500      	movge	r5, #0
 800a30e:	2501      	movlt	r5, #1
 800a310:	f7ff fd3a 	bl	8009d88 <_Balloc>
 800a314:	b920      	cbnz	r0, 800a320 <__mdiff+0x5c>
 800a316:	4b2e      	ldr	r3, [pc, #184]	; (800a3d0 <__mdiff+0x10c>)
 800a318:	4602      	mov	r2, r0
 800a31a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a31e:	e7e5      	b.n	800a2ec <__mdiff+0x28>
 800a320:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a324:	6926      	ldr	r6, [r4, #16]
 800a326:	60c5      	str	r5, [r0, #12]
 800a328:	f104 0914 	add.w	r9, r4, #20
 800a32c:	f108 0514 	add.w	r5, r8, #20
 800a330:	f100 0e14 	add.w	lr, r0, #20
 800a334:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a338:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a33c:	f108 0210 	add.w	r2, r8, #16
 800a340:	46f2      	mov	sl, lr
 800a342:	2100      	movs	r1, #0
 800a344:	f859 3b04 	ldr.w	r3, [r9], #4
 800a348:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a34c:	fa1f f883 	uxth.w	r8, r3
 800a350:	fa11 f18b 	uxtah	r1, r1, fp
 800a354:	0c1b      	lsrs	r3, r3, #16
 800a356:	eba1 0808 	sub.w	r8, r1, r8
 800a35a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a35e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a362:	fa1f f888 	uxth.w	r8, r8
 800a366:	1419      	asrs	r1, r3, #16
 800a368:	454e      	cmp	r6, r9
 800a36a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a36e:	f84a 3b04 	str.w	r3, [sl], #4
 800a372:	d8e7      	bhi.n	800a344 <__mdiff+0x80>
 800a374:	1b33      	subs	r3, r6, r4
 800a376:	3b15      	subs	r3, #21
 800a378:	f023 0303 	bic.w	r3, r3, #3
 800a37c:	3304      	adds	r3, #4
 800a37e:	3415      	adds	r4, #21
 800a380:	42a6      	cmp	r6, r4
 800a382:	bf38      	it	cc
 800a384:	2304      	movcc	r3, #4
 800a386:	441d      	add	r5, r3
 800a388:	4473      	add	r3, lr
 800a38a:	469e      	mov	lr, r3
 800a38c:	462e      	mov	r6, r5
 800a38e:	4566      	cmp	r6, ip
 800a390:	d30e      	bcc.n	800a3b0 <__mdiff+0xec>
 800a392:	f10c 0203 	add.w	r2, ip, #3
 800a396:	1b52      	subs	r2, r2, r5
 800a398:	f022 0203 	bic.w	r2, r2, #3
 800a39c:	3d03      	subs	r5, #3
 800a39e:	45ac      	cmp	ip, r5
 800a3a0:	bf38      	it	cc
 800a3a2:	2200      	movcc	r2, #0
 800a3a4:	441a      	add	r2, r3
 800a3a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a3aa:	b17b      	cbz	r3, 800a3cc <__mdiff+0x108>
 800a3ac:	6107      	str	r7, [r0, #16]
 800a3ae:	e7a3      	b.n	800a2f8 <__mdiff+0x34>
 800a3b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3b4:	fa11 f288 	uxtah	r2, r1, r8
 800a3b8:	1414      	asrs	r4, r2, #16
 800a3ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3be:	b292      	uxth	r2, r2
 800a3c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3c4:	f84e 2b04 	str.w	r2, [lr], #4
 800a3c8:	1421      	asrs	r1, r4, #16
 800a3ca:	e7e0      	b.n	800a38e <__mdiff+0xca>
 800a3cc:	3f01      	subs	r7, #1
 800a3ce:	e7ea      	b.n	800a3a6 <__mdiff+0xe2>
 800a3d0:	0800b707 	.word	0x0800b707
 800a3d4:	0800b718 	.word	0x0800b718

0800a3d8 <__d2b>:
 800a3d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	4689      	mov	r9, r1
 800a3de:	2101      	movs	r1, #1
 800a3e0:	ec57 6b10 	vmov	r6, r7, d0
 800a3e4:	4690      	mov	r8, r2
 800a3e6:	f7ff fccf 	bl	8009d88 <_Balloc>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	b930      	cbnz	r0, 800a3fc <__d2b+0x24>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	4b25      	ldr	r3, [pc, #148]	; (800a488 <__d2b+0xb0>)
 800a3f2:	4826      	ldr	r0, [pc, #152]	; (800a48c <__d2b+0xb4>)
 800a3f4:	f240 310a 	movw	r1, #778	; 0x30a
 800a3f8:	f000 faac 	bl	800a954 <__assert_func>
 800a3fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a400:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a404:	bb35      	cbnz	r5, 800a454 <__d2b+0x7c>
 800a406:	2e00      	cmp	r6, #0
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	d028      	beq.n	800a45e <__d2b+0x86>
 800a40c:	4668      	mov	r0, sp
 800a40e:	9600      	str	r6, [sp, #0]
 800a410:	f7ff fd82 	bl	8009f18 <__lo0bits>
 800a414:	9900      	ldr	r1, [sp, #0]
 800a416:	b300      	cbz	r0, 800a45a <__d2b+0x82>
 800a418:	9a01      	ldr	r2, [sp, #4]
 800a41a:	f1c0 0320 	rsb	r3, r0, #32
 800a41e:	fa02 f303 	lsl.w	r3, r2, r3
 800a422:	430b      	orrs	r3, r1
 800a424:	40c2      	lsrs	r2, r0
 800a426:	6163      	str	r3, [r4, #20]
 800a428:	9201      	str	r2, [sp, #4]
 800a42a:	9b01      	ldr	r3, [sp, #4]
 800a42c:	61a3      	str	r3, [r4, #24]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	bf14      	ite	ne
 800a432:	2202      	movne	r2, #2
 800a434:	2201      	moveq	r2, #1
 800a436:	6122      	str	r2, [r4, #16]
 800a438:	b1d5      	cbz	r5, 800a470 <__d2b+0x98>
 800a43a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a43e:	4405      	add	r5, r0
 800a440:	f8c9 5000 	str.w	r5, [r9]
 800a444:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a448:	f8c8 0000 	str.w	r0, [r8]
 800a44c:	4620      	mov	r0, r4
 800a44e:	b003      	add	sp, #12
 800a450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a458:	e7d5      	b.n	800a406 <__d2b+0x2e>
 800a45a:	6161      	str	r1, [r4, #20]
 800a45c:	e7e5      	b.n	800a42a <__d2b+0x52>
 800a45e:	a801      	add	r0, sp, #4
 800a460:	f7ff fd5a 	bl	8009f18 <__lo0bits>
 800a464:	9b01      	ldr	r3, [sp, #4]
 800a466:	6163      	str	r3, [r4, #20]
 800a468:	2201      	movs	r2, #1
 800a46a:	6122      	str	r2, [r4, #16]
 800a46c:	3020      	adds	r0, #32
 800a46e:	e7e3      	b.n	800a438 <__d2b+0x60>
 800a470:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a474:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a478:	f8c9 0000 	str.w	r0, [r9]
 800a47c:	6918      	ldr	r0, [r3, #16]
 800a47e:	f7ff fd2b 	bl	8009ed8 <__hi0bits>
 800a482:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a486:	e7df      	b.n	800a448 <__d2b+0x70>
 800a488:	0800b707 	.word	0x0800b707
 800a48c:	0800b718 	.word	0x0800b718

0800a490 <_calloc_r>:
 800a490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a492:	fba1 2402 	umull	r2, r4, r1, r2
 800a496:	b94c      	cbnz	r4, 800a4ac <_calloc_r+0x1c>
 800a498:	4611      	mov	r1, r2
 800a49a:	9201      	str	r2, [sp, #4]
 800a49c:	f000 f87a 	bl	800a594 <_malloc_r>
 800a4a0:	9a01      	ldr	r2, [sp, #4]
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	b930      	cbnz	r0, 800a4b4 <_calloc_r+0x24>
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	b003      	add	sp, #12
 800a4aa:	bd30      	pop	{r4, r5, pc}
 800a4ac:	220c      	movs	r2, #12
 800a4ae:	6002      	str	r2, [r0, #0]
 800a4b0:	2500      	movs	r5, #0
 800a4b2:	e7f8      	b.n	800a4a6 <_calloc_r+0x16>
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	f7fe f941 	bl	800873c <memset>
 800a4ba:	e7f4      	b.n	800a4a6 <_calloc_r+0x16>

0800a4bc <_free_r>:
 800a4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4be:	2900      	cmp	r1, #0
 800a4c0:	d044      	beq.n	800a54c <_free_r+0x90>
 800a4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c6:	9001      	str	r0, [sp, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ce:	bfb8      	it	lt
 800a4d0:	18e4      	addlt	r4, r4, r3
 800a4d2:	f000 fa9b 	bl	800aa0c <__malloc_lock>
 800a4d6:	4a1e      	ldr	r2, [pc, #120]	; (800a550 <_free_r+0x94>)
 800a4d8:	9801      	ldr	r0, [sp, #4]
 800a4da:	6813      	ldr	r3, [r2, #0]
 800a4dc:	b933      	cbnz	r3, 800a4ec <_free_r+0x30>
 800a4de:	6063      	str	r3, [r4, #4]
 800a4e0:	6014      	str	r4, [r2, #0]
 800a4e2:	b003      	add	sp, #12
 800a4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4e8:	f000 ba96 	b.w	800aa18 <__malloc_unlock>
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	d908      	bls.n	800a502 <_free_r+0x46>
 800a4f0:	6825      	ldr	r5, [r4, #0]
 800a4f2:	1961      	adds	r1, r4, r5
 800a4f4:	428b      	cmp	r3, r1
 800a4f6:	bf01      	itttt	eq
 800a4f8:	6819      	ldreq	r1, [r3, #0]
 800a4fa:	685b      	ldreq	r3, [r3, #4]
 800a4fc:	1949      	addeq	r1, r1, r5
 800a4fe:	6021      	streq	r1, [r4, #0]
 800a500:	e7ed      	b.n	800a4de <_free_r+0x22>
 800a502:	461a      	mov	r2, r3
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	b10b      	cbz	r3, 800a50c <_free_r+0x50>
 800a508:	42a3      	cmp	r3, r4
 800a50a:	d9fa      	bls.n	800a502 <_free_r+0x46>
 800a50c:	6811      	ldr	r1, [r2, #0]
 800a50e:	1855      	adds	r5, r2, r1
 800a510:	42a5      	cmp	r5, r4
 800a512:	d10b      	bne.n	800a52c <_free_r+0x70>
 800a514:	6824      	ldr	r4, [r4, #0]
 800a516:	4421      	add	r1, r4
 800a518:	1854      	adds	r4, r2, r1
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	6011      	str	r1, [r2, #0]
 800a51e:	d1e0      	bne.n	800a4e2 <_free_r+0x26>
 800a520:	681c      	ldr	r4, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	6053      	str	r3, [r2, #4]
 800a526:	4421      	add	r1, r4
 800a528:	6011      	str	r1, [r2, #0]
 800a52a:	e7da      	b.n	800a4e2 <_free_r+0x26>
 800a52c:	d902      	bls.n	800a534 <_free_r+0x78>
 800a52e:	230c      	movs	r3, #12
 800a530:	6003      	str	r3, [r0, #0]
 800a532:	e7d6      	b.n	800a4e2 <_free_r+0x26>
 800a534:	6825      	ldr	r5, [r4, #0]
 800a536:	1961      	adds	r1, r4, r5
 800a538:	428b      	cmp	r3, r1
 800a53a:	bf04      	itt	eq
 800a53c:	6819      	ldreq	r1, [r3, #0]
 800a53e:	685b      	ldreq	r3, [r3, #4]
 800a540:	6063      	str	r3, [r4, #4]
 800a542:	bf04      	itt	eq
 800a544:	1949      	addeq	r1, r1, r5
 800a546:	6021      	streq	r1, [r4, #0]
 800a548:	6054      	str	r4, [r2, #4]
 800a54a:	e7ca      	b.n	800a4e2 <_free_r+0x26>
 800a54c:	b003      	add	sp, #12
 800a54e:	bd30      	pop	{r4, r5, pc}
 800a550:	200003dc 	.word	0x200003dc

0800a554 <sbrk_aligned>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	4e0e      	ldr	r6, [pc, #56]	; (800a590 <sbrk_aligned+0x3c>)
 800a558:	460c      	mov	r4, r1
 800a55a:	6831      	ldr	r1, [r6, #0]
 800a55c:	4605      	mov	r5, r0
 800a55e:	b911      	cbnz	r1, 800a566 <sbrk_aligned+0x12>
 800a560:	f000 f9e8 	bl	800a934 <_sbrk_r>
 800a564:	6030      	str	r0, [r6, #0]
 800a566:	4621      	mov	r1, r4
 800a568:	4628      	mov	r0, r5
 800a56a:	f000 f9e3 	bl	800a934 <_sbrk_r>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	d00a      	beq.n	800a588 <sbrk_aligned+0x34>
 800a572:	1cc4      	adds	r4, r0, #3
 800a574:	f024 0403 	bic.w	r4, r4, #3
 800a578:	42a0      	cmp	r0, r4
 800a57a:	d007      	beq.n	800a58c <sbrk_aligned+0x38>
 800a57c:	1a21      	subs	r1, r4, r0
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f9d8 	bl	800a934 <_sbrk_r>
 800a584:	3001      	adds	r0, #1
 800a586:	d101      	bne.n	800a58c <sbrk_aligned+0x38>
 800a588:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a58c:	4620      	mov	r0, r4
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	200003e0 	.word	0x200003e0

0800a594 <_malloc_r>:
 800a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a598:	1ccd      	adds	r5, r1, #3
 800a59a:	f025 0503 	bic.w	r5, r5, #3
 800a59e:	3508      	adds	r5, #8
 800a5a0:	2d0c      	cmp	r5, #12
 800a5a2:	bf38      	it	cc
 800a5a4:	250c      	movcc	r5, #12
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	db01      	blt.n	800a5b0 <_malloc_r+0x1c>
 800a5ac:	42a9      	cmp	r1, r5
 800a5ae:	d905      	bls.n	800a5bc <_malloc_r+0x28>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	2600      	movs	r6, #0
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5bc:	4e2e      	ldr	r6, [pc, #184]	; (800a678 <_malloc_r+0xe4>)
 800a5be:	f000 fa25 	bl	800aa0c <__malloc_lock>
 800a5c2:	6833      	ldr	r3, [r6, #0]
 800a5c4:	461c      	mov	r4, r3
 800a5c6:	bb34      	cbnz	r4, 800a616 <_malloc_r+0x82>
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f7ff ffc2 	bl	800a554 <sbrk_aligned>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	d14d      	bne.n	800a672 <_malloc_r+0xde>
 800a5d6:	6834      	ldr	r4, [r6, #0]
 800a5d8:	4626      	mov	r6, r4
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	d140      	bne.n	800a660 <_malloc_r+0xcc>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	eb04 0803 	add.w	r8, r4, r3
 800a5e8:	f000 f9a4 	bl	800a934 <_sbrk_r>
 800a5ec:	4580      	cmp	r8, r0
 800a5ee:	d13a      	bne.n	800a666 <_malloc_r+0xd2>
 800a5f0:	6821      	ldr	r1, [r4, #0]
 800a5f2:	3503      	adds	r5, #3
 800a5f4:	1a6d      	subs	r5, r5, r1
 800a5f6:	f025 0503 	bic.w	r5, r5, #3
 800a5fa:	3508      	adds	r5, #8
 800a5fc:	2d0c      	cmp	r5, #12
 800a5fe:	bf38      	it	cc
 800a600:	250c      	movcc	r5, #12
 800a602:	4629      	mov	r1, r5
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff ffa5 	bl	800a554 <sbrk_aligned>
 800a60a:	3001      	adds	r0, #1
 800a60c:	d02b      	beq.n	800a666 <_malloc_r+0xd2>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	442b      	add	r3, r5
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	e00e      	b.n	800a634 <_malloc_r+0xa0>
 800a616:	6822      	ldr	r2, [r4, #0]
 800a618:	1b52      	subs	r2, r2, r5
 800a61a:	d41e      	bmi.n	800a65a <_malloc_r+0xc6>
 800a61c:	2a0b      	cmp	r2, #11
 800a61e:	d916      	bls.n	800a64e <_malloc_r+0xba>
 800a620:	1961      	adds	r1, r4, r5
 800a622:	42a3      	cmp	r3, r4
 800a624:	6025      	str	r5, [r4, #0]
 800a626:	bf18      	it	ne
 800a628:	6059      	strne	r1, [r3, #4]
 800a62a:	6863      	ldr	r3, [r4, #4]
 800a62c:	bf08      	it	eq
 800a62e:	6031      	streq	r1, [r6, #0]
 800a630:	5162      	str	r2, [r4, r5]
 800a632:	604b      	str	r3, [r1, #4]
 800a634:	4638      	mov	r0, r7
 800a636:	f104 060b 	add.w	r6, r4, #11
 800a63a:	f000 f9ed 	bl	800aa18 <__malloc_unlock>
 800a63e:	f026 0607 	bic.w	r6, r6, #7
 800a642:	1d23      	adds	r3, r4, #4
 800a644:	1af2      	subs	r2, r6, r3
 800a646:	d0b6      	beq.n	800a5b6 <_malloc_r+0x22>
 800a648:	1b9b      	subs	r3, r3, r6
 800a64a:	50a3      	str	r3, [r4, r2]
 800a64c:	e7b3      	b.n	800a5b6 <_malloc_r+0x22>
 800a64e:	6862      	ldr	r2, [r4, #4]
 800a650:	42a3      	cmp	r3, r4
 800a652:	bf0c      	ite	eq
 800a654:	6032      	streq	r2, [r6, #0]
 800a656:	605a      	strne	r2, [r3, #4]
 800a658:	e7ec      	b.n	800a634 <_malloc_r+0xa0>
 800a65a:	4623      	mov	r3, r4
 800a65c:	6864      	ldr	r4, [r4, #4]
 800a65e:	e7b2      	b.n	800a5c6 <_malloc_r+0x32>
 800a660:	4634      	mov	r4, r6
 800a662:	6876      	ldr	r6, [r6, #4]
 800a664:	e7b9      	b.n	800a5da <_malloc_r+0x46>
 800a666:	230c      	movs	r3, #12
 800a668:	603b      	str	r3, [r7, #0]
 800a66a:	4638      	mov	r0, r7
 800a66c:	f000 f9d4 	bl	800aa18 <__malloc_unlock>
 800a670:	e7a1      	b.n	800a5b6 <_malloc_r+0x22>
 800a672:	6025      	str	r5, [r4, #0]
 800a674:	e7de      	b.n	800a634 <_malloc_r+0xa0>
 800a676:	bf00      	nop
 800a678:	200003dc 	.word	0x200003dc

0800a67c <__ssputs_r>:
 800a67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a680:	688e      	ldr	r6, [r1, #8]
 800a682:	429e      	cmp	r6, r3
 800a684:	4682      	mov	sl, r0
 800a686:	460c      	mov	r4, r1
 800a688:	4690      	mov	r8, r2
 800a68a:	461f      	mov	r7, r3
 800a68c:	d838      	bhi.n	800a700 <__ssputs_r+0x84>
 800a68e:	898a      	ldrh	r2, [r1, #12]
 800a690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a694:	d032      	beq.n	800a6fc <__ssputs_r+0x80>
 800a696:	6825      	ldr	r5, [r4, #0]
 800a698:	6909      	ldr	r1, [r1, #16]
 800a69a:	eba5 0901 	sub.w	r9, r5, r1
 800a69e:	6965      	ldr	r5, [r4, #20]
 800a6a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	444b      	add	r3, r9
 800a6ac:	106d      	asrs	r5, r5, #1
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	bf38      	it	cc
 800a6b2:	461d      	movcc	r5, r3
 800a6b4:	0553      	lsls	r3, r2, #21
 800a6b6:	d531      	bpl.n	800a71c <__ssputs_r+0xa0>
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	f7ff ff6b 	bl	800a594 <_malloc_r>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	b950      	cbnz	r0, 800a6d8 <__ssputs_r+0x5c>
 800a6c2:	230c      	movs	r3, #12
 800a6c4:	f8ca 3000 	str.w	r3, [sl]
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d8:	6921      	ldr	r1, [r4, #16]
 800a6da:	464a      	mov	r2, r9
 800a6dc:	f7ff fb46 	bl	8009d6c <memcpy>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	6126      	str	r6, [r4, #16]
 800a6ee:	6165      	str	r5, [r4, #20]
 800a6f0:	444e      	add	r6, r9
 800a6f2:	eba5 0509 	sub.w	r5, r5, r9
 800a6f6:	6026      	str	r6, [r4, #0]
 800a6f8:	60a5      	str	r5, [r4, #8]
 800a6fa:	463e      	mov	r6, r7
 800a6fc:	42be      	cmp	r6, r7
 800a6fe:	d900      	bls.n	800a702 <__ssputs_r+0x86>
 800a700:	463e      	mov	r6, r7
 800a702:	6820      	ldr	r0, [r4, #0]
 800a704:	4632      	mov	r2, r6
 800a706:	4641      	mov	r1, r8
 800a708:	f000 f966 	bl	800a9d8 <memmove>
 800a70c:	68a3      	ldr	r3, [r4, #8]
 800a70e:	1b9b      	subs	r3, r3, r6
 800a710:	60a3      	str	r3, [r4, #8]
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	4433      	add	r3, r6
 800a716:	6023      	str	r3, [r4, #0]
 800a718:	2000      	movs	r0, #0
 800a71a:	e7db      	b.n	800a6d4 <__ssputs_r+0x58>
 800a71c:	462a      	mov	r2, r5
 800a71e:	f000 f981 	bl	800aa24 <_realloc_r>
 800a722:	4606      	mov	r6, r0
 800a724:	2800      	cmp	r0, #0
 800a726:	d1e1      	bne.n	800a6ec <__ssputs_r+0x70>
 800a728:	6921      	ldr	r1, [r4, #16]
 800a72a:	4650      	mov	r0, sl
 800a72c:	f7ff fec6 	bl	800a4bc <_free_r>
 800a730:	e7c7      	b.n	800a6c2 <__ssputs_r+0x46>
	...

0800a734 <_svfiprintf_r>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	4698      	mov	r8, r3
 800a73a:	898b      	ldrh	r3, [r1, #12]
 800a73c:	061b      	lsls	r3, r3, #24
 800a73e:	b09d      	sub	sp, #116	; 0x74
 800a740:	4607      	mov	r7, r0
 800a742:	460d      	mov	r5, r1
 800a744:	4614      	mov	r4, r2
 800a746:	d50e      	bpl.n	800a766 <_svfiprintf_r+0x32>
 800a748:	690b      	ldr	r3, [r1, #16]
 800a74a:	b963      	cbnz	r3, 800a766 <_svfiprintf_r+0x32>
 800a74c:	2140      	movs	r1, #64	; 0x40
 800a74e:	f7ff ff21 	bl	800a594 <_malloc_r>
 800a752:	6028      	str	r0, [r5, #0]
 800a754:	6128      	str	r0, [r5, #16]
 800a756:	b920      	cbnz	r0, 800a762 <_svfiprintf_r+0x2e>
 800a758:	230c      	movs	r3, #12
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a760:	e0d1      	b.n	800a906 <_svfiprintf_r+0x1d2>
 800a762:	2340      	movs	r3, #64	; 0x40
 800a764:	616b      	str	r3, [r5, #20]
 800a766:	2300      	movs	r3, #0
 800a768:	9309      	str	r3, [sp, #36]	; 0x24
 800a76a:	2320      	movs	r3, #32
 800a76c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a770:	f8cd 800c 	str.w	r8, [sp, #12]
 800a774:	2330      	movs	r3, #48	; 0x30
 800a776:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a920 <_svfiprintf_r+0x1ec>
 800a77a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a77e:	f04f 0901 	mov.w	r9, #1
 800a782:	4623      	mov	r3, r4
 800a784:	469a      	mov	sl, r3
 800a786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a78a:	b10a      	cbz	r2, 800a790 <_svfiprintf_r+0x5c>
 800a78c:	2a25      	cmp	r2, #37	; 0x25
 800a78e:	d1f9      	bne.n	800a784 <_svfiprintf_r+0x50>
 800a790:	ebba 0b04 	subs.w	fp, sl, r4
 800a794:	d00b      	beq.n	800a7ae <_svfiprintf_r+0x7a>
 800a796:	465b      	mov	r3, fp
 800a798:	4622      	mov	r2, r4
 800a79a:	4629      	mov	r1, r5
 800a79c:	4638      	mov	r0, r7
 800a79e:	f7ff ff6d 	bl	800a67c <__ssputs_r>
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	f000 80aa 	beq.w	800a8fc <_svfiprintf_r+0x1c8>
 800a7a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7aa:	445a      	add	r2, fp
 800a7ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 80a2 	beq.w	800a8fc <_svfiprintf_r+0x1c8>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7c2:	f10a 0a01 	add.w	sl, sl, #1
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	9307      	str	r3, [sp, #28]
 800a7ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a7d0:	4654      	mov	r4, sl
 800a7d2:	2205      	movs	r2, #5
 800a7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d8:	4851      	ldr	r0, [pc, #324]	; (800a920 <_svfiprintf_r+0x1ec>)
 800a7da:	f7f5 fd01 	bl	80001e0 <memchr>
 800a7de:	9a04      	ldr	r2, [sp, #16]
 800a7e0:	b9d8      	cbnz	r0, 800a81a <_svfiprintf_r+0xe6>
 800a7e2:	06d0      	lsls	r0, r2, #27
 800a7e4:	bf44      	itt	mi
 800a7e6:	2320      	movmi	r3, #32
 800a7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ec:	0711      	lsls	r1, r2, #28
 800a7ee:	bf44      	itt	mi
 800a7f0:	232b      	movmi	r3, #43	; 0x2b
 800a7f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a7fc:	d015      	beq.n	800a82a <_svfiprintf_r+0xf6>
 800a7fe:	9a07      	ldr	r2, [sp, #28]
 800a800:	4654      	mov	r4, sl
 800a802:	2000      	movs	r0, #0
 800a804:	f04f 0c0a 	mov.w	ip, #10
 800a808:	4621      	mov	r1, r4
 800a80a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a80e:	3b30      	subs	r3, #48	; 0x30
 800a810:	2b09      	cmp	r3, #9
 800a812:	d94e      	bls.n	800a8b2 <_svfiprintf_r+0x17e>
 800a814:	b1b0      	cbz	r0, 800a844 <_svfiprintf_r+0x110>
 800a816:	9207      	str	r2, [sp, #28]
 800a818:	e014      	b.n	800a844 <_svfiprintf_r+0x110>
 800a81a:	eba0 0308 	sub.w	r3, r0, r8
 800a81e:	fa09 f303 	lsl.w	r3, r9, r3
 800a822:	4313      	orrs	r3, r2
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	46a2      	mov	sl, r4
 800a828:	e7d2      	b.n	800a7d0 <_svfiprintf_r+0x9c>
 800a82a:	9b03      	ldr	r3, [sp, #12]
 800a82c:	1d19      	adds	r1, r3, #4
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	9103      	str	r1, [sp, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	bfbb      	ittet	lt
 800a836:	425b      	neglt	r3, r3
 800a838:	f042 0202 	orrlt.w	r2, r2, #2
 800a83c:	9307      	strge	r3, [sp, #28]
 800a83e:	9307      	strlt	r3, [sp, #28]
 800a840:	bfb8      	it	lt
 800a842:	9204      	strlt	r2, [sp, #16]
 800a844:	7823      	ldrb	r3, [r4, #0]
 800a846:	2b2e      	cmp	r3, #46	; 0x2e
 800a848:	d10c      	bne.n	800a864 <_svfiprintf_r+0x130>
 800a84a:	7863      	ldrb	r3, [r4, #1]
 800a84c:	2b2a      	cmp	r3, #42	; 0x2a
 800a84e:	d135      	bne.n	800a8bc <_svfiprintf_r+0x188>
 800a850:	9b03      	ldr	r3, [sp, #12]
 800a852:	1d1a      	adds	r2, r3, #4
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	9203      	str	r2, [sp, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	bfb8      	it	lt
 800a85c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a860:	3402      	adds	r4, #2
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a930 <_svfiprintf_r+0x1fc>
 800a868:	7821      	ldrb	r1, [r4, #0]
 800a86a:	2203      	movs	r2, #3
 800a86c:	4650      	mov	r0, sl
 800a86e:	f7f5 fcb7 	bl	80001e0 <memchr>
 800a872:	b140      	cbz	r0, 800a886 <_svfiprintf_r+0x152>
 800a874:	2340      	movs	r3, #64	; 0x40
 800a876:	eba0 000a 	sub.w	r0, r0, sl
 800a87a:	fa03 f000 	lsl.w	r0, r3, r0
 800a87e:	9b04      	ldr	r3, [sp, #16]
 800a880:	4303      	orrs	r3, r0
 800a882:	3401      	adds	r4, #1
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a88a:	4826      	ldr	r0, [pc, #152]	; (800a924 <_svfiprintf_r+0x1f0>)
 800a88c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a890:	2206      	movs	r2, #6
 800a892:	f7f5 fca5 	bl	80001e0 <memchr>
 800a896:	2800      	cmp	r0, #0
 800a898:	d038      	beq.n	800a90c <_svfiprintf_r+0x1d8>
 800a89a:	4b23      	ldr	r3, [pc, #140]	; (800a928 <_svfiprintf_r+0x1f4>)
 800a89c:	bb1b      	cbnz	r3, 800a8e6 <_svfiprintf_r+0x1b2>
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	3307      	adds	r3, #7
 800a8a2:	f023 0307 	bic.w	r3, r3, #7
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	9303      	str	r3, [sp, #12]
 800a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ac:	4433      	add	r3, r6
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	e767      	b.n	800a782 <_svfiprintf_r+0x4e>
 800a8b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	e7a5      	b.n	800a808 <_svfiprintf_r+0xd4>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	3401      	adds	r4, #1
 800a8c0:	9305      	str	r3, [sp, #20]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	f04f 0c0a 	mov.w	ip, #10
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ce:	3a30      	subs	r2, #48	; 0x30
 800a8d0:	2a09      	cmp	r2, #9
 800a8d2:	d903      	bls.n	800a8dc <_svfiprintf_r+0x1a8>
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0c5      	beq.n	800a864 <_svfiprintf_r+0x130>
 800a8d8:	9105      	str	r1, [sp, #20]
 800a8da:	e7c3      	b.n	800a864 <_svfiprintf_r+0x130>
 800a8dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e7f0      	b.n	800a8c8 <_svfiprintf_r+0x194>
 800a8e6:	ab03      	add	r3, sp, #12
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	462a      	mov	r2, r5
 800a8ec:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <_svfiprintf_r+0x1f8>)
 800a8ee:	a904      	add	r1, sp, #16
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7fd ffcb 	bl	800888c <_printf_float>
 800a8f6:	1c42      	adds	r2, r0, #1
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	d1d6      	bne.n	800a8aa <_svfiprintf_r+0x176>
 800a8fc:	89ab      	ldrh	r3, [r5, #12]
 800a8fe:	065b      	lsls	r3, r3, #25
 800a900:	f53f af2c 	bmi.w	800a75c <_svfiprintf_r+0x28>
 800a904:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a906:	b01d      	add	sp, #116	; 0x74
 800a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90c:	ab03      	add	r3, sp, #12
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	462a      	mov	r2, r5
 800a912:	4b06      	ldr	r3, [pc, #24]	; (800a92c <_svfiprintf_r+0x1f8>)
 800a914:	a904      	add	r1, sp, #16
 800a916:	4638      	mov	r0, r7
 800a918:	f7fe fa5c 	bl	8008dd4 <_printf_i>
 800a91c:	e7eb      	b.n	800a8f6 <_svfiprintf_r+0x1c2>
 800a91e:	bf00      	nop
 800a920:	0800b874 	.word	0x0800b874
 800a924:	0800b87e 	.word	0x0800b87e
 800a928:	0800888d 	.word	0x0800888d
 800a92c:	0800a67d 	.word	0x0800a67d
 800a930:	0800b87a 	.word	0x0800b87a

0800a934 <_sbrk_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d06      	ldr	r5, [pc, #24]	; (800a950 <_sbrk_r+0x1c>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f7 f88c 	bl	8001a5c <_sbrk>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_sbrk_r+0x1a>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_sbrk_r+0x1a>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	200003e4 	.word	0x200003e4

0800a954 <__assert_func>:
 800a954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a956:	4614      	mov	r4, r2
 800a958:	461a      	mov	r2, r3
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <__assert_func+0x2c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4605      	mov	r5, r0
 800a960:	68d8      	ldr	r0, [r3, #12]
 800a962:	b14c      	cbz	r4, 800a978 <__assert_func+0x24>
 800a964:	4b07      	ldr	r3, [pc, #28]	; (800a984 <__assert_func+0x30>)
 800a966:	9100      	str	r1, [sp, #0]
 800a968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a96c:	4906      	ldr	r1, [pc, #24]	; (800a988 <__assert_func+0x34>)
 800a96e:	462b      	mov	r3, r5
 800a970:	f000 f80e 	bl	800a990 <fiprintf>
 800a974:	f000 faac 	bl	800aed0 <abort>
 800a978:	4b04      	ldr	r3, [pc, #16]	; (800a98c <__assert_func+0x38>)
 800a97a:	461c      	mov	r4, r3
 800a97c:	e7f3      	b.n	800a966 <__assert_func+0x12>
 800a97e:	bf00      	nop
 800a980:	2000000c 	.word	0x2000000c
 800a984:	0800b885 	.word	0x0800b885
 800a988:	0800b892 	.word	0x0800b892
 800a98c:	0800b8c0 	.word	0x0800b8c0

0800a990 <fiprintf>:
 800a990:	b40e      	push	{r1, r2, r3}
 800a992:	b503      	push	{r0, r1, lr}
 800a994:	4601      	mov	r1, r0
 800a996:	ab03      	add	r3, sp, #12
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <fiprintf+0x20>)
 800a99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99e:	6800      	ldr	r0, [r0, #0]
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	f000 f897 	bl	800aad4 <_vfiprintf_r>
 800a9a6:	b002      	add	sp, #8
 800a9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9ac:	b003      	add	sp, #12
 800a9ae:	4770      	bx	lr
 800a9b0:	2000000c 	.word	0x2000000c

0800a9b4 <__ascii_mbtowc>:
 800a9b4:	b082      	sub	sp, #8
 800a9b6:	b901      	cbnz	r1, 800a9ba <__ascii_mbtowc+0x6>
 800a9b8:	a901      	add	r1, sp, #4
 800a9ba:	b142      	cbz	r2, 800a9ce <__ascii_mbtowc+0x1a>
 800a9bc:	b14b      	cbz	r3, 800a9d2 <__ascii_mbtowc+0x1e>
 800a9be:	7813      	ldrb	r3, [r2, #0]
 800a9c0:	600b      	str	r3, [r1, #0]
 800a9c2:	7812      	ldrb	r2, [r2, #0]
 800a9c4:	1e10      	subs	r0, r2, #0
 800a9c6:	bf18      	it	ne
 800a9c8:	2001      	movne	r0, #1
 800a9ca:	b002      	add	sp, #8
 800a9cc:	4770      	bx	lr
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	e7fb      	b.n	800a9ca <__ascii_mbtowc+0x16>
 800a9d2:	f06f 0001 	mvn.w	r0, #1
 800a9d6:	e7f8      	b.n	800a9ca <__ascii_mbtowc+0x16>

0800a9d8 <memmove>:
 800a9d8:	4288      	cmp	r0, r1
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	eb01 0402 	add.w	r4, r1, r2
 800a9e0:	d902      	bls.n	800a9e8 <memmove+0x10>
 800a9e2:	4284      	cmp	r4, r0
 800a9e4:	4623      	mov	r3, r4
 800a9e6:	d807      	bhi.n	800a9f8 <memmove+0x20>
 800a9e8:	1e43      	subs	r3, r0, #1
 800a9ea:	42a1      	cmp	r1, r4
 800a9ec:	d008      	beq.n	800aa00 <memmove+0x28>
 800a9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9f6:	e7f8      	b.n	800a9ea <memmove+0x12>
 800a9f8:	4402      	add	r2, r0
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	428a      	cmp	r2, r1
 800a9fe:	d100      	bne.n	800aa02 <memmove+0x2a>
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa0a:	e7f7      	b.n	800a9fc <memmove+0x24>

0800aa0c <__malloc_lock>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	; (800aa14 <__malloc_lock+0x8>)
 800aa0e:	f000 bc1f 	b.w	800b250 <__retarget_lock_acquire_recursive>
 800aa12:	bf00      	nop
 800aa14:	200003e8 	.word	0x200003e8

0800aa18 <__malloc_unlock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__malloc_unlock+0x8>)
 800aa1a:	f000 bc1a 	b.w	800b252 <__retarget_lock_release_recursive>
 800aa1e:	bf00      	nop
 800aa20:	200003e8 	.word	0x200003e8

0800aa24 <_realloc_r>:
 800aa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4614      	mov	r4, r2
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	b921      	cbnz	r1, 800aa3a <_realloc_r+0x16>
 800aa30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa34:	4611      	mov	r1, r2
 800aa36:	f7ff bdad 	b.w	800a594 <_malloc_r>
 800aa3a:	b92a      	cbnz	r2, 800aa48 <_realloc_r+0x24>
 800aa3c:	f7ff fd3e 	bl	800a4bc <_free_r>
 800aa40:	4625      	mov	r5, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	f000 fc6a 	bl	800b320 <_malloc_usable_size_r>
 800aa4c:	4284      	cmp	r4, r0
 800aa4e:	4607      	mov	r7, r0
 800aa50:	d802      	bhi.n	800aa58 <_realloc_r+0x34>
 800aa52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa56:	d812      	bhi.n	800aa7e <_realloc_r+0x5a>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f7ff fd9a 	bl	800a594 <_malloc_r>
 800aa60:	4605      	mov	r5, r0
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d0ed      	beq.n	800aa42 <_realloc_r+0x1e>
 800aa66:	42bc      	cmp	r4, r7
 800aa68:	4622      	mov	r2, r4
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	bf28      	it	cs
 800aa6e:	463a      	movcs	r2, r7
 800aa70:	f7ff f97c 	bl	8009d6c <memcpy>
 800aa74:	4631      	mov	r1, r6
 800aa76:	4640      	mov	r0, r8
 800aa78:	f7ff fd20 	bl	800a4bc <_free_r>
 800aa7c:	e7e1      	b.n	800aa42 <_realloc_r+0x1e>
 800aa7e:	4635      	mov	r5, r6
 800aa80:	e7df      	b.n	800aa42 <_realloc_r+0x1e>

0800aa82 <__sfputc_r>:
 800aa82:	6893      	ldr	r3, [r2, #8]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	b410      	push	{r4}
 800aa8a:	6093      	str	r3, [r2, #8]
 800aa8c:	da08      	bge.n	800aaa0 <__sfputc_r+0x1e>
 800aa8e:	6994      	ldr	r4, [r2, #24]
 800aa90:	42a3      	cmp	r3, r4
 800aa92:	db01      	blt.n	800aa98 <__sfputc_r+0x16>
 800aa94:	290a      	cmp	r1, #10
 800aa96:	d103      	bne.n	800aaa0 <__sfputc_r+0x1e>
 800aa98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa9c:	f000 b94a 	b.w	800ad34 <__swbuf_r>
 800aaa0:	6813      	ldr	r3, [r2, #0]
 800aaa2:	1c58      	adds	r0, r3, #1
 800aaa4:	6010      	str	r0, [r2, #0]
 800aaa6:	7019      	strb	r1, [r3, #0]
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <__sfputs_r>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	4606      	mov	r6, r0
 800aab4:	460f      	mov	r7, r1
 800aab6:	4614      	mov	r4, r2
 800aab8:	18d5      	adds	r5, r2, r3
 800aaba:	42ac      	cmp	r4, r5
 800aabc:	d101      	bne.n	800aac2 <__sfputs_r+0x12>
 800aabe:	2000      	movs	r0, #0
 800aac0:	e007      	b.n	800aad2 <__sfputs_r+0x22>
 800aac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac6:	463a      	mov	r2, r7
 800aac8:	4630      	mov	r0, r6
 800aaca:	f7ff ffda 	bl	800aa82 <__sfputc_r>
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	d1f3      	bne.n	800aaba <__sfputs_r+0xa>
 800aad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aad4 <_vfiprintf_r>:
 800aad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad8:	460d      	mov	r5, r1
 800aada:	b09d      	sub	sp, #116	; 0x74
 800aadc:	4614      	mov	r4, r2
 800aade:	4698      	mov	r8, r3
 800aae0:	4606      	mov	r6, r0
 800aae2:	b118      	cbz	r0, 800aaec <_vfiprintf_r+0x18>
 800aae4:	6983      	ldr	r3, [r0, #24]
 800aae6:	b90b      	cbnz	r3, 800aaec <_vfiprintf_r+0x18>
 800aae8:	f000 fb14 	bl	800b114 <__sinit>
 800aaec:	4b89      	ldr	r3, [pc, #548]	; (800ad14 <_vfiprintf_r+0x240>)
 800aaee:	429d      	cmp	r5, r3
 800aaf0:	d11b      	bne.n	800ab2a <_vfiprintf_r+0x56>
 800aaf2:	6875      	ldr	r5, [r6, #4]
 800aaf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaf6:	07d9      	lsls	r1, r3, #31
 800aaf8:	d405      	bmi.n	800ab06 <_vfiprintf_r+0x32>
 800aafa:	89ab      	ldrh	r3, [r5, #12]
 800aafc:	059a      	lsls	r2, r3, #22
 800aafe:	d402      	bmi.n	800ab06 <_vfiprintf_r+0x32>
 800ab00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab02:	f000 fba5 	bl	800b250 <__retarget_lock_acquire_recursive>
 800ab06:	89ab      	ldrh	r3, [r5, #12]
 800ab08:	071b      	lsls	r3, r3, #28
 800ab0a:	d501      	bpl.n	800ab10 <_vfiprintf_r+0x3c>
 800ab0c:	692b      	ldr	r3, [r5, #16]
 800ab0e:	b9eb      	cbnz	r3, 800ab4c <_vfiprintf_r+0x78>
 800ab10:	4629      	mov	r1, r5
 800ab12:	4630      	mov	r0, r6
 800ab14:	f000 f96e 	bl	800adf4 <__swsetup_r>
 800ab18:	b1c0      	cbz	r0, 800ab4c <_vfiprintf_r+0x78>
 800ab1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab1c:	07dc      	lsls	r4, r3, #31
 800ab1e:	d50e      	bpl.n	800ab3e <_vfiprintf_r+0x6a>
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab24:	b01d      	add	sp, #116	; 0x74
 800ab26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2a:	4b7b      	ldr	r3, [pc, #492]	; (800ad18 <_vfiprintf_r+0x244>)
 800ab2c:	429d      	cmp	r5, r3
 800ab2e:	d101      	bne.n	800ab34 <_vfiprintf_r+0x60>
 800ab30:	68b5      	ldr	r5, [r6, #8]
 800ab32:	e7df      	b.n	800aaf4 <_vfiprintf_r+0x20>
 800ab34:	4b79      	ldr	r3, [pc, #484]	; (800ad1c <_vfiprintf_r+0x248>)
 800ab36:	429d      	cmp	r5, r3
 800ab38:	bf08      	it	eq
 800ab3a:	68f5      	ldreq	r5, [r6, #12]
 800ab3c:	e7da      	b.n	800aaf4 <_vfiprintf_r+0x20>
 800ab3e:	89ab      	ldrh	r3, [r5, #12]
 800ab40:	0598      	lsls	r0, r3, #22
 800ab42:	d4ed      	bmi.n	800ab20 <_vfiprintf_r+0x4c>
 800ab44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab46:	f000 fb84 	bl	800b252 <__retarget_lock_release_recursive>
 800ab4a:	e7e9      	b.n	800ab20 <_vfiprintf_r+0x4c>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	2320      	movs	r3, #32
 800ab52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab5a:	2330      	movs	r3, #48	; 0x30
 800ab5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad20 <_vfiprintf_r+0x24c>
 800ab60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab64:	f04f 0901 	mov.w	r9, #1
 800ab68:	4623      	mov	r3, r4
 800ab6a:	469a      	mov	sl, r3
 800ab6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab70:	b10a      	cbz	r2, 800ab76 <_vfiprintf_r+0xa2>
 800ab72:	2a25      	cmp	r2, #37	; 0x25
 800ab74:	d1f9      	bne.n	800ab6a <_vfiprintf_r+0x96>
 800ab76:	ebba 0b04 	subs.w	fp, sl, r4
 800ab7a:	d00b      	beq.n	800ab94 <_vfiprintf_r+0xc0>
 800ab7c:	465b      	mov	r3, fp
 800ab7e:	4622      	mov	r2, r4
 800ab80:	4629      	mov	r1, r5
 800ab82:	4630      	mov	r0, r6
 800ab84:	f7ff ff94 	bl	800aab0 <__sfputs_r>
 800ab88:	3001      	adds	r0, #1
 800ab8a:	f000 80aa 	beq.w	800ace2 <_vfiprintf_r+0x20e>
 800ab8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab90:	445a      	add	r2, fp
 800ab92:	9209      	str	r2, [sp, #36]	; 0x24
 800ab94:	f89a 3000 	ldrb.w	r3, [sl]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 80a2 	beq.w	800ace2 <_vfiprintf_r+0x20e>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aba8:	f10a 0a01 	add.w	sl, sl, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	9307      	str	r3, [sp, #28]
 800abb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abb4:	931a      	str	r3, [sp, #104]	; 0x68
 800abb6:	4654      	mov	r4, sl
 800abb8:	2205      	movs	r2, #5
 800abba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abbe:	4858      	ldr	r0, [pc, #352]	; (800ad20 <_vfiprintf_r+0x24c>)
 800abc0:	f7f5 fb0e 	bl	80001e0 <memchr>
 800abc4:	9a04      	ldr	r2, [sp, #16]
 800abc6:	b9d8      	cbnz	r0, 800ac00 <_vfiprintf_r+0x12c>
 800abc8:	06d1      	lsls	r1, r2, #27
 800abca:	bf44      	itt	mi
 800abcc:	2320      	movmi	r3, #32
 800abce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abd2:	0713      	lsls	r3, r2, #28
 800abd4:	bf44      	itt	mi
 800abd6:	232b      	movmi	r3, #43	; 0x2b
 800abd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abdc:	f89a 3000 	ldrb.w	r3, [sl]
 800abe0:	2b2a      	cmp	r3, #42	; 0x2a
 800abe2:	d015      	beq.n	800ac10 <_vfiprintf_r+0x13c>
 800abe4:	9a07      	ldr	r2, [sp, #28]
 800abe6:	4654      	mov	r4, sl
 800abe8:	2000      	movs	r0, #0
 800abea:	f04f 0c0a 	mov.w	ip, #10
 800abee:	4621      	mov	r1, r4
 800abf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abf4:	3b30      	subs	r3, #48	; 0x30
 800abf6:	2b09      	cmp	r3, #9
 800abf8:	d94e      	bls.n	800ac98 <_vfiprintf_r+0x1c4>
 800abfa:	b1b0      	cbz	r0, 800ac2a <_vfiprintf_r+0x156>
 800abfc:	9207      	str	r2, [sp, #28]
 800abfe:	e014      	b.n	800ac2a <_vfiprintf_r+0x156>
 800ac00:	eba0 0308 	sub.w	r3, r0, r8
 800ac04:	fa09 f303 	lsl.w	r3, r9, r3
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	9304      	str	r3, [sp, #16]
 800ac0c:	46a2      	mov	sl, r4
 800ac0e:	e7d2      	b.n	800abb6 <_vfiprintf_r+0xe2>
 800ac10:	9b03      	ldr	r3, [sp, #12]
 800ac12:	1d19      	adds	r1, r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	9103      	str	r1, [sp, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	bfbb      	ittet	lt
 800ac1c:	425b      	neglt	r3, r3
 800ac1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac22:	9307      	strge	r3, [sp, #28]
 800ac24:	9307      	strlt	r3, [sp, #28]
 800ac26:	bfb8      	it	lt
 800ac28:	9204      	strlt	r2, [sp, #16]
 800ac2a:	7823      	ldrb	r3, [r4, #0]
 800ac2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac2e:	d10c      	bne.n	800ac4a <_vfiprintf_r+0x176>
 800ac30:	7863      	ldrb	r3, [r4, #1]
 800ac32:	2b2a      	cmp	r3, #42	; 0x2a
 800ac34:	d135      	bne.n	800aca2 <_vfiprintf_r+0x1ce>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	1d1a      	adds	r2, r3, #4
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	9203      	str	r2, [sp, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bfb8      	it	lt
 800ac42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac46:	3402      	adds	r4, #2
 800ac48:	9305      	str	r3, [sp, #20]
 800ac4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad30 <_vfiprintf_r+0x25c>
 800ac4e:	7821      	ldrb	r1, [r4, #0]
 800ac50:	2203      	movs	r2, #3
 800ac52:	4650      	mov	r0, sl
 800ac54:	f7f5 fac4 	bl	80001e0 <memchr>
 800ac58:	b140      	cbz	r0, 800ac6c <_vfiprintf_r+0x198>
 800ac5a:	2340      	movs	r3, #64	; 0x40
 800ac5c:	eba0 000a 	sub.w	r0, r0, sl
 800ac60:	fa03 f000 	lsl.w	r0, r3, r0
 800ac64:	9b04      	ldr	r3, [sp, #16]
 800ac66:	4303      	orrs	r3, r0
 800ac68:	3401      	adds	r4, #1
 800ac6a:	9304      	str	r3, [sp, #16]
 800ac6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac70:	482c      	ldr	r0, [pc, #176]	; (800ad24 <_vfiprintf_r+0x250>)
 800ac72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac76:	2206      	movs	r2, #6
 800ac78:	f7f5 fab2 	bl	80001e0 <memchr>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d03f      	beq.n	800ad00 <_vfiprintf_r+0x22c>
 800ac80:	4b29      	ldr	r3, [pc, #164]	; (800ad28 <_vfiprintf_r+0x254>)
 800ac82:	bb1b      	cbnz	r3, 800accc <_vfiprintf_r+0x1f8>
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	3307      	adds	r3, #7
 800ac88:	f023 0307 	bic.w	r3, r3, #7
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	9303      	str	r3, [sp, #12]
 800ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac92:	443b      	add	r3, r7
 800ac94:	9309      	str	r3, [sp, #36]	; 0x24
 800ac96:	e767      	b.n	800ab68 <_vfiprintf_r+0x94>
 800ac98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	2001      	movs	r0, #1
 800aca0:	e7a5      	b.n	800abee <_vfiprintf_r+0x11a>
 800aca2:	2300      	movs	r3, #0
 800aca4:	3401      	adds	r4, #1
 800aca6:	9305      	str	r3, [sp, #20]
 800aca8:	4619      	mov	r1, r3
 800acaa:	f04f 0c0a 	mov.w	ip, #10
 800acae:	4620      	mov	r0, r4
 800acb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb4:	3a30      	subs	r2, #48	; 0x30
 800acb6:	2a09      	cmp	r2, #9
 800acb8:	d903      	bls.n	800acc2 <_vfiprintf_r+0x1ee>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0c5      	beq.n	800ac4a <_vfiprintf_r+0x176>
 800acbe:	9105      	str	r1, [sp, #20]
 800acc0:	e7c3      	b.n	800ac4a <_vfiprintf_r+0x176>
 800acc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acc6:	4604      	mov	r4, r0
 800acc8:	2301      	movs	r3, #1
 800acca:	e7f0      	b.n	800acae <_vfiprintf_r+0x1da>
 800accc:	ab03      	add	r3, sp, #12
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	462a      	mov	r2, r5
 800acd2:	4b16      	ldr	r3, [pc, #88]	; (800ad2c <_vfiprintf_r+0x258>)
 800acd4:	a904      	add	r1, sp, #16
 800acd6:	4630      	mov	r0, r6
 800acd8:	f7fd fdd8 	bl	800888c <_printf_float>
 800acdc:	4607      	mov	r7, r0
 800acde:	1c78      	adds	r0, r7, #1
 800ace0:	d1d6      	bne.n	800ac90 <_vfiprintf_r+0x1bc>
 800ace2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace4:	07d9      	lsls	r1, r3, #31
 800ace6:	d405      	bmi.n	800acf4 <_vfiprintf_r+0x220>
 800ace8:	89ab      	ldrh	r3, [r5, #12]
 800acea:	059a      	lsls	r2, r3, #22
 800acec:	d402      	bmi.n	800acf4 <_vfiprintf_r+0x220>
 800acee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acf0:	f000 faaf 	bl	800b252 <__retarget_lock_release_recursive>
 800acf4:	89ab      	ldrh	r3, [r5, #12]
 800acf6:	065b      	lsls	r3, r3, #25
 800acf8:	f53f af12 	bmi.w	800ab20 <_vfiprintf_r+0x4c>
 800acfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfe:	e711      	b.n	800ab24 <_vfiprintf_r+0x50>
 800ad00:	ab03      	add	r3, sp, #12
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	462a      	mov	r2, r5
 800ad06:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <_vfiprintf_r+0x258>)
 800ad08:	a904      	add	r1, sp, #16
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f7fe f862 	bl	8008dd4 <_printf_i>
 800ad10:	e7e4      	b.n	800acdc <_vfiprintf_r+0x208>
 800ad12:	bf00      	nop
 800ad14:	0800b9ec 	.word	0x0800b9ec
 800ad18:	0800ba0c 	.word	0x0800ba0c
 800ad1c:	0800b9cc 	.word	0x0800b9cc
 800ad20:	0800b874 	.word	0x0800b874
 800ad24:	0800b87e 	.word	0x0800b87e
 800ad28:	0800888d 	.word	0x0800888d
 800ad2c:	0800aab1 	.word	0x0800aab1
 800ad30:	0800b87a 	.word	0x0800b87a

0800ad34 <__swbuf_r>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	460e      	mov	r6, r1
 800ad38:	4614      	mov	r4, r2
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	b118      	cbz	r0, 800ad46 <__swbuf_r+0x12>
 800ad3e:	6983      	ldr	r3, [r0, #24]
 800ad40:	b90b      	cbnz	r3, 800ad46 <__swbuf_r+0x12>
 800ad42:	f000 f9e7 	bl	800b114 <__sinit>
 800ad46:	4b21      	ldr	r3, [pc, #132]	; (800adcc <__swbuf_r+0x98>)
 800ad48:	429c      	cmp	r4, r3
 800ad4a:	d12b      	bne.n	800ada4 <__swbuf_r+0x70>
 800ad4c:	686c      	ldr	r4, [r5, #4]
 800ad4e:	69a3      	ldr	r3, [r4, #24]
 800ad50:	60a3      	str	r3, [r4, #8]
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	071a      	lsls	r2, r3, #28
 800ad56:	d52f      	bpl.n	800adb8 <__swbuf_r+0x84>
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	b36b      	cbz	r3, 800adb8 <__swbuf_r+0x84>
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	6820      	ldr	r0, [r4, #0]
 800ad60:	1ac0      	subs	r0, r0, r3
 800ad62:	6963      	ldr	r3, [r4, #20]
 800ad64:	b2f6      	uxtb	r6, r6
 800ad66:	4283      	cmp	r3, r0
 800ad68:	4637      	mov	r7, r6
 800ad6a:	dc04      	bgt.n	800ad76 <__swbuf_r+0x42>
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f000 f93c 	bl	800afec <_fflush_r>
 800ad74:	bb30      	cbnz	r0, 800adc4 <__swbuf_r+0x90>
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	60a3      	str	r3, [r4, #8]
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	1c5a      	adds	r2, r3, #1
 800ad80:	6022      	str	r2, [r4, #0]
 800ad82:	701e      	strb	r6, [r3, #0]
 800ad84:	6963      	ldr	r3, [r4, #20]
 800ad86:	3001      	adds	r0, #1
 800ad88:	4283      	cmp	r3, r0
 800ad8a:	d004      	beq.n	800ad96 <__swbuf_r+0x62>
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	07db      	lsls	r3, r3, #31
 800ad90:	d506      	bpl.n	800ada0 <__swbuf_r+0x6c>
 800ad92:	2e0a      	cmp	r6, #10
 800ad94:	d104      	bne.n	800ada0 <__swbuf_r+0x6c>
 800ad96:	4621      	mov	r1, r4
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f000 f927 	bl	800afec <_fflush_r>
 800ad9e:	b988      	cbnz	r0, 800adc4 <__swbuf_r+0x90>
 800ada0:	4638      	mov	r0, r7
 800ada2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada4:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <__swbuf_r+0x9c>)
 800ada6:	429c      	cmp	r4, r3
 800ada8:	d101      	bne.n	800adae <__swbuf_r+0x7a>
 800adaa:	68ac      	ldr	r4, [r5, #8]
 800adac:	e7cf      	b.n	800ad4e <__swbuf_r+0x1a>
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <__swbuf_r+0xa0>)
 800adb0:	429c      	cmp	r4, r3
 800adb2:	bf08      	it	eq
 800adb4:	68ec      	ldreq	r4, [r5, #12]
 800adb6:	e7ca      	b.n	800ad4e <__swbuf_r+0x1a>
 800adb8:	4621      	mov	r1, r4
 800adba:	4628      	mov	r0, r5
 800adbc:	f000 f81a 	bl	800adf4 <__swsetup_r>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d0cb      	beq.n	800ad5c <__swbuf_r+0x28>
 800adc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800adc8:	e7ea      	b.n	800ada0 <__swbuf_r+0x6c>
 800adca:	bf00      	nop
 800adcc:	0800b9ec 	.word	0x0800b9ec
 800add0:	0800ba0c 	.word	0x0800ba0c
 800add4:	0800b9cc 	.word	0x0800b9cc

0800add8 <__ascii_wctomb>:
 800add8:	b149      	cbz	r1, 800adee <__ascii_wctomb+0x16>
 800adda:	2aff      	cmp	r2, #255	; 0xff
 800addc:	bf85      	ittet	hi
 800adde:	238a      	movhi	r3, #138	; 0x8a
 800ade0:	6003      	strhi	r3, [r0, #0]
 800ade2:	700a      	strbls	r2, [r1, #0]
 800ade4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ade8:	bf98      	it	ls
 800adea:	2001      	movls	r0, #1
 800adec:	4770      	bx	lr
 800adee:	4608      	mov	r0, r1
 800adf0:	4770      	bx	lr
	...

0800adf4 <__swsetup_r>:
 800adf4:	4b32      	ldr	r3, [pc, #200]	; (800aec0 <__swsetup_r+0xcc>)
 800adf6:	b570      	push	{r4, r5, r6, lr}
 800adf8:	681d      	ldr	r5, [r3, #0]
 800adfa:	4606      	mov	r6, r0
 800adfc:	460c      	mov	r4, r1
 800adfe:	b125      	cbz	r5, 800ae0a <__swsetup_r+0x16>
 800ae00:	69ab      	ldr	r3, [r5, #24]
 800ae02:	b913      	cbnz	r3, 800ae0a <__swsetup_r+0x16>
 800ae04:	4628      	mov	r0, r5
 800ae06:	f000 f985 	bl	800b114 <__sinit>
 800ae0a:	4b2e      	ldr	r3, [pc, #184]	; (800aec4 <__swsetup_r+0xd0>)
 800ae0c:	429c      	cmp	r4, r3
 800ae0e:	d10f      	bne.n	800ae30 <__swsetup_r+0x3c>
 800ae10:	686c      	ldr	r4, [r5, #4]
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae18:	0719      	lsls	r1, r3, #28
 800ae1a:	d42c      	bmi.n	800ae76 <__swsetup_r+0x82>
 800ae1c:	06dd      	lsls	r5, r3, #27
 800ae1e:	d411      	bmi.n	800ae44 <__swsetup_r+0x50>
 800ae20:	2309      	movs	r3, #9
 800ae22:	6033      	str	r3, [r6, #0]
 800ae24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae2e:	e03e      	b.n	800aeae <__swsetup_r+0xba>
 800ae30:	4b25      	ldr	r3, [pc, #148]	; (800aec8 <__swsetup_r+0xd4>)
 800ae32:	429c      	cmp	r4, r3
 800ae34:	d101      	bne.n	800ae3a <__swsetup_r+0x46>
 800ae36:	68ac      	ldr	r4, [r5, #8]
 800ae38:	e7eb      	b.n	800ae12 <__swsetup_r+0x1e>
 800ae3a:	4b24      	ldr	r3, [pc, #144]	; (800aecc <__swsetup_r+0xd8>)
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	bf08      	it	eq
 800ae40:	68ec      	ldreq	r4, [r5, #12]
 800ae42:	e7e6      	b.n	800ae12 <__swsetup_r+0x1e>
 800ae44:	0758      	lsls	r0, r3, #29
 800ae46:	d512      	bpl.n	800ae6e <__swsetup_r+0x7a>
 800ae48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae4a:	b141      	cbz	r1, 800ae5e <__swsetup_r+0x6a>
 800ae4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae50:	4299      	cmp	r1, r3
 800ae52:	d002      	beq.n	800ae5a <__swsetup_r+0x66>
 800ae54:	4630      	mov	r0, r6
 800ae56:	f7ff fb31 	bl	800a4bc <_free_r>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae64:	81a3      	strh	r3, [r4, #12]
 800ae66:	2300      	movs	r3, #0
 800ae68:	6063      	str	r3, [r4, #4]
 800ae6a:	6923      	ldr	r3, [r4, #16]
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	f043 0308 	orr.w	r3, r3, #8
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	b94b      	cbnz	r3, 800ae8e <__swsetup_r+0x9a>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae84:	d003      	beq.n	800ae8e <__swsetup_r+0x9a>
 800ae86:	4621      	mov	r1, r4
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f000 fa09 	bl	800b2a0 <__smakebuf_r>
 800ae8e:	89a0      	ldrh	r0, [r4, #12]
 800ae90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae94:	f010 0301 	ands.w	r3, r0, #1
 800ae98:	d00a      	beq.n	800aeb0 <__swsetup_r+0xbc>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60a3      	str	r3, [r4, #8]
 800ae9e:	6963      	ldr	r3, [r4, #20]
 800aea0:	425b      	negs	r3, r3
 800aea2:	61a3      	str	r3, [r4, #24]
 800aea4:	6923      	ldr	r3, [r4, #16]
 800aea6:	b943      	cbnz	r3, 800aeba <__swsetup_r+0xc6>
 800aea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aeac:	d1ba      	bne.n	800ae24 <__swsetup_r+0x30>
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
 800aeb0:	0781      	lsls	r1, r0, #30
 800aeb2:	bf58      	it	pl
 800aeb4:	6963      	ldrpl	r3, [r4, #20]
 800aeb6:	60a3      	str	r3, [r4, #8]
 800aeb8:	e7f4      	b.n	800aea4 <__swsetup_r+0xb0>
 800aeba:	2000      	movs	r0, #0
 800aebc:	e7f7      	b.n	800aeae <__swsetup_r+0xba>
 800aebe:	bf00      	nop
 800aec0:	2000000c 	.word	0x2000000c
 800aec4:	0800b9ec 	.word	0x0800b9ec
 800aec8:	0800ba0c 	.word	0x0800ba0c
 800aecc:	0800b9cc 	.word	0x0800b9cc

0800aed0 <abort>:
 800aed0:	b508      	push	{r3, lr}
 800aed2:	2006      	movs	r0, #6
 800aed4:	f000 fa54 	bl	800b380 <raise>
 800aed8:	2001      	movs	r0, #1
 800aeda:	f7f6 fd47 	bl	800196c <_exit>
	...

0800aee0 <__sflush_r>:
 800aee0:	898a      	ldrh	r2, [r1, #12]
 800aee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee6:	4605      	mov	r5, r0
 800aee8:	0710      	lsls	r0, r2, #28
 800aeea:	460c      	mov	r4, r1
 800aeec:	d458      	bmi.n	800afa0 <__sflush_r+0xc0>
 800aeee:	684b      	ldr	r3, [r1, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	dc05      	bgt.n	800af00 <__sflush_r+0x20>
 800aef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dc02      	bgt.n	800af00 <__sflush_r+0x20>
 800aefa:	2000      	movs	r0, #0
 800aefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af02:	2e00      	cmp	r6, #0
 800af04:	d0f9      	beq.n	800aefa <__sflush_r+0x1a>
 800af06:	2300      	movs	r3, #0
 800af08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af0c:	682f      	ldr	r7, [r5, #0]
 800af0e:	602b      	str	r3, [r5, #0]
 800af10:	d032      	beq.n	800af78 <__sflush_r+0x98>
 800af12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	075a      	lsls	r2, r3, #29
 800af18:	d505      	bpl.n	800af26 <__sflush_r+0x46>
 800af1a:	6863      	ldr	r3, [r4, #4]
 800af1c:	1ac0      	subs	r0, r0, r3
 800af1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af20:	b10b      	cbz	r3, 800af26 <__sflush_r+0x46>
 800af22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af24:	1ac0      	subs	r0, r0, r3
 800af26:	2300      	movs	r3, #0
 800af28:	4602      	mov	r2, r0
 800af2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af2c:	6a21      	ldr	r1, [r4, #32]
 800af2e:	4628      	mov	r0, r5
 800af30:	47b0      	blx	r6
 800af32:	1c43      	adds	r3, r0, #1
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	d106      	bne.n	800af46 <__sflush_r+0x66>
 800af38:	6829      	ldr	r1, [r5, #0]
 800af3a:	291d      	cmp	r1, #29
 800af3c:	d82c      	bhi.n	800af98 <__sflush_r+0xb8>
 800af3e:	4a2a      	ldr	r2, [pc, #168]	; (800afe8 <__sflush_r+0x108>)
 800af40:	40ca      	lsrs	r2, r1
 800af42:	07d6      	lsls	r6, r2, #31
 800af44:	d528      	bpl.n	800af98 <__sflush_r+0xb8>
 800af46:	2200      	movs	r2, #0
 800af48:	6062      	str	r2, [r4, #4]
 800af4a:	04d9      	lsls	r1, r3, #19
 800af4c:	6922      	ldr	r2, [r4, #16]
 800af4e:	6022      	str	r2, [r4, #0]
 800af50:	d504      	bpl.n	800af5c <__sflush_r+0x7c>
 800af52:	1c42      	adds	r2, r0, #1
 800af54:	d101      	bne.n	800af5a <__sflush_r+0x7a>
 800af56:	682b      	ldr	r3, [r5, #0]
 800af58:	b903      	cbnz	r3, 800af5c <__sflush_r+0x7c>
 800af5a:	6560      	str	r0, [r4, #84]	; 0x54
 800af5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af5e:	602f      	str	r7, [r5, #0]
 800af60:	2900      	cmp	r1, #0
 800af62:	d0ca      	beq.n	800aefa <__sflush_r+0x1a>
 800af64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af68:	4299      	cmp	r1, r3
 800af6a:	d002      	beq.n	800af72 <__sflush_r+0x92>
 800af6c:	4628      	mov	r0, r5
 800af6e:	f7ff faa5 	bl	800a4bc <_free_r>
 800af72:	2000      	movs	r0, #0
 800af74:	6360      	str	r0, [r4, #52]	; 0x34
 800af76:	e7c1      	b.n	800aefc <__sflush_r+0x1c>
 800af78:	6a21      	ldr	r1, [r4, #32]
 800af7a:	2301      	movs	r3, #1
 800af7c:	4628      	mov	r0, r5
 800af7e:	47b0      	blx	r6
 800af80:	1c41      	adds	r1, r0, #1
 800af82:	d1c7      	bne.n	800af14 <__sflush_r+0x34>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0c4      	beq.n	800af14 <__sflush_r+0x34>
 800af8a:	2b1d      	cmp	r3, #29
 800af8c:	d001      	beq.n	800af92 <__sflush_r+0xb2>
 800af8e:	2b16      	cmp	r3, #22
 800af90:	d101      	bne.n	800af96 <__sflush_r+0xb6>
 800af92:	602f      	str	r7, [r5, #0]
 800af94:	e7b1      	b.n	800aefa <__sflush_r+0x1a>
 800af96:	89a3      	ldrh	r3, [r4, #12]
 800af98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af9c:	81a3      	strh	r3, [r4, #12]
 800af9e:	e7ad      	b.n	800aefc <__sflush_r+0x1c>
 800afa0:	690f      	ldr	r7, [r1, #16]
 800afa2:	2f00      	cmp	r7, #0
 800afa4:	d0a9      	beq.n	800aefa <__sflush_r+0x1a>
 800afa6:	0793      	lsls	r3, r2, #30
 800afa8:	680e      	ldr	r6, [r1, #0]
 800afaa:	bf08      	it	eq
 800afac:	694b      	ldreq	r3, [r1, #20]
 800afae:	600f      	str	r7, [r1, #0]
 800afb0:	bf18      	it	ne
 800afb2:	2300      	movne	r3, #0
 800afb4:	eba6 0807 	sub.w	r8, r6, r7
 800afb8:	608b      	str	r3, [r1, #8]
 800afba:	f1b8 0f00 	cmp.w	r8, #0
 800afbe:	dd9c      	ble.n	800aefa <__sflush_r+0x1a>
 800afc0:	6a21      	ldr	r1, [r4, #32]
 800afc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afc4:	4643      	mov	r3, r8
 800afc6:	463a      	mov	r2, r7
 800afc8:	4628      	mov	r0, r5
 800afca:	47b0      	blx	r6
 800afcc:	2800      	cmp	r0, #0
 800afce:	dc06      	bgt.n	800afde <__sflush_r+0xfe>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd6:	81a3      	strh	r3, [r4, #12]
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afdc:	e78e      	b.n	800aefc <__sflush_r+0x1c>
 800afde:	4407      	add	r7, r0
 800afe0:	eba8 0800 	sub.w	r8, r8, r0
 800afe4:	e7e9      	b.n	800afba <__sflush_r+0xda>
 800afe6:	bf00      	nop
 800afe8:	20400001 	.word	0x20400001

0800afec <_fflush_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	690b      	ldr	r3, [r1, #16]
 800aff0:	4605      	mov	r5, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	b913      	cbnz	r3, 800affc <_fflush_r+0x10>
 800aff6:	2500      	movs	r5, #0
 800aff8:	4628      	mov	r0, r5
 800affa:	bd38      	pop	{r3, r4, r5, pc}
 800affc:	b118      	cbz	r0, 800b006 <_fflush_r+0x1a>
 800affe:	6983      	ldr	r3, [r0, #24]
 800b000:	b90b      	cbnz	r3, 800b006 <_fflush_r+0x1a>
 800b002:	f000 f887 	bl	800b114 <__sinit>
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <_fflush_r+0x6c>)
 800b008:	429c      	cmp	r4, r3
 800b00a:	d11b      	bne.n	800b044 <_fflush_r+0x58>
 800b00c:	686c      	ldr	r4, [r5, #4]
 800b00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0ef      	beq.n	800aff6 <_fflush_r+0xa>
 800b016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b018:	07d0      	lsls	r0, r2, #31
 800b01a:	d404      	bmi.n	800b026 <_fflush_r+0x3a>
 800b01c:	0599      	lsls	r1, r3, #22
 800b01e:	d402      	bmi.n	800b026 <_fflush_r+0x3a>
 800b020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b022:	f000 f915 	bl	800b250 <__retarget_lock_acquire_recursive>
 800b026:	4628      	mov	r0, r5
 800b028:	4621      	mov	r1, r4
 800b02a:	f7ff ff59 	bl	800aee0 <__sflush_r>
 800b02e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b030:	07da      	lsls	r2, r3, #31
 800b032:	4605      	mov	r5, r0
 800b034:	d4e0      	bmi.n	800aff8 <_fflush_r+0xc>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	059b      	lsls	r3, r3, #22
 800b03a:	d4dd      	bmi.n	800aff8 <_fflush_r+0xc>
 800b03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b03e:	f000 f908 	bl	800b252 <__retarget_lock_release_recursive>
 800b042:	e7d9      	b.n	800aff8 <_fflush_r+0xc>
 800b044:	4b05      	ldr	r3, [pc, #20]	; (800b05c <_fflush_r+0x70>)
 800b046:	429c      	cmp	r4, r3
 800b048:	d101      	bne.n	800b04e <_fflush_r+0x62>
 800b04a:	68ac      	ldr	r4, [r5, #8]
 800b04c:	e7df      	b.n	800b00e <_fflush_r+0x22>
 800b04e:	4b04      	ldr	r3, [pc, #16]	; (800b060 <_fflush_r+0x74>)
 800b050:	429c      	cmp	r4, r3
 800b052:	bf08      	it	eq
 800b054:	68ec      	ldreq	r4, [r5, #12]
 800b056:	e7da      	b.n	800b00e <_fflush_r+0x22>
 800b058:	0800b9ec 	.word	0x0800b9ec
 800b05c:	0800ba0c 	.word	0x0800ba0c
 800b060:	0800b9cc 	.word	0x0800b9cc

0800b064 <std>:
 800b064:	2300      	movs	r3, #0
 800b066:	b510      	push	{r4, lr}
 800b068:	4604      	mov	r4, r0
 800b06a:	e9c0 3300 	strd	r3, r3, [r0]
 800b06e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b072:	6083      	str	r3, [r0, #8]
 800b074:	8181      	strh	r1, [r0, #12]
 800b076:	6643      	str	r3, [r0, #100]	; 0x64
 800b078:	81c2      	strh	r2, [r0, #14]
 800b07a:	6183      	str	r3, [r0, #24]
 800b07c:	4619      	mov	r1, r3
 800b07e:	2208      	movs	r2, #8
 800b080:	305c      	adds	r0, #92	; 0x5c
 800b082:	f7fd fb5b 	bl	800873c <memset>
 800b086:	4b05      	ldr	r3, [pc, #20]	; (800b09c <std+0x38>)
 800b088:	6263      	str	r3, [r4, #36]	; 0x24
 800b08a:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <std+0x3c>)
 800b08c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b08e:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <std+0x40>)
 800b090:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b092:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <std+0x44>)
 800b094:	6224      	str	r4, [r4, #32]
 800b096:	6323      	str	r3, [r4, #48]	; 0x30
 800b098:	bd10      	pop	{r4, pc}
 800b09a:	bf00      	nop
 800b09c:	0800b3b9 	.word	0x0800b3b9
 800b0a0:	0800b3db 	.word	0x0800b3db
 800b0a4:	0800b413 	.word	0x0800b413
 800b0a8:	0800b437 	.word	0x0800b437

0800b0ac <_cleanup_r>:
 800b0ac:	4901      	ldr	r1, [pc, #4]	; (800b0b4 <_cleanup_r+0x8>)
 800b0ae:	f000 b8af 	b.w	800b210 <_fwalk_reent>
 800b0b2:	bf00      	nop
 800b0b4:	0800afed 	.word	0x0800afed

0800b0b8 <__sfmoreglue>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	2268      	movs	r2, #104	; 0x68
 800b0bc:	1e4d      	subs	r5, r1, #1
 800b0be:	4355      	muls	r5, r2
 800b0c0:	460e      	mov	r6, r1
 800b0c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0c6:	f7ff fa65 	bl	800a594 <_malloc_r>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	b140      	cbz	r0, 800b0e0 <__sfmoreglue+0x28>
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	e9c0 1600 	strd	r1, r6, [r0]
 800b0d4:	300c      	adds	r0, #12
 800b0d6:	60a0      	str	r0, [r4, #8]
 800b0d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0dc:	f7fd fb2e 	bl	800873c <memset>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}

0800b0e4 <__sfp_lock_acquire>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	; (800b0ec <__sfp_lock_acquire+0x8>)
 800b0e6:	f000 b8b3 	b.w	800b250 <__retarget_lock_acquire_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	200003e9 	.word	0x200003e9

0800b0f0 <__sfp_lock_release>:
 800b0f0:	4801      	ldr	r0, [pc, #4]	; (800b0f8 <__sfp_lock_release+0x8>)
 800b0f2:	f000 b8ae 	b.w	800b252 <__retarget_lock_release_recursive>
 800b0f6:	bf00      	nop
 800b0f8:	200003e9 	.word	0x200003e9

0800b0fc <__sinit_lock_acquire>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	; (800b104 <__sinit_lock_acquire+0x8>)
 800b0fe:	f000 b8a7 	b.w	800b250 <__retarget_lock_acquire_recursive>
 800b102:	bf00      	nop
 800b104:	200003ea 	.word	0x200003ea

0800b108 <__sinit_lock_release>:
 800b108:	4801      	ldr	r0, [pc, #4]	; (800b110 <__sinit_lock_release+0x8>)
 800b10a:	f000 b8a2 	b.w	800b252 <__retarget_lock_release_recursive>
 800b10e:	bf00      	nop
 800b110:	200003ea 	.word	0x200003ea

0800b114 <__sinit>:
 800b114:	b510      	push	{r4, lr}
 800b116:	4604      	mov	r4, r0
 800b118:	f7ff fff0 	bl	800b0fc <__sinit_lock_acquire>
 800b11c:	69a3      	ldr	r3, [r4, #24]
 800b11e:	b11b      	cbz	r3, 800b128 <__sinit+0x14>
 800b120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b124:	f7ff bff0 	b.w	800b108 <__sinit_lock_release>
 800b128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b12c:	6523      	str	r3, [r4, #80]	; 0x50
 800b12e:	4b13      	ldr	r3, [pc, #76]	; (800b17c <__sinit+0x68>)
 800b130:	4a13      	ldr	r2, [pc, #76]	; (800b180 <__sinit+0x6c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	62a2      	str	r2, [r4, #40]	; 0x28
 800b136:	42a3      	cmp	r3, r4
 800b138:	bf04      	itt	eq
 800b13a:	2301      	moveq	r3, #1
 800b13c:	61a3      	streq	r3, [r4, #24]
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 f820 	bl	800b184 <__sfp>
 800b144:	6060      	str	r0, [r4, #4]
 800b146:	4620      	mov	r0, r4
 800b148:	f000 f81c 	bl	800b184 <__sfp>
 800b14c:	60a0      	str	r0, [r4, #8]
 800b14e:	4620      	mov	r0, r4
 800b150:	f000 f818 	bl	800b184 <__sfp>
 800b154:	2200      	movs	r2, #0
 800b156:	60e0      	str	r0, [r4, #12]
 800b158:	2104      	movs	r1, #4
 800b15a:	6860      	ldr	r0, [r4, #4]
 800b15c:	f7ff ff82 	bl	800b064 <std>
 800b160:	68a0      	ldr	r0, [r4, #8]
 800b162:	2201      	movs	r2, #1
 800b164:	2109      	movs	r1, #9
 800b166:	f7ff ff7d 	bl	800b064 <std>
 800b16a:	68e0      	ldr	r0, [r4, #12]
 800b16c:	2202      	movs	r2, #2
 800b16e:	2112      	movs	r1, #18
 800b170:	f7ff ff78 	bl	800b064 <std>
 800b174:	2301      	movs	r3, #1
 800b176:	61a3      	str	r3, [r4, #24]
 800b178:	e7d2      	b.n	800b120 <__sinit+0xc>
 800b17a:	bf00      	nop
 800b17c:	0800b650 	.word	0x0800b650
 800b180:	0800b0ad 	.word	0x0800b0ad

0800b184 <__sfp>:
 800b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b186:	4607      	mov	r7, r0
 800b188:	f7ff ffac 	bl	800b0e4 <__sfp_lock_acquire>
 800b18c:	4b1e      	ldr	r3, [pc, #120]	; (800b208 <__sfp+0x84>)
 800b18e:	681e      	ldr	r6, [r3, #0]
 800b190:	69b3      	ldr	r3, [r6, #24]
 800b192:	b913      	cbnz	r3, 800b19a <__sfp+0x16>
 800b194:	4630      	mov	r0, r6
 800b196:	f7ff ffbd 	bl	800b114 <__sinit>
 800b19a:	3648      	adds	r6, #72	; 0x48
 800b19c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	d503      	bpl.n	800b1ac <__sfp+0x28>
 800b1a4:	6833      	ldr	r3, [r6, #0]
 800b1a6:	b30b      	cbz	r3, 800b1ec <__sfp+0x68>
 800b1a8:	6836      	ldr	r6, [r6, #0]
 800b1aa:	e7f7      	b.n	800b19c <__sfp+0x18>
 800b1ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1b0:	b9d5      	cbnz	r5, 800b1e8 <__sfp+0x64>
 800b1b2:	4b16      	ldr	r3, [pc, #88]	; (800b20c <__sfp+0x88>)
 800b1b4:	60e3      	str	r3, [r4, #12]
 800b1b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1ba:	6665      	str	r5, [r4, #100]	; 0x64
 800b1bc:	f000 f847 	bl	800b24e <__retarget_lock_init_recursive>
 800b1c0:	f7ff ff96 	bl	800b0f0 <__sfp_lock_release>
 800b1c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1cc:	6025      	str	r5, [r4, #0]
 800b1ce:	61a5      	str	r5, [r4, #24]
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1d8:	f7fd fab0 	bl	800873c <memset>
 800b1dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1e8:	3468      	adds	r4, #104	; 0x68
 800b1ea:	e7d9      	b.n	800b1a0 <__sfp+0x1c>
 800b1ec:	2104      	movs	r1, #4
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	f7ff ff62 	bl	800b0b8 <__sfmoreglue>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	6030      	str	r0, [r6, #0]
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d1d5      	bne.n	800b1a8 <__sfp+0x24>
 800b1fc:	f7ff ff78 	bl	800b0f0 <__sfp_lock_release>
 800b200:	230c      	movs	r3, #12
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	e7ee      	b.n	800b1e4 <__sfp+0x60>
 800b206:	bf00      	nop
 800b208:	0800b650 	.word	0x0800b650
 800b20c:	ffff0001 	.word	0xffff0001

0800b210 <_fwalk_reent>:
 800b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b214:	4606      	mov	r6, r0
 800b216:	4688      	mov	r8, r1
 800b218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b21c:	2700      	movs	r7, #0
 800b21e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b222:	f1b9 0901 	subs.w	r9, r9, #1
 800b226:	d505      	bpl.n	800b234 <_fwalk_reent+0x24>
 800b228:	6824      	ldr	r4, [r4, #0]
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d1f7      	bne.n	800b21e <_fwalk_reent+0xe>
 800b22e:	4638      	mov	r0, r7
 800b230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b234:	89ab      	ldrh	r3, [r5, #12]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d907      	bls.n	800b24a <_fwalk_reent+0x3a>
 800b23a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b23e:	3301      	adds	r3, #1
 800b240:	d003      	beq.n	800b24a <_fwalk_reent+0x3a>
 800b242:	4629      	mov	r1, r5
 800b244:	4630      	mov	r0, r6
 800b246:	47c0      	blx	r8
 800b248:	4307      	orrs	r7, r0
 800b24a:	3568      	adds	r5, #104	; 0x68
 800b24c:	e7e9      	b.n	800b222 <_fwalk_reent+0x12>

0800b24e <__retarget_lock_init_recursive>:
 800b24e:	4770      	bx	lr

0800b250 <__retarget_lock_acquire_recursive>:
 800b250:	4770      	bx	lr

0800b252 <__retarget_lock_release_recursive>:
 800b252:	4770      	bx	lr

0800b254 <__swhatbuf_r>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	460e      	mov	r6, r1
 800b258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25c:	2900      	cmp	r1, #0
 800b25e:	b096      	sub	sp, #88	; 0x58
 800b260:	4614      	mov	r4, r2
 800b262:	461d      	mov	r5, r3
 800b264:	da08      	bge.n	800b278 <__swhatbuf_r+0x24>
 800b266:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	602a      	str	r2, [r5, #0]
 800b26e:	061a      	lsls	r2, r3, #24
 800b270:	d410      	bmi.n	800b294 <__swhatbuf_r+0x40>
 800b272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b276:	e00e      	b.n	800b296 <__swhatbuf_r+0x42>
 800b278:	466a      	mov	r2, sp
 800b27a:	f000 f903 	bl	800b484 <_fstat_r>
 800b27e:	2800      	cmp	r0, #0
 800b280:	dbf1      	blt.n	800b266 <__swhatbuf_r+0x12>
 800b282:	9a01      	ldr	r2, [sp, #4]
 800b284:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b288:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b28c:	425a      	negs	r2, r3
 800b28e:	415a      	adcs	r2, r3
 800b290:	602a      	str	r2, [r5, #0]
 800b292:	e7ee      	b.n	800b272 <__swhatbuf_r+0x1e>
 800b294:	2340      	movs	r3, #64	; 0x40
 800b296:	2000      	movs	r0, #0
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	b016      	add	sp, #88	; 0x58
 800b29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2a0 <__smakebuf_r>:
 800b2a0:	898b      	ldrh	r3, [r1, #12]
 800b2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2a4:	079d      	lsls	r5, r3, #30
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	d507      	bpl.n	800b2bc <__smakebuf_r+0x1c>
 800b2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	6123      	str	r3, [r4, #16]
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	6163      	str	r3, [r4, #20]
 800b2b8:	b002      	add	sp, #8
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	ab01      	add	r3, sp, #4
 800b2be:	466a      	mov	r2, sp
 800b2c0:	f7ff ffc8 	bl	800b254 <__swhatbuf_r>
 800b2c4:	9900      	ldr	r1, [sp, #0]
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f7ff f963 	bl	800a594 <_malloc_r>
 800b2ce:	b948      	cbnz	r0, 800b2e4 <__smakebuf_r+0x44>
 800b2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2d4:	059a      	lsls	r2, r3, #22
 800b2d6:	d4ef      	bmi.n	800b2b8 <__smakebuf_r+0x18>
 800b2d8:	f023 0303 	bic.w	r3, r3, #3
 800b2dc:	f043 0302 	orr.w	r3, r3, #2
 800b2e0:	81a3      	strh	r3, [r4, #12]
 800b2e2:	e7e3      	b.n	800b2ac <__smakebuf_r+0xc>
 800b2e4:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <__smakebuf_r+0x7c>)
 800b2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	6020      	str	r0, [r4, #0]
 800b2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f0:	81a3      	strh	r3, [r4, #12]
 800b2f2:	9b00      	ldr	r3, [sp, #0]
 800b2f4:	6163      	str	r3, [r4, #20]
 800b2f6:	9b01      	ldr	r3, [sp, #4]
 800b2f8:	6120      	str	r0, [r4, #16]
 800b2fa:	b15b      	cbz	r3, 800b314 <__smakebuf_r+0x74>
 800b2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b300:	4630      	mov	r0, r6
 800b302:	f000 f8d1 	bl	800b4a8 <_isatty_r>
 800b306:	b128      	cbz	r0, 800b314 <__smakebuf_r+0x74>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	f043 0301 	orr.w	r3, r3, #1
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	89a0      	ldrh	r0, [r4, #12]
 800b316:	4305      	orrs	r5, r0
 800b318:	81a5      	strh	r5, [r4, #12]
 800b31a:	e7cd      	b.n	800b2b8 <__smakebuf_r+0x18>
 800b31c:	0800b0ad 	.word	0x0800b0ad

0800b320 <_malloc_usable_size_r>:
 800b320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b324:	1f18      	subs	r0, r3, #4
 800b326:	2b00      	cmp	r3, #0
 800b328:	bfbc      	itt	lt
 800b32a:	580b      	ldrlt	r3, [r1, r0]
 800b32c:	18c0      	addlt	r0, r0, r3
 800b32e:	4770      	bx	lr

0800b330 <_raise_r>:
 800b330:	291f      	cmp	r1, #31
 800b332:	b538      	push	{r3, r4, r5, lr}
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	d904      	bls.n	800b344 <_raise_r+0x14>
 800b33a:	2316      	movs	r3, #22
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b346:	b112      	cbz	r2, 800b34e <_raise_r+0x1e>
 800b348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b34c:	b94b      	cbnz	r3, 800b362 <_raise_r+0x32>
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f830 	bl	800b3b4 <_getpid_r>
 800b354:	462a      	mov	r2, r5
 800b356:	4601      	mov	r1, r0
 800b358:	4620      	mov	r0, r4
 800b35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b35e:	f000 b817 	b.w	800b390 <_kill_r>
 800b362:	2b01      	cmp	r3, #1
 800b364:	d00a      	beq.n	800b37c <_raise_r+0x4c>
 800b366:	1c59      	adds	r1, r3, #1
 800b368:	d103      	bne.n	800b372 <_raise_r+0x42>
 800b36a:	2316      	movs	r3, #22
 800b36c:	6003      	str	r3, [r0, #0]
 800b36e:	2001      	movs	r0, #1
 800b370:	e7e7      	b.n	800b342 <_raise_r+0x12>
 800b372:	2400      	movs	r4, #0
 800b374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b378:	4628      	mov	r0, r5
 800b37a:	4798      	blx	r3
 800b37c:	2000      	movs	r0, #0
 800b37e:	e7e0      	b.n	800b342 <_raise_r+0x12>

0800b380 <raise>:
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <raise+0xc>)
 800b382:	4601      	mov	r1, r0
 800b384:	6818      	ldr	r0, [r3, #0]
 800b386:	f7ff bfd3 	b.w	800b330 <_raise_r>
 800b38a:	bf00      	nop
 800b38c:	2000000c 	.word	0x2000000c

0800b390 <_kill_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_kill_r+0x20>)
 800b394:	2300      	movs	r3, #0
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	602b      	str	r3, [r5, #0]
 800b39e:	f7f6 fad5 	bl	800194c <_kill>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d102      	bne.n	800b3ac <_kill_r+0x1c>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	b103      	cbz	r3, 800b3ac <_kill_r+0x1c>
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200003e4 	.word	0x200003e4

0800b3b4 <_getpid_r>:
 800b3b4:	f7f6 bac2 	b.w	800193c <_getpid>

0800b3b8 <__sread>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c0:	f000 f894 	bl	800b4ec <_read_r>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	bfab      	itete	ge
 800b3c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b3cc:	181b      	addge	r3, r3, r0
 800b3ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3d2:	bfac      	ite	ge
 800b3d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3d6:	81a3      	strhlt	r3, [r4, #12]
 800b3d8:	bd10      	pop	{r4, pc}

0800b3da <__swrite>:
 800b3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3de:	461f      	mov	r7, r3
 800b3e0:	898b      	ldrh	r3, [r1, #12]
 800b3e2:	05db      	lsls	r3, r3, #23
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	d505      	bpl.n	800b3f8 <__swrite+0x1e>
 800b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f000 f868 	bl	800b4c8 <_lseek_r>
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	4632      	mov	r2, r6
 800b406:	463b      	mov	r3, r7
 800b408:	4628      	mov	r0, r5
 800b40a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b40e:	f000 b817 	b.w	800b440 <_write_r>

0800b412 <__sseek>:
 800b412:	b510      	push	{r4, lr}
 800b414:	460c      	mov	r4, r1
 800b416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41a:	f000 f855 	bl	800b4c8 <_lseek_r>
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	bf15      	itete	ne
 800b424:	6560      	strne	r0, [r4, #84]	; 0x54
 800b426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b42a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b42e:	81a3      	strheq	r3, [r4, #12]
 800b430:	bf18      	it	ne
 800b432:	81a3      	strhne	r3, [r4, #12]
 800b434:	bd10      	pop	{r4, pc}

0800b436 <__sclose>:
 800b436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43a:	f000 b813 	b.w	800b464 <_close_r>
	...

0800b440 <_write_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4d07      	ldr	r5, [pc, #28]	; (800b460 <_write_r+0x20>)
 800b444:	4604      	mov	r4, r0
 800b446:	4608      	mov	r0, r1
 800b448:	4611      	mov	r1, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	602a      	str	r2, [r5, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f7f6 fab3 	bl	80019ba <_write>
 800b454:	1c43      	adds	r3, r0, #1
 800b456:	d102      	bne.n	800b45e <_write_r+0x1e>
 800b458:	682b      	ldr	r3, [r5, #0]
 800b45a:	b103      	cbz	r3, 800b45e <_write_r+0x1e>
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	200003e4 	.word	0x200003e4

0800b464 <_close_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4d06      	ldr	r5, [pc, #24]	; (800b480 <_close_r+0x1c>)
 800b468:	2300      	movs	r3, #0
 800b46a:	4604      	mov	r4, r0
 800b46c:	4608      	mov	r0, r1
 800b46e:	602b      	str	r3, [r5, #0]
 800b470:	f7f6 fabf 	bl	80019f2 <_close>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	d102      	bne.n	800b47e <_close_r+0x1a>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	b103      	cbz	r3, 800b47e <_close_r+0x1a>
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	200003e4 	.word	0x200003e4

0800b484 <_fstat_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4d07      	ldr	r5, [pc, #28]	; (800b4a4 <_fstat_r+0x20>)
 800b488:	2300      	movs	r3, #0
 800b48a:	4604      	mov	r4, r0
 800b48c:	4608      	mov	r0, r1
 800b48e:	4611      	mov	r1, r2
 800b490:	602b      	str	r3, [r5, #0]
 800b492:	f7f6 faba 	bl	8001a0a <_fstat>
 800b496:	1c43      	adds	r3, r0, #1
 800b498:	d102      	bne.n	800b4a0 <_fstat_r+0x1c>
 800b49a:	682b      	ldr	r3, [r5, #0]
 800b49c:	b103      	cbz	r3, 800b4a0 <_fstat_r+0x1c>
 800b49e:	6023      	str	r3, [r4, #0]
 800b4a0:	bd38      	pop	{r3, r4, r5, pc}
 800b4a2:	bf00      	nop
 800b4a4:	200003e4 	.word	0x200003e4

0800b4a8 <_isatty_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d06      	ldr	r5, [pc, #24]	; (800b4c4 <_isatty_r+0x1c>)
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	602b      	str	r3, [r5, #0]
 800b4b4:	f7f6 fab9 	bl	8001a2a <_isatty>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_isatty_r+0x1a>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_isatty_r+0x1a>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	200003e4 	.word	0x200003e4

0800b4c8 <_lseek_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4d07      	ldr	r5, [pc, #28]	; (800b4e8 <_lseek_r+0x20>)
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	4608      	mov	r0, r1
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	602a      	str	r2, [r5, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f7f6 fab2 	bl	8001a40 <_lseek>
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	d102      	bne.n	800b4e6 <_lseek_r+0x1e>
 800b4e0:	682b      	ldr	r3, [r5, #0]
 800b4e2:	b103      	cbz	r3, 800b4e6 <_lseek_r+0x1e>
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	bd38      	pop	{r3, r4, r5, pc}
 800b4e8:	200003e4 	.word	0x200003e4

0800b4ec <_read_r>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	4d07      	ldr	r5, [pc, #28]	; (800b50c <_read_r+0x20>)
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	4608      	mov	r0, r1
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	602a      	str	r2, [r5, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	f7f6 fa40 	bl	8001980 <_read>
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	d102      	bne.n	800b50a <_read_r+0x1e>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	b103      	cbz	r3, 800b50a <_read_r+0x1e>
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	200003e4 	.word	0x200003e4

0800b510 <_init>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	bf00      	nop
 800b514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b516:	bc08      	pop	{r3}
 800b518:	469e      	mov	lr, r3
 800b51a:	4770      	bx	lr

0800b51c <_fini>:
 800b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51e:	bf00      	nop
 800b520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b522:	bc08      	pop	{r3}
 800b524:	469e      	mov	lr, r3
 800b526:	4770      	bx	lr
